[REPLACE]^private  AbstractCompiler compiler;^43^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] DeadAssignmentsElimination VariableLiveness  
[REPLACE]^this.compiler =  null;^47^^^^^46^48^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^externs   ;^52^^^^^51^55^[REPLACE] Preconditions.checkNotNull ( externs ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node externs  root 
[REPLACE]^Preconditions .checkState ( true , null )  ;^53^^^^^51^55^[REPLACE] Preconditions.checkNotNull ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal .getScopeRoot (  )  ;^54^^^^^51^55^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node externs  root 
[REPLACE]^Scope scope = t.getScopeRoot (  ) ;^59^^^^^58^78^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^59^^^^^58^78^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( n == null )  {^63^^^^^58^78^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^64^^^^^58^78^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !NodeUtil.containsFunctionDeclaration ( t.getScopeRoot (  ) .isLive (  )  )  )  {^70^71^^^^58^78^[REPLACE] if  ( !NodeUtil.containsFunctionDeclaration ( t.getScopeRoot (  ) .getLastChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^liveness =  new LiveVariablesAnalysis ( true, scope, compiler ) ;^74^^^^^58^78^[REPLACE] liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^74^75^^^^58^78^[ADD] liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ; liveness.analyze (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^ControlFlowGraph<Node> cfg = t.getScopeRoot (  ) ;^73^^^^^58^78^[REPLACE] ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^liveness =  new LiveVariablesAnalysis ( this, scope, compiler ) ;^74^^^^^58^78^[REPLACE] liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^List<DiGraphNode<Node, Branch>> nodes = this.getDirectedGraphNodes (  ) ;^98^^^^^97^131^[REPLACE] List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes (  ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( n != null )  {^104^^^^^97^131^[REPLACE] if  ( n == null )  {^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^if  ( scope.isGlobal (  )  )  {     return ; }^104^^^^^97^131^[REMOVE] ^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( NodeUtil.isAssign ( n )  )  {^114^^^^^97^131^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , true ) ;^115^116^^^^97^131^[REPLACE] tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^t, NodeUtil.isExpressionNode ( n ) , state ) ;^116^^^^^97^131^[REPLACE] t, NodeUtil.getConditionExpression ( n ) , state ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^Preconditions.checkNotNull ( externs ) ;^116^^^^^97^131^[REMOVE] ^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( n.getLastChild (  )  )  {^122^^^^^97^131^[REPLACE] if  ( n.hasChildren (  )  )  {^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^tryRemoveAssignment ( t, n.getFirstChild (  ) , null ) ;^123^^^^^97^131^[REPLACE] tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^tryRemoveAssignment ( t, n, n, state ) ;^123^^^^^97^131^[REMOVE] ^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^tryRemoveAssignment ( t, n.getLastChild (  ) , state ) ;^123^^^^^97^131^[REPLACE] tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes (  ) ;^100^^^^^97^131^[REPLACE] for  ( DiGraphNode<Node, Branch> cfgNode : nodes )  {^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^FlowState<LiveVariableLattice> state = 1.getAnnotation (  ) ;^101^102^^^^97^131^[REPLACE] FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node n = true.getValue (  ) ;^103^^^^^97^131^[REPLACE] Node n = cfgNode.getValue (  ) ;^[METHOD] tryRemoveDeadAssignments [TYPE] void [PARAMETER] NodeTraversal t Node> cfg [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node n  [TYPE]  List nodes  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^tryRemoveAssignment ( t, n, state ) ;^135^^^^^133^136^[REPLACE] tryRemoveAssignment ( t, n, n, state ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^135^^^^^133^136^[ADD] tryRemoveAssignment ( t, n, n, state ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node parent = parent.getParent (  ) ;^151^^^^^149^235^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n )  && n.getType (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^153^154^^^^149^235^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !  c    )  {^228^^^^^153^234^[REPLACE] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^tryRemoveAssignment ( t, c, exprRoot, state ) ;^228^229^230^^^153^234^[ADD] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^229^^^^^153^234^[REPLACE] tryRemoveAssignment ( t, c, exprRoot, state ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == null; )  {^226^^^^^153^234^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^228^229^230^^^153^234^[ADD] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^c =  parent;^231^^^^^153^234^[REPLACE] c = next;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^231^^^^^153^234^[ADD] c = next;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node next = c.getParent (  ) ;^227^^^^^153^234^[REPLACE] Node next = c.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^227^^^^^153^234^[ADD] Node next = c.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^233^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^for  ( Node c = parent.getFirstChild (  ) ; c != null; )  {^226^^^^^153^234^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^226^227^228^229^230^153^234^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; )  { Node next = c.getNext (  ) ; if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( rhs == null )  {^161^^^^^153^234^[REPLACE] if  ( rhs != null )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^rhs =  null.getNext (  ) ;^163^^^^^153^234^[REPLACE] rhs = lhs.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !NodeUtil .isLhs ( op )   )  {^167^^^^^153^234^[REPLACE] if  ( !NodeUtil.isName ( lhs )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^return;^167^168^169^^^153^234^[ADD] if  ( !NodeUtil.isName ( lhs )  )  { return; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^168^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !scope.isDeclared ( name, true )  )  {^171^^^^^153^234^[REPLACE] if  ( !scope.isDeclared ( name, false )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^172^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( liveness.getEscapedLocals (  )  .getLastChild (  )   )  {^175^^^^^153^234^[REPLACE] if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^return;^175^176^177^^^153^234^[ADD] if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  { return; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^176^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( 1.getOut (  ) .isLive ( var )  )  {^178^^^^^153^234^[REPLACE] if  ( state.getOut (  ) .isLive ( var )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^179^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( state.getIn (  ) .isLive ( var )  || isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^153^234^[REPLACE] if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^181^182^^^^153^234^[ADD] if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^193^^^^^181^194^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !NodeUtil.isForIn ( n )  )  {^196^^^^^153^234^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  else {^199^^^^^153^234^[REPLACE] } else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( n.newNumber (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^204^^^^^153^234^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Preconditions.checkState ( true, "Unknown statement" ) ;^219^^^^^204^220^[REPLACE] Preconditions.checkState ( false, "Unknown statement" ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( n == null )  {^205^^^^^153^234^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;parent.removeChild ( n ) ;^205^206^207^208^209^153^234^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ; } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  &&^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if ( n.getType (  )  == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.removeChild ( n ) ;parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^207^208^209^210^211^153^234^[ADD] else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  else {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^215^^^^^209^216^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( next, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^[REPLACE] parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^215^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.removeChild ( next ) ;^208^^^^^153^234^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^209^210^211^212^^153^234^[ADD] else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ; } else {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent .getLastChild (  )  ;^211^^^^^209^216^[REPLACE] parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 2 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.removeChild ( 0 >>> 3 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  else {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  ( parent.getType (  )  == Token.FOR ) {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^205^^^^^153^234^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if ( n.getType (  )  == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.removeChild ( n ) ;^211^^^^^209^216^[REPLACE] parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^tryRemoveAssignment ( t, n, n, state ) ;^211^^^^^209^216^[REMOVE] ^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( parent.getType (  )  == Token.FOR ) {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^211^^^^^209^216^[ADD] parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 3 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^206^^^^^153^234^[ADD] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if ( n.getType (  )  == Token.COMMA ) {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  (  !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.newNumber ( n ) ;^208^^^^^153^234^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node op = new Node ( NodeUtil.isAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^153^234^[REPLACE] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  else {^204^^^^^153^234^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;parent.removeChild ( n ) ;^204^205^206^207^208^153^234^[ADD] else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ; } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if (  n != parent.newNumber (  )  )  {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != next )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if ( n.getType (  )  == Token.COMMA ) {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  (  !NodeUtil.isForIn ( parent )  || NodeUtil .containsFunctionDeclaration (  )   != n )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^208^^^^^153^234^[ADD] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 1 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^parent.removeChild ( n ) ;^206^^^^^153^234^[REMOVE] ^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^207^208^209^210^211^153^234^[ADD] else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node op = parentew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^153^234^[REPLACE] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^parent.replaceChild ( n, op ) ;^202^203^^^^153^234^[ADD] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ; parent.replaceChild ( n, op ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^n.removeChild ( parent ) ;^197^^^^^153^234^[REPLACE] n.removeChild ( rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^n.getParent (  ) .replaceChild ( n, parent ) ;^198^^^^^153^234^[REPLACE] n.getParent (  ) .replaceChild ( n, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^198^^^^^153^234^[ADD] n.getParent (  ) .replaceChild ( n, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^n.getNext (  ) .replaceChild ( n, rhs ) ;^198^^^^^153^234^[REPLACE] n.getParent (  ) .replaceChild ( n, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   n.removeChild ( lhs ) ;Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;parent.replaceChild ( n, op ) ;^199^200^201^202^203^153^234^[ADD] else if  ( NodeUtil.isAssignmentOp ( n )  )  { n.removeChild ( rhs ) ; n.removeChild ( lhs ) ; Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ; parent.replaceChild ( n, op ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( next.getType (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^204^^^^^153^234^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 + 4 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.newNumber ( next ) ;^208^^^^^153^234^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isAssign ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if (  n != parent.getLastChild (  )  )  {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  (  !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 % 2 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( n.getType (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^204^^^^^153^234^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if ( n.newNumber (  )  == Token.COMMA ) {^207^^^^^153^234^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent .replaceChild ( c , rhs )  ;^208^^^^^153^234^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 / 0 )  )  ) ;^206^^^^^153^234^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( rhs.getType (  )  == Token.FOR ) {^209^210^^^^153^234^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^Preconditions.checkNotNull ( externs ) ;^208^^^^^153^234^[REMOVE] ^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^163^^^^^153^234^[ADD] rhs = lhs.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^193^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^223^^^^^153^234^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node lhs = n.getLastChild (  ) ;^156^^^^^153^234^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^157^^^^^153^234^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Scope scope = t .getScopeRoot (  )  ;^166^^^^^153^234^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^String name = rhs.getString (  ) ;^170^^^^^153^234^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node n = cfgNode.getValue (  ) ;^174^^^^^153^234^[REPLACE] Var var = scope.getVar ( name ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( rhs ==parent )  {^161^^^^^149^235^[REPLACE] if  ( rhs != null )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^rhs =  null.getNext (  ) ;^163^^^^^149^235^[REPLACE] rhs = lhs.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !NodeUtil .isLhs ( parent )   )  {^167^^^^^149^235^[REPLACE] if  ( !NodeUtil.isName ( lhs )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^167^168^169^^^149^235^[ADD] if  ( !NodeUtil.isName ( lhs )  )  { return; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^168^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !scope.isDeclared ( name, true )  )  {^171^^^^^149^235^[REPLACE] if  ( !scope.isDeclared ( name, false )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^171^172^173^^^149^235^[ADD] if  ( !scope.isDeclared ( name, false )  )  { return; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^172^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( liveness.getEscapedLocals (  ) .isLive ( var )  )  {^175^^^^^149^235^[REPLACE] if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^176^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( state .getIn (  )  .isLive ( var )  )  {^178^^^^^149^235^[REPLACE] if  ( state.getOut (  ) .isLive ( var )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^178^179^180^^^149^235^[ADD] if  ( state.getOut (  ) .isLive ( var )  )  { return; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^179^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( state.getIn (  ) .isLive ( var )  || isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^149^235^[REPLACE] if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !NodeUtil.isForIn ( n )  )  {^196^^^^^149^235^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( NodeUtil.isAssignmentOp ( n )  )  {^199^^^^^149^235^[REPLACE] } else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   n.removeChild ( lhs ) ;Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;parent.replaceChild ( n, op ) ;^199^200^201^202^203^149^235^[ADD] else if  ( NodeUtil.isAssignmentOp ( n )  )  { n.removeChild ( rhs ) ; n.removeChild ( lhs ) ; Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ; parent.replaceChild ( n, op ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  (  n.getType (  )  == Token.DEC )  {^204^^^^^149^235^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^205^^^^^149^235^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  else {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.removeChild ( n ) ;parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^207^208^209^210^211^149^235^[ADD] else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  else {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^215^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent .replaceChild ( lhs , lhs )  ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^209^210^211^212^^149^235^[ADD] else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ; } else {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 4 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.removeChild ( 3 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^206^^^^^149^235^[ADD] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if (  n != parent.getLastChild (  )  )  {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  (  !NodeUtil.isForIn ( parent )  || NodeUtil.isExpressionNode ( parent )  != n )  {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.newNumber ( n ) ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( n == null )  {^205^^^^^149^235^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;parent.removeChild ( n ) ;^205^206^207^208^209^149^235^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ; } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  &&^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.removeChild ( next ) ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( parent.getType (  )  == Token.FOR ) {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( next, new Node ( Token.VOID, Node.newNumber ( 0 << 3 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 1 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if (  n != parent.getLastChild (  )  )  {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, parent ) ;^202^^^^^149^235^[REPLACE] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^202^^^^^149^235^[ADD] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 >> 3 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if ( n.getType (  )  == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if ( n.getType (  )  == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^}   parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^207^208^209^210^211^149^235^[ADD] else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 2 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REMOVE]^parent.removeChild ( n ) ;^206^^^^^149^235^[REMOVE] ^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0L )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^208^^^^^149^235^[ADD] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , rhs, rhs ) ;^202^^^^^149^235^[REPLACE] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^n.newNumber ( rhs ) ;^197^^^^^149^235^[REPLACE] n.removeChild ( rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^n.getParent (  ) .contains ( parent, rhs ) ;^198^^^^^149^235^[REPLACE] n.getParent (  ) .replaceChild ( n, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^n .getNext (  )  .replaceChild ( parent, rhs ) ;^198^^^^^149^235^[REPLACE] n.getParent (  ) .replaceChild ( n, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( n.getType (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^204^^^^^149^235^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if ( n.getType (  )  == Token.COMMA ) {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  (  !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != next )  {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.removeChild ( 0 + 4 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  ( parent.getType (  )  == Token.FOR ) {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent .replaceChild ( n , exprRoot )  ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^205^206^207^208^209^149^235^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ; } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  { parent.removeChild ( n ) ; } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  &&^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Preconditions.checkNotNull ( externs ) ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 * 2 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.removeChild ( 4 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if ( n.newNumber (  )  == Token.COMMA ) {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node op = new Node ( NodeUtil.isAssignmentOp ( n ) , lhs, parent ) ;^202^^^^^149^235^[REPLACE] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^202^203^^^^149^235^[ADD] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ; parent.replaceChild ( n, op ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  ( n.newNumber (  )  == Token.INC ) {^204^^^^^149^235^[REPLACE] } else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if  (  !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 + 2 )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.newNumber ( next ) ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^}  if ( n .getParent (  )   == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^149^235^[REPLACE] } else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^} else if  (  !NodeUtil.isForIn ( parent )  || NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^149^235^[REPLACE] } else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent .replaceChild ( next , c )  ;^208^^^^^149^235^[REPLACE] parent.removeChild ( n ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.VOID, Node.removeChild ( 0L )  )  ) ;^206^^^^^149^235^[REPLACE] parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( !  c    )  {^228^^^^^149^235^[REPLACE] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^228^229^230^^^149^235^[ADD] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^229^^^^^149^235^[REPLACE] tryRemoveAssignment ( t, c, exprRoot, state ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == null; )  {^226^^^^^149^235^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^if  ( ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^228^^^^^149^235^[REPLACE] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^c =  null;^231^^^^^149^235^[REPLACE] c = next;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node next = c.getParent (  ) ;^227^^^^^149^235^[REPLACE] Node next = c.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^227^^^^^149^235^[ADD] Node next = c.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^163^^^^^149^235^[ADD] rhs = lhs.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^c =  parent;^231^^^^^149^235^[REPLACE] c = next;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^231^^^^^149^235^[ADD] c = next;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^193^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^223^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^return false;^233^^^^^149^235^[REPLACE] return;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node lhs = parent.getFirstChild (  ) ;^156^^^^^149^235^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^156^^^^^149^235^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^157^^^^^149^235^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Scope scope = t.getScopeRoot (  ) ;^166^^^^^149^235^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^String name = rhs.getString (  ) ;^170^^^^^149^235^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[ADD]^^170^^^^^149^235^[ADD] String name = lhs.getString (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node n = cfgNode.getValue (  ) ;^174^^^^^149^235^[REPLACE] Var var = scope.getVar ( name ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node op = new Node ( NodeUtil .isAssignmentOp ( op )  , lhs, rhs ) ;^202^^^^^149^235^[REPLACE] Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^for  ( Node c = parent .getLastChild (  )  ; c != null; )  {^226^^^^^149^235^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^Node next = c .getParent (  )  ;^227^^^^^149^235^[REPLACE] Node next = c.getNext (  ) ;^[METHOD] tryRemoveAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node c  exprRoot  lhs  n  next  op  parent  rhs  [TYPE]  String name  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  [TYPE]  LiveVariablesAnalysis liveness 
[REPLACE]^while  ( n  ==  exprRoot )  {^254^^^^^252^271^[REPLACE] while  ( n != exprRoot )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^257^^^^^252^271^[REPLACE] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REMOVE]^if  ( isLhs ( n, n.getParent (  )  )  )  {     return KILL; }else {     return READ; }^257^^^^^252^271^[REMOVE] ^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( state  &&  VariableLiveness.READ )  {^261^^^^^252^271^[REPLACE] if  ( state == VariableLiveness.READ )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^}  else {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^return true;^264^^^^^252^271^[REPLACE] return false;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^return false;^262^^^^^252^271^[REPLACE] return true;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^} else if  ( READ  !=  VariableLiveness.KILL )  {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^VariableLiveness state = readVariableBeforeKilling ( n, variable ) ;^258^^^^^252^271^[REPLACE] VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( READ  ||  VariableLiveness.READ )  {^261^^^^^252^271^[REPLACE] if  ( state == VariableLiveness.READ )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REMOVE]^if  ( isLhs ( n, n.getParent (  )  )  )  {     return KILL; }else {     return READ; }^263^^^^^252^271^[REMOVE] ^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^} else if  ( state  ||  VariableLiveness.KILL )  {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[ADD]^}^263^264^265^^^252^271^[ADD] else if  ( state == VariableLiveness.KILL )  { return false; }^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^for ( Node sibling = n.getNext (  ) ; sibling == this;^255^^^^^252^271^[REPLACE] for ( Node sibling = n.getNext (  ) ; sibling != null;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( state  !=  VariableLiveness.READ )  {^261^^^^^252^271^[REPLACE] if  ( state == VariableLiveness.READ )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REMOVE]^if  ( isLhs ( n, n.getParent (  )  )  )  {     return KILL; }else {     return READ; }^261^^^^^252^271^[REMOVE] ^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^}  if  ( state  ||  VariableLiveness.KILL )  {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[ADD]^}   return false;^263^264^265^^^252^271^[ADD] else if  ( state == VariableLiveness.KILL )  { return false; }^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  (MAYBE_LIVE  !=  VariableLiveness.READ )  {^261^^^^^252^271^[REPLACE] if  ( state == VariableLiveness.READ )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^}  if  ( state  !=  VariableLiveness.KILL )  {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^258^^^^^252^271^[REPLACE] VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^sibling =  n.getNext (  )  )  {^256^^^^^252^271^[REPLACE] sibling = sibling.getNext (  )  )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^n =  sibling.getParesiblingt (  ) ;^268^^^^^252^271^[REPLACE] n = n.getParent (  ) ;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^for ( Node sibling = n.getParent (  ) ; sibling != null;^255^^^^^252^271^[REPLACE] for ( Node sibling = n.getNext (  ) ; sibling != null;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( state  ||  VariableLiveness.READ )  {^261^^^^^252^271^[REPLACE] if  ( state == VariableLiveness.READ )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^}  if  ( state  &&  VariableLiveness.KILL )  {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[ADD]^^258^259^^261^262^252^271^[ADD] VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;  if  ( state == VariableLiveness.READ )  { return true;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^for ( Node sibling = n.getNext (  ) ; sibling == null;^255^^^^^252^271^[REPLACE] for ( Node sibling = n.getNext (  ) ; sibling != null;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[ADD]^^255^256^257^258^^252^271^[ADD] for ( Node sibling = n.getNext (  ) ; sibling != null; sibling = sibling.getNext (  )  )  { if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  { VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[ADD]^return true;return false;^261^262^263^264^265^252^271^[ADD] if  ( state == VariableLiveness.READ )  { return true; } else if  ( state == VariableLiveness.KILL )  { return false; }^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( READ  !=  VariableLiveness.READ )  {^261^^^^^252^271^[REPLACE] if  ( state == VariableLiveness.READ )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^} else if  ( READ  ||  VariableLiveness.KILL )  {^263^^^^^252^271^[REPLACE] } else if  ( state == VariableLiveness.KILL )  {^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^for ( Node sibling = sibling.getNext (  ) ; sibling != null;^255^^^^^252^271^[REPLACE] for ( Node sibling = n.getNext (  ) ; sibling != null;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^return true;^270^^^^^252^271^[REPLACE] return false;^[METHOD] isVariableStillLiveWithinExpression [TYPE] boolean [PARAMETER] Node n Node exprRoot String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node exprRoot  n  sibling 
[REPLACE]^if  ( NodeUtil.isName ( n )  ) {^289^^^^^288^306^[REPLACE] if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^if  ( NodeUtil.isLhs ( n, n.getNext (  )  )  )  {^290^^^^^288^306^[REPLACE] if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^return VariableLiveness.KILL;^293^^^^^288^306^[REPLACE] return VariableLiveness.READ;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^return VariableLiveness.READ;^291^^^^^288^306^[REPLACE] return VariableLiveness.KILL;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[ADD]^return VariableLiveness.KILL;return VariableLiveness.READ;^290^291^292^293^294^288^306^[ADD] if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  { return VariableLiveness.KILL; } else { return VariableLiveness.READ; }^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^if  ( ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^298^^^^^288^306^[REPLACE] if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^if  ( state  ==  VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^[REPLACE] if  ( state != VariableLiveness.MAYBE_LIVE )  {^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^return READ;^301^^^^^288^306^[REPLACE] return state;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^299^^^^^288^306^[REPLACE] VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^if  ( READ  ==  VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^[REPLACE] if  ( state != VariableLiveness.MAYBE_LIVE )  {^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^296^^^^^288^306^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[ADD]^^296^297^298^299^^288^306^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  { VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REMOVE]^if  ( isLhs ( n, n.getParent (  )  )  )  {     return KILL; }else {     return READ; }^300^^^^^288^306^[REMOVE] ^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^return VariableLiveness.KILL;^301^^^^^288^306^[REPLACE] return state;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[ADD]^^299^300^301^302^^288^306^[ADD] VariableLiveness state = readVariableBeforeKilling ( child, variable ) ; if  ( state != VariableLiveness.MAYBE_LIVE )  { return state; }^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^child !=  null; null^297^^^^^288^306^[REPLACE] child != null; child = child.getNext (  )  )  {^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^for  ( Node child = n.getLastChild (  ) ;^296^^^^^288^306^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
[REPLACE]^return VariableLiveness.KILL;^305^^^^^288^306^[REPLACE] return VariableLiveness.MAYBE_LIVE;^[METHOD] readVariableBeforeKilling [TYPE] DeadAssignmentsElimination$VariableLiveness [PARAMETER] Node n String variable [CLASS] DeadAssignmentsElimination VariableLiveness   [TYPE]  AbstractCompiler compiler  [TYPE]  String variable  [TYPE]  boolean false  true  [TYPE]  VariableLiveness KILL  MAYBE_LIVE  READ  state  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  Node child  n 
