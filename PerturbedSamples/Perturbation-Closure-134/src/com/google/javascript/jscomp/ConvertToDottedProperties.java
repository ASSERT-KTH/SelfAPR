[REPLACE]^private  AbstractCompiler compiler;^33^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ConvertToDottedProperties  
[REPLACE]^this.compiler =  null;^36^^^^^35^37^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^switch  ( n.getType (  )  )  { case Token.GETELEM:^41^^^^^40^42^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^if  ( right.getType (  )  == Token.STRING ) {^50^51^^^^45^59^[REPLACE] if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[REPLACE]^n.removeChild ( right ) ;^52^^^^^45^59^[REPLACE] n.removeChild ( left ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[REPLACE]^n.removeChild ( parent ) ;^53^^^^^45^59^[REPLACE] n.removeChild ( right ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[ADD]^^53^^^^^45^59^[ADD] n.removeChild ( right ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[REPLACE]^parent.replaceChild ( n, new Node ( Token.GETPROP, left, parent )  ) ;^54^^^^^45^59^[REPLACE] parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[REPLACE]^Node left = n.getFirstChild (  ) ;^55^^^^^45^59^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[ADD]^^55^^^^^45^59^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[REPLACE]^Node left = parent .getString (  )  ;^48^^^^^45^59^[REPLACE] Node left = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
[REPLACE]^Node right = right.getNext (  ) ;^49^^^^^45^59^[REPLACE] Node right = left.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConvertToDottedProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node left  n  parent  right 
