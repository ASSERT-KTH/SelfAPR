[REPLACE]^static final DiagnosticType DATAFLOW_ERROR  = null ;^31^32^33^^^31^33^[REPLACE] static final DiagnosticType DATAFLOW_ERROR = DiagnosticType.warning ( "JSC_INTERNAL_ERROR_DATAFLOW", "non-monotonic data-flow analysis" ) ;^ [CLASS] TypeInferencePass TypeInferringCallback  
[REPLACE]^private  AbstractCompiler compiler;^35^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] TypeInferencePass TypeInferringCallback  
[REPLACE]^private  ReverseAbstractInterpreter reverseInterpreter;^36^^^^^^^[REPLACE] private final ReverseAbstractInterpreter reverseInterpreter;^ [CLASS] TypeInferencePass TypeInferringCallback  
[REPLACE]^this.compiler =  null;^43^^^^^40^47^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler ReverseAbstractInterpreter reverseInterpreter Scope topScope ScopeCreator scopeCreator [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ScopeCreator scopeCreator  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR 
[REPLACE]^this.reverseInterpreter =  null;^44^^^^^40^47^[REPLACE] this.reverseInterpreter = reverseInterpreter;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler ReverseAbstractInterpreter reverseInterpreter Scope topScope ScopeCreator scopeCreator [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ScopeCreator scopeCreator  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR 
[REPLACE]^this.topScope =  null;^45^^^^^40^47^[REPLACE] this.topScope = topScope;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler ReverseAbstractInterpreter reverseInterpreter Scope topScope ScopeCreator scopeCreator [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ScopeCreator scopeCreator  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR 
[ADD]^this.scopeCreator = scopeCreator;^45^46^^^^40^47^[ADD] this.topScope = topScope; this.scopeCreator = scopeCreator;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler ReverseAbstractInterpreter reverseInterpreter Scope topScope ScopeCreator scopeCreator [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ScopeCreator scopeCreator  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR 
[REPLACE]^this.scopeCreator =  null;^46^^^^^40^47^[REPLACE] this.scopeCreator = scopeCreator;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler ReverseAbstractInterpreter reverseInterpreter Scope topScope ScopeCreator scopeCreator [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  ScopeCreator scopeCreator  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR 
[REPLACE]^Node externsAndJs = externsRoot.getParent (  ) ;^56^^^^^55^62^[REPLACE] Node externsAndJs = jsRoot.getParent (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externsRoot Node jsRoot [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node externsAndJs  externsRoot  jsRoot  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Preconditions.checkState ( jsRoot == null ) ;^57^^^^^55^62^[REPLACE] Preconditions.checkState ( externsAndJs != null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externsRoot Node jsRoot [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node externsAndJs  externsRoot  jsRoot  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Preconditions.checkState ( externsRoot == null && externsAndJs.hasChild ( externsRoot )  ) ;^58^59^^^^55^62^[REPLACE] Preconditions.checkState ( externsRoot == null || externsAndJs.hasChild ( externsRoot )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externsRoot Node jsRoot [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node externsAndJs  externsRoot  jsRoot  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^externsRoot == null || externsAndJs.hasChild ( jsRoot )  ) ;^59^^^^^55^62^[REPLACE] externsRoot == null || externsAndJs.hasChild ( externsRoot )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externsRoot Node jsRoot [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node externsAndJs  externsRoot  jsRoot  [TYPE]  ScopeCreator scopeCreator 
[REMOVE]^Node externsAndJs = jsRoot.getParent (  ) ;^59^^^^^55^62^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externsRoot Node jsRoot [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node externsAndJs  externsRoot  jsRoot  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^inferTypes ( jsRoot ) ;^61^^^^^55^62^[REPLACE] inferTypes ( externsAndJs ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externsRoot Node jsRoot [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node externsAndJs  externsRoot  jsRoot  [TYPE]  ScopeCreator scopeCreator 
[ADD]^^66^67^^^^65^69^[ADD] NodeTraversal inferTypes = new NodeTraversal ( compiler, new TypeInferringCallback (  ) , scopeCreator ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] Node node [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal inferTypes  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^new TypeInference ( compiler, computeCfg ( n ) , reverseInterpreter, scope ) ;^68^^^^^65^69^[REPLACE] inferTypes.traverseWithScope ( node, topScope ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] Node node [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal inferTypes  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[ADD]^^68^^^^^65^69^[ADD] inferTypes.traverseWithScope ( node, topScope ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] Node node [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal inferTypes  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^TypeInference typeInference = new TypeInference ( compiler, computeCfg ( n ) , reverseInterpreter, topScope ) ;^72^73^^^^71^83^[REPLACE] TypeInference typeInference = new TypeInference ( compiler, computeCfg ( n ) , reverseInterpreter, scope ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[ADD]^typeInference.analyze (  ) ;compiler.getTypeRegistry (  ) .resolveTypesInScope ( scope ) ;^74^75^^^78^71^83^[ADD] try { typeInference.analyze (  ) ; compiler.getTypeRegistry (  ) .resolveTypesInScope ( scope ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Scope scope = t.getScope (  ) ;^75^^^^^71^83^[REPLACE] typeInference.analyze (  ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^compiler.getTypeRegistry (  ) .resolveTypesInScope ( topScope ) ;^78^^^^^71^83^[REPLACE] compiler.getTypeRegistry (  ) .resolveTypesInScope ( scope ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^compiler.report (  ) .resolveTypesInScope ( scope ) ;^78^^^^^71^83^[REPLACE] compiler.getTypeRegistry (  ) .resolveTypesInScope ( scope ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REMOVE]^Scope scope = t.getScope (  ) ;^78^^^^^71^83^[REMOVE] ^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[ADD]^^80^81^^^^71^83^[ADD] catch  ( DataFlowAnalysis.MaxIterationsExceededException e )  { compiler.report ( JSError.make ( t, n, DATAFLOW_ERROR )  ) ;^[METHOD] inferTypes [TYPE] void [PARAMETER] NodeTraversal t Node n Scope scope [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  TypeInference typeInference  [TYPE]  DataFlowAnalysis e  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Scope scope = t .traverseWithScope ( node , topScope )  ;^87^^^^^86^90^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Node node = t.getScope (  ) ;^88^^^^^86^90^[REPLACE] Node node = t.getCurrentNode (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[ADD]^^88^^^^^86^90^[ADD] Node node = t.getCurrentNode (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Scope scope = t.getScope (  ) ;^89^^^^^86^90^[REPLACE] inferTypes ( t, node, scope ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node node  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^return false;^95^^^^^94^96^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  parent  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^104^^^^^103^107^[REPLACE] ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[METHOD] computeCfg [TYPE] ControlFlowGraph [PARAMETER] Node n [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^cfa .TypeInferencePass ( compiler , reverseInterpreter , scope , scopeCreator )  ;^105^^^^^103^107^[REPLACE] cfa.process ( null, n ) ;^[METHOD] computeCfg [TYPE] ControlFlowGraph [PARAMETER] Node n [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^return true;^106^^^^^103^107^[REPLACE] return cfa.getCfg (  ) ;^[METHOD] computeCfg [TYPE] ControlFlowGraph [PARAMETER] Node n [CLASS] TypeInferencePass TypeInferringCallback   [TYPE]  ReverseAbstractInterpreter reverseInterpreter  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  Scope scope  topScope  [TYPE]  DiagnosticType DATAFLOW_ERROR  [TYPE]  Node n  [TYPE]  ScopeCreator scopeCreator 
[REPLACE]^Scope scope = t .getCurrentNode (  )  ;^87^^^^^86^90^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[ADD]^Node node = t.getCurrentNode (  ) ;^87^88^^^^86^90^[ADD] Scope scope = t.getScope (  ) ; Node node = t.getCurrentNode (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^Node node = t.getScope (  ) ;^88^^^^^86^90^[REPLACE] Node node = t.getCurrentNode (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^Scope scope = t.getScope (  ) ;^89^^^^^86^90^[REPLACE] inferTypes ( t, node, scope ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] TypeInferringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^return false;^95^^^^^94^96^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypeInferringCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
