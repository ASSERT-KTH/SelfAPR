[REPLACE]^static final DiagnosticType UNDECLARED_REFERENCE  = null ;^44^45^46^^^44^46^[REPLACE] static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "JSC_REFERENCE_BEFORE_DECLARE", "Variable referenced before declaration: {0}" ) ;^ [CLASS] VariableReferenceCheck ReferenceCheckingBehavior  
[REPLACE]^static final DiagnosticType REDECLARED_VARIABLE ;^48^49^50^^^48^50^[REPLACE] static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED_VARIABLE", "Redeclared variable: {0}" ) ;^ [CLASS] VariableReferenceCheck ReferenceCheckingBehavior  
[REPLACE]^static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS ;^52^^^^^^^[REPLACE] static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = false;^ [CLASS] VariableReferenceCheck ReferenceCheckingBehavior  
[REPLACE]^static final DiagnosticType AMBIGUOUS_FUNCTION_DECL ;^54^55^56^^^54^56^[REPLACE] static final DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECL", "Ambiguious use of a named function: {0}." ) ;^ [CLASS] VariableReferenceCheck ReferenceCheckingBehavior  
[REPLACE]^private Set<BasicBlock> blocksWithDeclarations ;^63^^^^^^^[REPLACE] private Set<BasicBlock> blocksWithDeclarations = Sets.newHashSet (  ) ;^ [CLASS] VariableReferenceCheck ReferenceCheckingBehavior  
[REPLACE]^this.compiler =  null;^67^^^^^65^69^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel 
[REPLACE]^this.checkLevel =  null;^68^^^^^65^69^[REPLACE] this.checkLevel = checkLevel;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel 
[REPLACE]^callback .process ( externs , externs )  ;^75^^^^^72^76^[REPLACE] callback.process ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  ReferenceCollectingCallback callback  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Node externs  root 
[REPLACE]^Var v = null.next (  ) ;^90^^^^^85^93^[REPLACE] Var v = it.next (  ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  )  .getParent (  )  ; it.hasNext (  ) ; )  {^89^^^^^85^93^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[REPLACE]^Var v = it .hasNext (  )  ;^90^^^^^85^93^[REPLACE] Var v = it.next (  ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[REPLACE]^blocksWithDeclarations.add ( basicBlock ) ;^102^^^^^101^183^[REPLACE] blocksWithDeclarations.clear (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isDeclaredInScope = true;^103^^^^^101^183^[REPLACE] boolean isDeclaredInScope = false;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isUnhoistedNamedFunction = true;^104^^^^^101^183^[REPLACE] boolean isUnhoistedNamedFunction = false;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^Reference hoistedFn = false;^105^^^^^101^183^[REPLACE] Reference hoistedFn = null;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^105^^^^^101^183^[ADD] Reference hoistedFn = null;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( hoistedFn.isHoistedFunction (  )  )  {^109^^^^^101^183^[REPLACE] if  ( reference.isHoistedFunction (  )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^109^110^111^112^113^101^183^[ADD] if  ( reference.isHoistedFunction (  )  )  { blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ; isDeclaredInScope = true; hoistedFn = reference; break;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^}  else {^114^115^^^^101^183^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isUnhoistedNamedFunction = false;^116^^^^^114^117^[REPLACE] isUnhoistedNamedFunction = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isUnhoistedNamedFunction = false;^116^^^^^101^183^[REPLACE] isUnhoistedNamedFunction = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isDeclaredInScope = false;^111^^^^^101^183^[REPLACE] isDeclaredInScope = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^111^112^^^^101^183^[ADD] isDeclaredInScope = true; hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^hoistedFn =  null;^112^^^^^101^183^[REPLACE] hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^101^183^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^}   isUnhoistedNamedFunction = true;^114^115^116^117^^101^183^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true; }^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^hoistedFn = reference;^111^112^^^^101^183^[ADD] isDeclaredInScope = true; hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isDeclaration = reference.isDeclaration (  ) ;^108^^^^^101^183^[REPLACE] for  ( Reference reference : references )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^108^109^110^111^112^101^183^[ADD] for  ( Reference reference : references )  { if  ( reference.isHoistedFunction (  )  )  { blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ; isDeclaredInScope = true; hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference  &&  hoistedFn )  {^121^^^^^101^183^[REPLACE] if  ( reference == hoistedFn )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( isUnhoistedNamedFunction )  {^128^^^^^101^183^[REPLACE] if  ( isDeclaration )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^132^^^^^101^183^[REPLACE] if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^132^133^134^135^136^101^183^[ADD] if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  { compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^133^134^135^136^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference .getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^135^136^137^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^135^136^137^^^101^183^[ADD] reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^for  ( BasicBlock declaredBlock : blocksWithDeclarations )  { if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^131^^^^^101^183^[REPLACE] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^131^132^133^134^135^101^183^[ADD] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  { if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  { compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( reference.getNameNode (  ) , reference.getNameNode (  ) , checkLevel,^133^134^135^136^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference.getNameNode (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS ) {^143^144^^^^101^183^[REPLACE] if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^143^157^[REPLACE] if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^148^149^150^151^152^143^157^[ADD] if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  { compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^149^150^151^152^^143^157^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getScope (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^143^157^[REPLACE] reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^for  ( BasicBlock declaredBlock : blocksWithDeclarations )  { if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^147^^^^^143^157^[REPLACE] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^101^183^[REPLACE] if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^148^149^150^151^152^101^183^[ADD] if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  { compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^149^150^151^152^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^149^150^151^^^101^183^[ADD] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference.getSourceName (  ) , reference.getScope (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getNameNode (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getScope (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( isDeclaration && !isDeclaredInScope )  {^159^^^^^101^183^[REPLACE] if  ( !isDeclaration && !isDeclaredInScope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( grandparent.getType (  )  == Token.NAME || grandparent.getString (  )  == v.name )  {^162^163^^^^101^183^[REPLACE] if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference.getScope (  )   ||  v.scope )  {^169^^^^^101^183^[REPLACE] if  ( reference.getScope (  )  == v.scope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getScope (  ) , checkLevel,^170^171^172^173^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference.getNameNode (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^171^172^173^^^101^183^[ADD] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getNameNode (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference .getSourceName (  )  , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^172^173^174^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^Node grandparent = hoistedFn.getGrandparent (  ) ;^161^^^^^101^183^[REPLACE] Node grandparent = reference.getGrandparent (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( hoistedFn.getScope (  )   ||  v.scope )  {^169^^^^^101^183^[REPLACE] if  ( reference.getScope (  )  == v.scope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^169^170^171^172^173^101^183^[ADD] if  ( reference.getScope (  )  == v.scope )  { compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^170^171^172^173^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^172^173^174^^^101^183^[ADD] reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( true )  {^178^^^^^101^183^[REPLACE] if  ( isDeclaration )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isDeclaredInScope = false;^180^^^^^101^183^[REPLACE] isDeclaredInScope = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isDeclaration = reference.isDeclaration (  ) ;^120^^^^^101^183^[REPLACE] for  ( Reference reference : references )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^120^121^122^123^^101^183^[ADD] for  ( Reference reference : references )  { if  ( reference == hoistedFn )  { continue; }^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^BasicBlock basicBlock = reference .getScope (  )  ;^125^^^^^101^183^[REPLACE] BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean.isHoistedFunction = hoistedFn.isDeclaration (  ) ;^126^^^^^101^183^[REPLACE] boolean isDeclaration = reference.isDeclaration (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^for  ( BasicBlock declaredBlock : blocksWithDeclarations )  { if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^147^^^^^101^183^[REPLACE] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS  false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  Set blocksWithDeclarations  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  [TYPE]  CheckLevel checkLevel  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^Var v = null.hasNext (  ) ;^90^^^^^85^93^[REPLACE] Var v = it.next (  ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  { Var v = it.next (  ) ;^89^^^^^85^93^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[REPLACE]^Var v = null.next (  ) ;^90^^^^^85^93^[REPLACE] Var v = it.next (  ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[ADD]^^90^^^^^85^93^[ADD] Var v = it.next (  ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Iterator it  [TYPE]  Map referenceMap 
[REPLACE]^blocksWithDeclarations.add (  ) ;^102^^^^^101^183^[REPLACE] blocksWithDeclarations.clear (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^102^^^^^101^183^[ADD] blocksWithDeclarations.clear (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isDeclaredInScope = true;^103^^^^^101^183^[REPLACE] boolean isDeclaredInScope = false;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isUnhoistedNamedFunction = true;^104^^^^^101^183^[REPLACE] boolean isUnhoistedNamedFunction = false;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^Reference hoistedFn = true;^105^^^^^101^183^[REPLACE] Reference hoistedFn = null;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^105^^^^^101^183^[ADD] Reference hoistedFn = null;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( hoistedFn.isHoistedFunction (  )  )  {^109^^^^^101^183^[REPLACE] if  ( reference.isHoistedFunction (  )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;isDeclaredInScope = true;hoistedFn = reference;break;^109^110^111^112^113^101^183^[ADD] if  ( reference.isHoistedFunction (  )  )  { blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ; isDeclaredInScope = true; hoistedFn = reference; break;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^101^183^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REMOVE]^if  ( reference.isHoistedFunction (  )  )  {     blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;     isDeclaredInScope = true;     hoistedFn = reference;     break; }else     if  ( isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {         isUnhoistedNamedFunction = true;     }^114^^^^^101^183^[REMOVE] ^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isUnhoistedNamedFunction = false;^116^^^^^114^117^[REPLACE] isUnhoistedNamedFunction = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isUnhoistedNamedFunction = false;^116^^^^^101^183^[REPLACE] isUnhoistedNamedFunction = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^116^^^^^101^183^[ADD] isUnhoistedNamedFunction = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isDeclaredInScope = false;^111^^^^^101^183^[REPLACE] isDeclaredInScope = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^111^112^^^^101^183^[ADD] isDeclaredInScope = true; hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^hoistedFn =  null;^112^^^^^101^183^[REPLACE] hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^112^^^^^101^183^[ADD] hoistedFn = reference;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getScope (  ) .getParent (  )  )  )  {^114^115^^^^101^183^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^111^^^^^101^183^[ADD] isDeclaredInScope = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^break;^112^113^^^^101^183^[ADD] hoistedFn = reference; break;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isDeclaration = reference.isDeclaration (  ) ;^108^^^^^101^183^[REPLACE] for  ( Reference reference : references )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference  !=  hoistedFn )  {^121^^^^^101^183^[REPLACE] if  ( reference == hoistedFn )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^continue;^121^122^123^^^101^183^[ADD] if  ( reference == hoistedFn )  { continue; }^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference.getScope (  )  == v.scope )  {^128^^^^^101^183^[REPLACE] if  ( isDeclaration )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^132^^^^^101^183^[REPLACE] if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^133^134^135^136^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^133^134^135^^^101^183^[ADD] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference .getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^135^136^137^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^135^136^137^^^101^183^[ADD] reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^131^^^^^101^183^[REPLACE] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^134^135^136^^^101^183^[ADD] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getScope (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^135^136^137^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS ) {^143^144^^^^101^183^[REPLACE] if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^143^144^^^^101^183^[ADD] if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^143^157^[REPLACE] if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report (   reference.getSourceName (  )  , checkLevel,^149^150^151^152^^143^157^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getNameNode (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^150^151^152^^^143^157^[ADD] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getScope (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^143^157^[REPLACE] reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^147^^^^^143^157^[REPLACE] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^101^183^[REPLACE] if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^149^150^151^152^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^150^151^152^^^101^183^[ADD] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getScope (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( true )  {^159^^^^^101^183^[REPLACE] if  ( !isDeclaration && !isDeclaredInScope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( grandparent.getType (  )  == Token.NAME || grandparent.getString (  )  == v.name )  {^162^163^^^^101^183^[REPLACE] if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference.getScope (  )   !=  v.scope )  {^169^^^^^101^183^[REPLACE] if  ( reference.getScope (  )  == v.scope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report ( JSError.make ( hoistedFn.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^170^171^172^173^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^170^171^172^^^101^183^[ADD] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^171^172^173^^^101^183^[ADD] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference.getScope (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^172^173^174^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^172^173^174^^^101^183^[ADD] reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^Node grandparent = hoistedFn.getGrandparent (  ) ;^161^^^^^101^183^[REPLACE] Node grandparent = reference.getGrandparent (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( grandparent.getType (  )  == Token.NAME ) {^162^163^^^^101^183^[REPLACE] if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference.getScope (  )   ||  v.scope )  {^169^^^^^101^183^[REPLACE] if  ( reference.getScope (  )  == v.scope )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REMOVE]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^169^^^^^101^183^[REMOVE] ^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^compiler.report (   reference.getSourceName (  )  , checkLevel,^170^171^172^173^^101^183^[REPLACE] compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference.getNameNode (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^101^183^[REPLACE] JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^reference .getSourceName (  )  , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^172^173^174^^^101^183^[REPLACE] reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^if  ( reference.getScope (  )  == v.scope )  {^178^^^^^101^183^[REPLACE] if  ( isDeclaration )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^isDeclaredInScope = false;^180^^^^^101^183^[REPLACE] isDeclaredInScope = true;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean isDeclaration = reference.isDeclaration (  ) ;^120^^^^^101^183^[REPLACE] for  ( Reference reference : references )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^BasicBlock basicBlock = hoistedFn.getBasicBlock (  ) ;^125^^^^^101^183^[REPLACE] BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^boolean.isHoistedFunction = hoistedFn.isDeclaration (  ) ;^126^^^^^101^183^[REPLACE] boolean isDeclaration = reference.isDeclaration (  ) ;^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[ADD]^^131^132^133^134^135^101^183^[ADD] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  { if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  { compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
[REPLACE]^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^147^^^^^101^183^[REPLACE] for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {^[METHOD] checkVar [TYPE] void [PARAMETER] NodeTraversal t Var v Reference> references [CLASS] ReferenceCheckingBehavior   [TYPE]  boolean false  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference hoistedFn  reference  [TYPE]  Node grandparent  [TYPE]  BasicBlock basicBlock  declaredBlock  [TYPE]  List references 
