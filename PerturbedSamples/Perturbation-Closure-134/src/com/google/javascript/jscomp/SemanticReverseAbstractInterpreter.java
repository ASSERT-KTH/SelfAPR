[REPLACE]^private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ ;^47^48^^^^47^55^[REPLACE] private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^private  final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^60^61^^^^60^68^[REPLACE] private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ  = null ;^74^75^^^^74^82^[REPLACE] Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE ;^88^89^^^^88^96^[REPLACE] Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ ;^102^103^^^^102^109^[REPLACE] Function<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^private  ObjectType target;^451^^^^^^^[REPLACE] private final ObjectType target;^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^private  ObjectType target;^507^^^^^^^[REPLACE] private final ObjectType target;^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Node left = condition.getFirstChild (  ) ;^116^^^^^114^117^[REPLACE] super ( convention, typeRegistry ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  CodingConvention convention 
[REMOVE]^JSType restrictedLeftType = leftType.visit ( visitor ) ;^116^^^^^114^117^[REMOVE] ^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  CodingConvention convention 
[REPLACE]^this.target =  null;^454^^^^^453^455^[REPLACE] this.target = target;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] ObjectType target [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true 
[REPLACE]^this.target =  null;^510^^^^^509^511^[REPLACE] this.target = target;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] ObjectType target [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true 
[ADD]^^510^^^^^509^511^[ADD] this.target = target;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] ObjectType target [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true 
[REPLACE]^if  (  p.second == this )  {^50^^^^^49^54^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[ADD]^return null;^50^51^52^^^49^54^[ADD] if  ( p.first == null || p.second == null )  { return null; }^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return false;^51^^^^^49^54^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return this;^51^^^^^49^54^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true.first .getTypesUnderInequality (  )  ;^53^^^^^49^54^[REPLACE] return p.first.getTypesUnderEquality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( p.first != false ) {^63^^^^^62^67^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^64^^^^^62^67^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   1.second   ;^66^^^^^62^67^[REPLACE] return p.first.getTypesUnderInequality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( null.first != true || p.second == true )  {^77^^^^^76^81^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[ADD]^^77^78^79^^^76^81^[ADD] if  ( p.first == null || p.second == null )  { return null; }^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return this;^78^^^^^76^81^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^78^^^^^76^81^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   p.second   ;^80^^^^^76^81^[REPLACE] return p.first.getTypesUnderShallowEquality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  (  p.second == null )  {^91^^^^^90^95^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^92^^^^^90^95^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   null.second   ;^94^^^^^90^95^[REPLACE] return p.first.getTypesUnderShallowInequality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return new Pair<JSType, JSType> ( getRestrictedWithoutUndefined ( null.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^105^106^107^^^104^108^[REPLACE] return new Pair<JSType, JSType> ( getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( left.getType (  )  == Token.TYPEOF ) {^131^^^^^120^238^[REPLACE] if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^} else if  ( right.getType (  )  == Token.TYPEOF || left.getType (  )  == Token.STRING )  {^134^135^^^^120^238^[REPLACE] } else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^}   typeOfNode = right;stringNode = left;^134^135^136^137^138^120^238^[ADD] else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  { typeOfNode = right; stringNode = left; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^typeOfNode = left; ;^136^^^^^134^138^[REPLACE] typeOfNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^stringNode = right; ;^137^^^^^134^138^[REPLACE] stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^typeOfNode = left; ;^136^^^^^120^238^[REPLACE] typeOfNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^136^137^^^^120^238^[ADD] typeOfNode = right; stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^stringNode = right; ;^137^^^^^120^238^[REPLACE] stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^137^^^^^120^238^[ADD] stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^typeOfNode = right; ;^132^^^^^120^238^[REPLACE] typeOfNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^stringNode = left; ;^133^^^^^120^238^[REPLACE] stringNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^}  if  (  left.getType (  )  == Token.STRING )  {^134^135^^^^120^238^[REPLACE] } else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^136^137^^^^134^138^[ADD] typeOfNode = right; stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^137^^^^^134^138^[ADD] stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( typeOfNode == false ) {^139^^^^^120^238^[REPLACE] if  ( typeOfNode != null && stringNode != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^Node operandNode = typeOfNode.getFirstChild (  ) ;JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^139^140^141^142^143^120^238^[ADD] if  ( typeOfNode != null && stringNode != null )  { Node operandNode = typeOfNode.getFirstChild (  ) ; JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ; if  ( operandType != null )  { boolean resultEqualsValue = condition.getType (  )  == Token.EQ ||^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( operandType == this )  {^142^^^^^120^238^[REPLACE] if  ( operandType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !true )  {^145^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^resultEqualsValue =  !true;^146^^^^^120^238^[REPLACE] resultEqualsValue = !resultEqualsValue;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^146^^^^^120^238^[ADD] resultEqualsValue = !resultEqualsValue;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseTypeOf ( operandNode, operandType, stringNode .getLastChild (  )  , resultEqualsValue, blindScope ) ;^148^149^^^^120^238^[REPLACE] return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^boolean resultEqualsValue = condition.getType (  )  == Token.EQ ;^143^144^^^^120^238^[REPLACE] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( outcome )  {^145^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node operandNode = stringNode.getFirstChild (  ) ;^140^^^^^120^238^[REPLACE] Node operandNode = typeOfNode.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^JSType operandType = getTypeIfRefinable ( typeOfNode, blindScope ) ;^141^^^^^120^238^[REPLACE] JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^141^^^^^120^238^[ADD] JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^boolean resultEqualsValue = condition .getJSType (  )   == Token.EQ  !=  condition^143^144^^^^120^238^[REPLACE] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( operandType == null )  {^142^^^^^120^238^[REPLACE] if  ( operandType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , true, blindScope ) ;^148^149^^^^120^238^[REPLACE] return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^boolean resultEqualsValue = condition .getJSType (  )   == Token.EQ ;^143^144^^^^120^238^[REPLACE] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^145^146^147^^^120^238^[ADD] if  ( !outcome )  { resultEqualsValue = !resultEqualsValue; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^resultEqualsValue =  !null;^146^^^^^120^238^[REPLACE] resultEqualsValue = !resultEqualsValue;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseTypeOf ( typeOfNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^120^238^[REPLACE] return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = typeOfNode.getLastChild (  ) ;^127^^^^^120^238^[REPLACE] Node left = condition.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = typeOfNode.getLastChild (  ) ;^128^^^^^120^238^[REPLACE] Node right = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^128^^^^^120^238^[ADD] Node right = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node typeOfNode = false;^129^^^^^120^238^[REPLACE] Node typeOfNode = null;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node stringNode = true;^130^^^^^120^238^[REPLACE] Node stringNode = null;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^JSType restrictedLeftType = leftType.visit ( visitor ) ;^141^^^^^120^238^[REPLACE] JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^boolean resultEqualsValue = condition.getType (  )  == Token.EQ  ^  condition.getType (  )  == Token.SHEQ;^143^144^^^^120^238^[REPLACE] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^143^144^^^^120^238^[ADD] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !outcome )  {^155^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^155^161^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getLastChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^120^238^[REPLACE] return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !true )  {^164^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^164^170^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getLastChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^165^166^^^^120^238^[REPLACE] return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !outcome )  {^173^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^return caseEquality ( condition, blindScope, EQ ) ;return caseEquality ( condition, blindScope, NE ) ;^173^174^175^176^177^120^238^[ADD] if  ( outcome )  { return caseEquality ( condition, blindScope, EQ ) ; } else { return caseEquality ( condition, blindScope, NE ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, NE ) ;^176^^^^^173^177^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, NE ) ;^174^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !outcome )  {^180^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^183^^^^^180^184^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^181^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !outcome )  {^187^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^190^^^^^187^191^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^188^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !outcome )  {^194^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHEQ ) ;^197^^^^^194^198^[REPLACE] return caseEquality ( condition, blindScope, SHEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^195^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !outcome )  {^219^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^220^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, INEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  (true ) {^230^^^^^120^238^[REPLACE] if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseIn ( condition.getFirstChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^120^238^[REPLACE] return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^156^157^^^^120^238^[REPLACE] return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^120^238^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getFirstChild (  ) , blindScope, false ) ;^165^166^^^^120^238^[REPLACE] return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^120^238^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^174^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, NE ) ;^176^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, NE ) ;^181^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, NE ) ;^183^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^190^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^195^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHEQ ) ;^197^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) ,^202^^^^^120^238^[REPLACE] return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( condition.getLastChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^205^206^207^208^^120^238^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) , blindScope, !outcome ) ;^212^213^^^^120^238^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseInstanceOf ( condition.getLastChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^120^238^[REPLACE] return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return nextPreciserScopeKnowingConditionOutcome ( typeOfNode, blindScope, outcome ) ;^236^237^^^^120^238^[REPLACE] return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = right.getLastChild (  ) ;^242^^^^^241^282^[REPLACE] Node left = condition.getFirstChild (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^Node right = right.getLastChild (  ) ;^243^^^^^241^282^[REPLACE] Node right = condition.getLastChild (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^246^^^^^241^282^[REPLACE] JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^boolean rightIsRefineable;^247^^^^^241^282^[REPLACE] boolean leftIsRefineable;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^247^^^^^241^282^[ADD] boolean leftIsRefineable;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( leftType == null )  {^248^^^^^241^282^[REPLACE] if  ( leftType != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = true;^251^^^^^248^253^[REPLACE] leftIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightType = right.getJSType (  ) ; ;^252^^^^^248^253^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = false;^249^^^^^241^282^[REPLACE] leftIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^249^^^^^241^282^[ADD] leftIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = true;^251^^^^^241^282^[REPLACE] leftIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightType = right.getJSType (  ) ; ;^252^^^^^241^282^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^JSType leftType = getTypeIfRefinable ( right, blindScope ) ;^256^^^^^241^282^[REPLACE] JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^boolean leftIsRefineable;^257^^^^^241^282^[REPLACE] boolean rightIsRefineable;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( leftType == null )  {^258^^^^^241^282^[REPLACE] if  ( rightType != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightIsRefineable = true;^261^^^^^258^263^[REPLACE] rightIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftType = left.getJSType (  ) ; ;^262^^^^^258^263^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightIsRefineable = false;^259^^^^^241^282^[REPLACE] rightIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = true; ;^259^^^^^241^282^[REPLACE] rightIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^259^^^^^241^282^[ADD] rightIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightIsRefineable = true;^261^^^^^241^282^[REPLACE] rightIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^261^^^^^241^282^[ADD] rightIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftType = left.getJSType (  ) ; ;^262^^^^^241^282^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^Pair<JSType, JSType> merged = true.apply ( Pair.of ( leftType, rightType )  ) ;^266^^^^^241^282^[REPLACE] Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( merged == null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^241^282^[REPLACE] if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( leftIsRefineable && merged.first == null )  {^273^^^^^269^280^[REPLACE] if  ( leftIsRefineable && merged.first != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^declareNameInScope ( informed, right, merged.first ) ;^274^^^^^269^280^[REPLACE] declareNameInScope ( informed, left, merged.first ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^274^275^^^^269^280^[ADD] declareNameInScope ( informed, left, merged.first ) ; }^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( rightIsRefineable && merged.second == true )  {^276^^^^^269^280^[REPLACE] if  ( rightIsRefineable && merged.second != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^declareNameInScope ( informed, right, merged.second ) ;^276^277^278^^^269^280^[ADD] if  ( rightIsRefineable && merged.second != null )  { declareNameInScope ( informed, right, merged.second ) ; }^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^277^^^^^269^280^[REPLACE] declareNameInScope ( informed, right, merged.second ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REMOVE]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^277^^^^^269^280^[REMOVE] ^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^return blindScope;^279^^^^^269^280^[REPLACE] return informed;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^269^280^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^272^273^274^275^^269^280^[ADD] FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  (  merged.first == true )  {^273^^^^^241^282^[REPLACE] if  ( leftIsRefineable && merged.first != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^declareNameInScope ( informed, left, merged.first ) ;^273^274^275^^^241^282^[ADD] if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^declareNameInScope ( informed, left, false.first ) ;^274^^^^^241^282^[REPLACE] declareNameInScope ( informed, left, merged.first ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( rightIsRefineable ) {^276^^^^^241^282^[REPLACE] if  ( rightIsRefineable && merged.second != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^declareNameInScope ( informed, right, false.second ) ;^277^^^^^241^282^[REPLACE] declareNameInScope ( informed, right, merged.second ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^return blindScope;^279^^^^^241^282^[REPLACE] return informed;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^241^282^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^281^^^^^241^282^[REPLACE] return blindScope;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^285^336^[REPLACE] JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^boolean rightIsRefineable;^288^^^^^285^336^[REPLACE] boolean leftIsRefineable;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^288^^^^^285^336^[ADD] boolean leftIsRefineable;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( leftType == null )  {^289^^^^^285^336^[REPLACE] if  ( leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = true; ;^292^^^^^289^296^[REPLACE] leftIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType = right.getJSType (  ) ; ;^293^^^^^289^296^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^293^^^^^289^296^[ADD] leftType = left.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( null, blindScope, condition ) ;^294^295^^^^289^296^[REPLACE] blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightIsRefineable = true; ;^290^^^^^285^336^[REPLACE] leftIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^290^^^^^285^336^[ADD] leftIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = false;^290^^^^^285^336^[REPLACE] leftIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = true;^292^^^^^285^336^[REPLACE] leftIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType = right.getJSType (  ) ; ;^293^^^^^285^336^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^294^295^^^^285^336^[REPLACE] blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftType  =  null ;^299^300^^^^285^336^[REPLACE] leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (rightType != null )  {^301^^^^^285^336^[REPLACE] if  ( leftType == null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^301^302^303^304^^285^336^[ADD] if  ( leftType == null )  { return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, true ) ;^302^303^^^^285^336^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^307^^^^^285^336^[REPLACE] JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^307^308^^^^285^336^[ADD] JSType rightType = getTypeIfRefinable ( right, blindScope ) ; boolean rightIsRefineable;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^boolean leftIsRefineable;^308^^^^^285^336^[REPLACE] boolean rightIsRefineable;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( rightType == null )  {^309^^^^^285^336^[REPLACE] if  ( rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightIsRefineable = true;^312^^^^^309^316^[REPLACE] rightIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftType = left.getJSType (  ) ; ;^313^^^^^309^316^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^309^316^[REPLACE] blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^314^315^^^^309^316^[ADD] blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightIsRefineable = false;^310^^^^^285^336^[REPLACE] rightIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightIsRefineable = true;^312^^^^^285^336^[REPLACE] rightIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^312^^^^^285^336^[ADD] rightIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftType = left.getJSType (  ) ; ;^313^^^^^285^336^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^285^336^[REPLACE] blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^314^315^^^^285^336^[ADD] blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( leftIsRefineable && leftType != null )  {^318^^^^^285^336^[REPLACE] if  ( condition )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^318^319^320^^^285^336^[ADD] if  ( condition )  { rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  ( leftType == null && leftIsRefineable )  || ( leftType != null && rightIsRefineable )  )  {^323^324^^^^285^336^[REPLACE] if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( leftIsRefineable && leftType == null )  {^326^^^^^323^333^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, right, leftType ) ;^327^^^^^323^333^[REPLACE] declareNameInScope ( informed, left, leftType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^323^333^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( blindScope, right, rightType ) ;^330^^^^^323^333^[REPLACE] declareNameInScope ( informed, right, rightType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^332^^^^^323^333^[REPLACE] return informed;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^323^333^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^325^326^327^328^^323^333^[ADD] FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  leftType == this )  {^326^^^^^285^336^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, left, rightType ) ;^327^^^^^285^336^[REPLACE] declareNameInScope ( informed, left, leftType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  rightType == true )  {^329^^^^^285^336^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, right, leftType ) ;^330^^^^^285^336^[REPLACE] declareNameInScope ( informed, right, rightType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^330^331^^^^285^336^[ADD] declareNameInScope ( informed, right, rightType ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType  =  null ;^319^320^^^^285^336^[REPLACE] rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^332^^^^^285^336^[REPLACE] return informed;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^285^336^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  ( leftType == null && leftIsRefineable )  ) {^323^324^^^^285^336^[REPLACE] if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( leftIsRefineable ) {^326^^^^^323^333^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^326^327^328^^^323^333^[ADD] if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( true ) {^329^^^^^323^333^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, left, rightType ) ;^330^^^^^323^333^[REPLACE] declareNameInScope ( informed, right, rightType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return caseObjectType ( type ) ;^332^^^^^323^333^[REPLACE] return informed;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( leftIsRefineable && leftType == true )  {^326^^^^^285^336^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^declareNameInScope ( informed, left, leftType ) ;^326^327^328^^^285^336^[ADD] if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, right, leftType ) ;^327^^^^^285^336^[REPLACE] declareNameInScope ( informed, left, leftType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( rightIsRefineable && rightType == false )  {^329^^^^^285^336^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType =  ( rightType != true )  ? true : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^285^336^[REPLACE] rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^335^^^^^285^336^[REPLACE] return blindScope;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^340^341^^^^338^358^[REPLACE] FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( rightScope ) ;^342^^^^^338^358^[REPLACE] StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^^342^^^^^338^358^[ADD] StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^if  ( leftVar != null )  {^343^^^^^338^358^[REPLACE] if  ( leftVar == null )  {^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^return rightScope;^344^^^^^338^358^[REPLACE] return blindScope;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, condition ) ;^346^347^^^^338^358^[REPLACE] FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^^346^347^^^^338^358^[ADD] FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^rightScope =  firstPreciserScopeKnowingConditionOutcome ( left, leftScope, !condition ) ;^348^349^^^^338^358^[REPLACE] rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^^348^349^^^^338^358^[ADD] rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( leftScope ) ;^350^^^^^338^358^[REPLACE] StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^^350^^^^^338^358^[ADD] StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^if  ( rightVar != null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^[REPLACE] if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^return blindScope;^351^352^353^^^338^358^[ADD] if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  { return blindScope; }^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^return rightScope;^352^^^^^338^358^[REPLACE] return blindScope;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^JSType type = null.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^354^^^^^338^358^[REPLACE] JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^FlowScope informed = rightScope.createChildFlowScope (  ) ;^355^^^^^338^358^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^informed.inferSlotType ( leftVar.getType (  ) , type ) ;^356^^^^^338^358^[REPLACE] informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^informed.inferSlotType ( null.getType (  ) , type ) ;^356^^^^^338^358^[REPLACE] informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^return rightScope;^357^^^^^338^358^[REPLACE] return informed;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^JSType type = getTypeIfRefinable ( name, informed ) ;^362^^^^^360^371^[REPLACE] JSType type = getTypeIfRefinable ( name, blindScope ) ;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( type == null )  {^363^^^^^360^371^[REPLACE] if  ( type != null )  {^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[ADD]^^363^364^365^366^367^360^371^[ADD] if  ( type != null )  { JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ; FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, name, restrictedType ) ;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^368^^^^^360^371^[REPLACE] return informed;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType restrictedType = restrictedType.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^364^365^^^^360^371^[REPLACE] JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^366^^^^^360^371^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[ADD]^^366^367^368^369^^360^371^[ADD] FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, name, restrictedType ) ; return informed; }^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( true ) ;^364^365^^^^360^371^[REPLACE] JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[ADD]^^364^365^^^^360^371^[ADD] JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^370^^^^^360^371^[REPLACE] return blindScope;^[METHOD] caseNameOrGetProp [TYPE] FlowScope [PARAMETER] Node name FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  true  [TYPE]  JSType restrictedType  type  [TYPE]  Node name  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType restrictedType = getRestrictedByTypeOfResult ( restrictedType, value, resultEqualsValue ) ;^375^376^^^^373^383^[REPLACE] JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[METHOD] caseTypeOf [TYPE] FlowScope [PARAMETER] Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType restrictedType  type  [TYPE]  boolean false  resultEqualsValue  true  [TYPE]  Node node  [TYPE]  String value  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( restrictedType != null )  {^377^^^^^373^383^[REPLACE] if  ( restrictedType == null )  {^[METHOD] caseTypeOf [TYPE] FlowScope [PARAMETER] Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType restrictedType  type  [TYPE]  boolean false  resultEqualsValue  true  [TYPE]  Node node  [TYPE]  String value  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^378^^^^^373^383^[REPLACE] return blindScope;^[METHOD] caseTypeOf [TYPE] FlowScope [PARAMETER] Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType restrictedType  type  [TYPE]  boolean false  resultEqualsValue  true  [TYPE]  Node node  [TYPE]  String value  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^380^^^^^373^383^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseTypeOf [TYPE] FlowScope [PARAMETER] Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType restrictedType  type  [TYPE]  boolean false  resultEqualsValue  true  [TYPE]  Node node  [TYPE]  String value  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, left, restrictedLeftType ) ;^381^^^^^373^383^[REPLACE] declareNameInScope ( informed, node, restrictedType ) ;^[METHOD] caseTypeOf [TYPE] FlowScope [PARAMETER] Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType restrictedType  type  [TYPE]  boolean false  resultEqualsValue  true  [TYPE]  Node node  [TYPE]  String value  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^382^^^^^373^383^[REPLACE] return informed;^[METHOD] caseTypeOf [TYPE] FlowScope [PARAMETER] Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType restrictedType  type  [TYPE]  boolean false  resultEqualsValue  true  [TYPE]  Node node  [TYPE]  String value  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^387^^^^^385^410^[REPLACE] JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (rightType != true )  {^388^^^^^385^410^[REPLACE] if  ( leftType == null )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^388^389^390^^^385^410^[ADD] if  ( leftType == null )  { return blindScope; }^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^389^^^^^385^410^[REPLACE] return blindScope;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^389^^^^^385^410^[REPLACE] return blindScope;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType leftType = right.getJSType (  ) ;^391^^^^^385^410^[REPLACE] JSType rightType = right.getJSType (  ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^ObjectType targetType = typeRegistry .getNativeType (  )  ;^392^393^^^^385^410^[REPLACE] ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( ! rightType instanceof FunctionType )  {^394^^^^^385^410^[REPLACE] if  ( rightType instanceof FunctionType )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^targetType =   ( FunctionType )  rightType;^395^^^^^385^410^[REPLACE] targetType =  ( FunctionType )  rightType;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^395^^^^^385^410^[ADD] targetType =  ( FunctionType )  rightType;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^397^^^^^385^410^[REPLACE] Visitor<JSType> visitor;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^397^^^^^385^410^[ADD] Visitor<JSType> visitor;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( !outcome )  {^398^^^^^385^410^[REPLACE] if  ( outcome )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ; ;^401^^^^^385^410^[REPLACE] visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^401^^^^^385^410^[ADD] visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ; ;^399^^^^^385^410^[REPLACE] visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType restrictedLeftType = rightType.visit ( visitor ) ;^403^^^^^385^410^[REPLACE] JSType restrictedLeftType = leftType.visit ( visitor ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^403^^^^^385^410^[ADD] JSType restrictedLeftType = leftType.visit ( visitor ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( restrictedLeftType == null ) {^404^^^^^385^410^[REPLACE] if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^FlowScope informed = blindScope.createChildFlowScope (  ) ;^404^405^406^407^408^385^410^[ADD] if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, left, restrictedLeftType ) ; return informed; }^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^407^^^^^385^410^[REPLACE] return informed;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^405^^^^^385^410^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return caseObjectType ( type ) ;^407^^^^^385^410^[REPLACE] return informed;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^409^^^^^385^410^[REPLACE] return blindScope;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType jsType = object.getType (  ) ;^420^^^^^419^444^[REPLACE] JSType jsType = object.getJSType (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^jsType = this.getRestrictedWithoutUndefined ( jsType ) ; ;^421^^^^^419^444^[REPLACE] jsType = this.getRestrictedWithoutNull ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^jsType = this.getRestrictedWithoutNull ( jsType ) ; ;^422^^^^^419^444^[REPLACE] jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^422^^^^^419^444^[ADD] jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^boolean hasProperty = true;^424^^^^^419^444^[REPLACE] boolean hasProperty = false;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^ObjectType objectType = ObjectType.cast ( unknownType ) ;^425^^^^^419^444^[REPLACE] ObjectType objectType = ObjectType.cast ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^425^^^^^419^444^[ADD] ObjectType objectType = ObjectType.cast ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( objectType == null )  {^426^^^^^419^444^[REPLACE] if  ( objectType != null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^hasProperty =  null.hasProperty ( propertyName ) ;^427^^^^^419^444^[REPLACE] hasProperty = objectType.hasProperty ( propertyName ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^hasProperty =  targetType.hasProperty ( propertyName ) ;^427^^^^^419^444^[REPLACE] hasProperty = objectType.hasProperty ( propertyName ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( hasProperty )  {^429^^^^^419^444^[REPLACE] if  ( !hasProperty )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( qualifiedName == this  )  {^431^^^^^419^444^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( blindScope.getSlot ( propertyQualifiedName )  != null )  {^433^^^^^419^444^[REPLACE] if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^439^^^^^419^444^[REPLACE] return informed;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^434^^^^^419^444^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType unknownType =   JSTypeNative.UNKNOWN_TYPE   ;^435^436^^^^419^444^[REPLACE] JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String propertyQualifiedName = qualifiedName + "." +qualifiedName;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^432^433^434^435^436^419^444^[ADD] String propertyQualifiedName = qualifiedName + "." + propertyName; if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType unknownType = typeRegistry .getNativeObjectType (  )  ;^435^436^^^^419^444^[REPLACE] JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^435^436^^^^419^444^[ADD] JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String qualifiedName = object.getLastChild (  ) ;^430^^^^^419^444^[REPLACE] String qualifiedName = object.getQualifiedName (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String propertyQualifiedName = qualifiedName + "." + propertyQualifiedName;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( propertyQualifiedName == null )  {^431^^^^^419^444^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^431^432^433^434^435^419^444^[ADD] if  ( qualifiedName != null )  { String propertyQualifiedName = qualifiedName + "." + propertyName; if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; JSType unknownType = typeRegistry.getNativeType (^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed .inferSlotType ( jsType )  ;^434^^^^^419^444^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String qualifiedName = object.getQualifiedName (  ) ;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( blindScope .inferSlotType ( unknownType )   != this )  {^433^^^^^419^444^[REPLACE] if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String propertyQualifiedName = propertyQualifiedName + "." + propertyName;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^443^^^^^419^444^[REPLACE] return blindScope;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^459^^^^^458^460^[REPLACE] return applyCommonRestriction ( type ) ;^[METHOD] caseTopType [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! target instanceof FunctionType )  {^464^^^^^463^471^[REPLACE] if  ( target instanceof FunctionType )  {^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^FunctionType funcTarget =  ( FunctionType )  target;return funcTarget.getInstanceType (  ) ;^464^465^466^467^468^463^471^[ADD] if  ( target instanceof FunctionType )  { FunctionType funcTarget =  ( FunctionType )  target; if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( funcTarget.getInstanceType (  )  )  {^466^^^^^463^471^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^return funcTarget.getInstanceType (  ) ;^466^467^468^^^463^471^[ADD] if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return funcTarget .hasInstanceType (  )  ;^467^^^^^463^471^[REPLACE] return funcTarget.getInstanceType (  ) ;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return funcTarget.hasInstanceType (  ) ;^467^^^^^463^471^[REPLACE] return funcTarget.getInstanceType (  ) ;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^465^^^^^463^471^[REPLACE] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^^465^^^^^463^471^[ADD] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^^466^467^468^^^463^471^[ADD] if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^470^^^^^463^471^[REPLACE] return getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return applyCommonRestriction ( targetType ) ;^475^^^^^474^476^[REPLACE] return applyCommonRestriction ( type ) ;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^480^^^^^479^481^[REPLACE] return applyCommonRestriction ( type ) ;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^485^^^^^484^486^[REPLACE] return caseObjectType ( type ) ;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType type 
[REPLACE]^if  ( target.isSubtype (  )  )  {^489^^^^^488^499^[REPLACE] if  ( target.isUnknownType (  )  )  {^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return caseObjectType ( type ) ;^490^^^^^488^499^[REPLACE] return type;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^493^^^^^488^499^[REPLACE] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( funcTarget.getInstanceType (  )  )  {^494^^^^^488^499^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^^494^495^496^^^488^499^[ADD] if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return type .getRestrictedTypeGivenToBooleanOutcome ( false )  ;^495^^^^^488^499^[REPLACE] return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return type.getRestrictedTypeGivenToBooleanOutcome ( funcTarget.getInstanceType (  )  ) ;^495^^^^^488^499^[REPLACE] return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return true;^498^^^^^488^499^[REPLACE] return null;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( target.isSubtype (  )  )  {^515^^^^^514^529^[REPLACE] if  ( target.isUnknownType (  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return targetType;^516^^^^^514^529^[REPLACE] return type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^519^^^^^514^529^[REPLACE] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( leftIsRefineable && leftType != null )  {^520^^^^^514^529^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^^520^521^522^523^^514^529^[ADD] if  ( funcTarget.hasInstanceType (  )  )  { if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( targetType.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^521^^^^^514^529^[REPLACE] if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^return null;^521^522^523^^^514^529^[ADD] if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return true;^522^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return targetType;^525^^^^^514^529^[REPLACE] return type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^^521^522^523^^^514^529^[ADD] if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return false;^522^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return false;^528^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( target.isSubtype (  )  )  {^533^^^^^532^543^[REPLACE] if  ( target.isUnknownType (  )  )  {^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return caseObjectType ( type ) ;^534^^^^^532^543^[REPLACE] return type;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^537^^^^^532^543^[REPLACE] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( leftIsRefineable && leftType != null )  {^538^^^^^532^543^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^538^539^540^^^532^543^[ADD] if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return type.getRestrictedUnion ( funcTarget .hasInstanceType (  )   ) ;^539^^^^^532^543^[REPLACE] return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return false;^542^^^^^532^543^[REPLACE] return null;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return caseEquality ( condition, blindScope, EQ ) ;^547^^^^^546^548^[REPLACE] return caseObjectType ( type ) ;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  type  [TYPE]  boolean false  true  [TYPE]  FunctionType type 
[REPLACE]^if  ( p.first != null || p.second == null )  {^50^^^^^49^54^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return false;^51^^^^^49^54^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^51^^^^^49^54^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   p.second   ;^53^^^^^49^54^[REPLACE] return p.first.getTypesUnderEquality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( p.first != null ) {^63^^^^^62^67^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return this;^64^^^^^62^67^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   p.second   ;^66^^^^^62^67^[REPLACE] return p.first.getTypesUnderInequality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( p.first != null ) {^77^^^^^76^81^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  Pair p 
[ADD]^return null;^77^78^79^^^76^81^[ADD] if  ( p.first == null || p.second == null )  { return null; }^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return false;^78^^^^^76^81^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   p.second   ;^80^^^^^76^81^[REPLACE] return p.first.getTypesUnderShallowEquality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  (  p.second == null )  {^91^^^^^90^95^[REPLACE] if  ( p.first == null || p.second == null )  {^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^92^^^^^90^95^[REPLACE] return null;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return   p.second   ;^94^^^^^90^95^[REPLACE] return p.first.getTypesUnderShallowInequality ( p.second ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return new Pair<JSType, JSType> ( getRestrictedWithoutUndefined ( 1.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^105^106^107^^^104^108^[REPLACE] return new Pair<JSType, JSType> ( getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[METHOD] apply [TYPE] Pair [PARAMETER] JSType> p [CLASS] 5   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^this.target =  null;^454^^^^^453^455^[REPLACE] this.target = target;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] ObjectType target [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  boolean false  true 
[REPLACE]^return getNativeType ( UNKNOWN_TYPE ) ;^459^^^^^458^460^[REPLACE] return applyCommonRestriction ( type ) ;^[METHOD] caseTopType [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  JSType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! target instanceof FunctionType )  {^464^^^^^463^471^[REPLACE] if  ( target instanceof FunctionType )  {^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^if  ( funcTarget .getInstanceType (  )   )  {^466^^^^^463^471^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return funcTarget .hasInstanceType (  )  ;^467^^^^^463^471^[REPLACE] return funcTarget.getInstanceType (  ) ;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return funcTarget.hasInstanceType (  ) ;^467^^^^^463^471^[REPLACE] return funcTarget.getInstanceType (  ) ;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[ADD]^^465^^^^^463^471^[ADD] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^if  ( funcTarget.getInstanceType (  )  )  {^466^^^^^463^471^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return funcTarget.getInstanceType (  ) ;^470^^^^^463^471^[REPLACE] return getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] caseUnknownType [TYPE] JSType [PARAMETER] [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return applyCommonRestriction ( target ) ;^475^^^^^474^476^[REPLACE] return applyCommonRestriction ( type ) ;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  boolean false  true 
[REPLACE]^return getNativeType ( UNKNOWN_TYPE ) ;^480^^^^^479^481^[REPLACE] return applyCommonRestriction ( type ) ;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true 
[REPLACE]^return getNativeType ( UNKNOWN_TYPE ) ;^485^^^^^484^486^[REPLACE] return caseObjectType ( type ) ;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType type  [TYPE]  boolean false  true 
[REPLACE]^if  ( target instanceof FunctionType )  {^489^^^^^488^499^[REPLACE] if  ( target.isUnknownType (  )  )  {^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^^489^490^491^^^488^499^[ADD] if  ( target.isUnknownType (  )  )  { return type; }^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return null;^490^^^^^488^499^[REPLACE] return type;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( target instanceof FunctionType )  {^494^^^^^488^499^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^494^495^496^^^488^499^[ADD] if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return getNativeType ( UNKNOWN_TYPE ) ;^495^^^^^488^499^[REPLACE] return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return type.getGreatestSubtype ( funcTarget .hasInstanceType (  )   ) ;^495^^^^^488^499^[REPLACE] return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return true;^498^^^^^488^499^[REPLACE] return null;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByTrueInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^this.target =  null;^510^^^^^509^511^[REPLACE] this.target = target;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] ObjectType target [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  [TYPE]  boolean false  true 
[REPLACE]^if  ( target.isSubtype (  )  )  {^515^^^^^514^529^[REPLACE] if  ( target.isUnknownType (  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[ADD]^^515^516^517^^^514^529^[ADD] if  ( target.isUnknownType (  )  )  { return type; }^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return target;^516^^^^^514^529^[REPLACE] return type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[ADD]^^519^^^^^514^529^[ADD] FunctionType funcTarget =  ( FunctionType )  target;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^if  ( funcTarget.getInstanceType (  )  )  {^520^^^^^514^529^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^if  ( target.isUnknownType (  )  )  {^521^^^^^514^529^[REPLACE] if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return true;^522^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return this;^522^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return target;^525^^^^^514^529^[REPLACE] return type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^if  ( type.isSubtype ( funcTarget.hasInstanceType (  )  )  )  {^521^^^^^514^529^[REPLACE] if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return false;^522^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^return this;^528^^^^^514^529^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType funcTarget  [TYPE]  boolean false  true 
[REPLACE]^if  ( target .isSubtype (  )   )  {^533^^^^^532^543^[REPLACE] if  ( target.isUnknownType (  )  )  {^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[ADD]^return type;^533^534^535^^^532^543^[ADD] if  ( target.isUnknownType (  )  )  { return type; }^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return null;^534^^^^^532^543^[REPLACE] return type;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^if  ( funcTarget.getInstanceType (  )  )  {^538^^^^^532^543^[REPLACE] if  ( funcTarget.hasInstanceType (  )  )  {^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return caseObjectType ( type ) ;^539^^^^^532^543^[REPLACE] return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return type.getRestrictedUnion ( funcTarget.hasInstanceType (  )  ) ;^539^^^^^532^543^[REPLACE] return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return this;^542^^^^^532^543^[REPLACE] return null;^[METHOD] caseUnionType [TYPE] JSType [PARAMETER] UnionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  UnionType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
[REPLACE]^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^547^^^^^546^548^[REPLACE] return caseObjectType ( type ) ;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  FunctionType type  [TYPE]  boolean false  true 
