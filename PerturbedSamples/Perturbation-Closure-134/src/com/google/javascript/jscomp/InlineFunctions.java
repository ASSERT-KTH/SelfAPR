[REPLACE]^private final Map<String, FunctionState> fns  = null ;^64^^^^^^^[REPLACE] private final Map<String, FunctionState> fns = Maps.newHashMap (  ) ;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private final Map<Node, String> anonFns ;^65^^^^^^^[REPLACE] private final Map<Node, String> anonFns = Maps.newHashMap (  ) ;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  boolean blockFunctionInliningEnabled;^71^^^^^^^[REPLACE] private final boolean blockFunctionInliningEnabled;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  boolean inlineGlobalFunctions;^73^^^^^^^[REPLACE] private final boolean inlineGlobalFunctions;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private int callsSeen ;^150^^^^^^^[REPLACE] private int callsSeen = 0;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Function fn  = null ;^758^^^^^^^[REPLACE] private Function fn = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Node safeFnNode ;^759^^^^^^^[REPLACE] private Node safeFnNode = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean inline  = null ;^760^^^^^^^[REPLACE] private boolean inline = true;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean remove = false;^761^^^^^^^[REPLACE] private boolean remove = true;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean inlineDirectly ;^762^^^^^^^[REPLACE] private boolean inlineDirectly = false;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean referencesThis  = null ;^763^^^^^^^[REPLACE] private boolean referencesThis = false;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Map<Node, Reference> references  = null ;^764^^^^^^^[REPLACE] private Map<Node, Reference> references = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private JSModule module ;^765^^^^^^^[REPLACE] private JSModule module = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Set<String> namesToAlias  = null ;^766^^^^^^^[REPLACE] private Set<String> namesToAlias = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  Node var;^927^^^^^^^[REPLACE] private final Node var;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  Node fn;^948^^^^^^^[REPLACE] private final Node fn;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private   boolean  fakeName;^949^^^^^^^[REPLACE] private final String fakeName;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^boolean requiresDecomposition;^972^^^^^^^[REPLACE] final boolean requiresDecomposition;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^boolean inlined  = null ;^973^^^^^^^[REPLACE] boolean inlined = false;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^Preconditions.checkArgument ( compiler == null ) ;^83^^^^^76^95^[REPLACE] Preconditions.checkArgument ( compiler != null ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^Preconditions.checkState ( this == null ) ;^84^^^^^76^95^[REPLACE] Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.compiler =  null;^85^^^^^76^95^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.inlineLocalFunctions = inlineLocalFunctions; ;^87^^^^^76^95^[REPLACE] this.inlineGlobalFunctions = inlineGlobalFunctions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.inlineGlobalFunctions = inlineGlobalFunctions; ;^88^^^^^76^95^[REPLACE] this.inlineLocalFunctions = inlineLocalFunctions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.inlineAnonymousFunctionExpressions =  inlined;^89^90^^^^76^95^[REPLACE] this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[ADD]^^89^90^^^^76^95^[ADD] this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.blockFunctionInliningEnabled =  true;^91^^^^^76^95^[REPLACE] this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.injector =  new FunctionInjector ( null, safeNameIdSupplier, enableExpressionDecomposition ) ;^93^94^^^^76^95^[REPLACE] this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.anonFunctionMap = anonFns; ;^342^^^^^339^345^[REPLACE] this.functionMap = fns;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.functionMap = fns; ;^343^^^^^339^345^[REPLACE] this.anonFunctionMap = anonFns;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[ADD]^^343^^^^^339^345^[ADD] this.anonFunctionMap = anonFns;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.callback =  null;^344^^^^^339^345^[REPLACE] this.callback = callback;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^super ( fns, anonFns, false ) ;^391^^^^^388^393^[REPLACE] super ( fns, anonFns, null ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionState> fns String> anonFns [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.callback  =  this.callback ;^392^^^^^388^393^[REPLACE] this.callback = this;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionState> fns String> anonFns [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.injector =  null;^518^^^^^517^519^[REPLACE] this.injector = injector;^[METHOD] <init> [TYPE] FunctionInjector) [PARAMETER] FunctionInjector injector [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.fn =  safeFnNode;^909^^^^^908^910^[REPLACE] this.fn = fn;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[ADD]^^909^^^^^908^910^[ADD] this.fn = fn;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.var =  safeFnNode;^930^^^^^929^931^[REPLACE] this.var = var;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node var [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.fn =  safeFnNode;^952^^^^^951^956^[REPLACE] this.fn = fn;^[METHOD] <init> [TYPE] Node,int) [PARAMETER] Node fn int index [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.fakeName =  String.valueOf ( callsSeen ) ;^955^^^^^951^956^[REPLACE] this.fakeName = String.valueOf ( index ) ;^[METHOD] <init> [TYPE] Node,int) [PARAMETER] Node fn int index [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^955^^^^^951^956^[ADD] this.fakeName = String.valueOf ( index ) ;^[METHOD] <init> [TYPE] Node,int) [PARAMETER] Node fn int index [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^super ( var, module, mode ) ;^976^^^^^974^978^[REPLACE] super ( callNode, module, mode ) ;^[METHOD] <init> [TYPE] InliningMode,boolean) [PARAMETER] Node callNode JSModule module InliningMode mode boolean decompose [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.requiresDecomposition =  true;^977^^^^^974^978^[REPLACE] this.requiresDecomposition = decompose;^[METHOD] <init> [TYPE] InliningMode,boolean) [PARAMETER] Node callNode JSModule module InliningMode mode boolean decompose [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^977^^^^^974^978^[ADD] this.requiresDecomposition = decompose;^[METHOD] <init> [TYPE] InliningMode,boolean) [PARAMETER] Node callNode JSModule module InliningMode mode boolean decompose [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = fns .put ( this , null )  ;^98^^^^^97^104^[REPLACE] FunctionState fs = fns.get ( fnName ) ;^[METHOD] getOrCreateFunctionState [TYPE] InlineFunctions$FunctionState [PARAMETER] String fnName [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs != null )  {^99^^^^^97^104^[REPLACE] if  ( fs == null )  {^[METHOD] getOrCreateFunctionState [TYPE] InlineFunctions$FunctionState [PARAMETER] String fnName [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs =  new FindCandidatesReferences ( fns, anonFns )  ;^100^^^^^97^104^[REPLACE] fs = new FunctionState (  ) ;^[METHOD] getOrCreateFunctionState [TYPE] InlineFunctions$FunctionState [PARAMETER] String fnName [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^100^101^^^^97^104^[ADD] fs = new FunctionState (  ) ; fns.put ( fnName, fs ) ;^[METHOD] getOrCreateFunctionState [TYPE] InlineFunctions$FunctionState [PARAMETER] String fnName [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fn;^103^^^^^97^104^[REPLACE] return fs;^[METHOD] getOrCreateFunctionState [TYPE] InlineFunctions$FunctionState [PARAMETER] String fnName [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  fn  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Preconditions.checkState ( compiler.reportCodeChange (  )  ) ;^110^^^^^109^144^[REPLACE] Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeTraversal.traverse ( compiler, safeFnNode, new FindCandidateFunctions (  )  ) ;^112^^^^^109^144^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.keySet (  )  )  {^113^^^^^109^144^[REPLACE] if  ( fns.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^114^^^^^109^144^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeTraversal.traverse ( compiler, safeFnNode, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^109^144^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^removeInlinedFunctions (  ) ;^118^^^^^109^144^[REPLACE] trimCanidatesNotMeetingMinimumRequirements (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.keySet (  )  )  {^119^^^^^109^144^[REPLACE] if  ( fns.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^120^^^^^109^144^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> fnNames =   fns.keySet (  )  ;^131^^^^^109^144^[REPLACE] Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^131^^^^^109^144^[ADD] Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^injector.setKnownConstants ( false ) ;^132^^^^^109^144^[REPLACE] injector.setKnownConstants ( fnNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = functionMap.get ( name ) ;^134^^^^^109^144^[REPLACE] trimCanidatesUsingOnCost (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^FunctionState fs = functionMap.get ( name ) ;^134^^^^^109^144^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.keySet (  )  )  {^135^^^^^109^144^[REPLACE] if  ( fns.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^136^^^^^109^144^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^removeInlinedFunctions (  ) ;^138^^^^^109^144^[REPLACE] resolveInlineConflicts (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^decomposeExpressions ( null ) ;^139^^^^^109^144^[REPLACE] decomposeExpressions ( fnNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^139^^^^^109^144^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeTraversal.traverse ( compiler, safeFnNode, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^109^144^[REPLACE] NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = functionMap.get ( name ) ;^143^^^^^109^144^[REPLACE] removeInlinedFunctions (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^Node child = n.getFirstChild (  ) ;^143^^^^^109^144^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return false ;^157^158^159^^^153^160^[REPLACE] return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node callNode  externs  fn  n  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^[REPLACE] if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = functionMap.get ( name ) ;^165^^^^^162^171^[REPLACE] findNamedFunctions ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^168^^^^^162^171^[REPLACE] if  ( inlineAnonymousFunctionExpressions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^findAnonymousFunctionExpressions ( t, n ) ;^168^169^170^^^162^171^[ADD] if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^findAnonymousFunctionExpressions ( t, safeFnNode ) ;^169^^^^^162^171^[REPLACE] findAnonymousFunctionExpressions ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !NodeUtil.isStatement ( safeFnNode )  )  {^174^^^^^173^207^[REPLACE] if  ( !NodeUtil.isStatement ( n )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^176^^^^^173^207^[REPLACE] return;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^185^^^^^173^207^[REPLACE] if  ( n.hasOneChild (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^185^186^187^188^^173^207^[ADD] if  ( n.hasOneChild (  )  )  {  Node nameNode = n.getFirstChild (  ) ; if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  )^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( nameNode.getType (  )  == Token.NAME ) {^188^189^^^^173^207^[REPLACE] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^188^189^190^191^^173^207^[ADD] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t .getCompiler (  )   ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node safeFnNodeameNode = n.getString (  ) ;^187^^^^^173^207^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^187^^^^^173^207^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( safeFnNodeameNode.getType (  )  == Token.NAME || nameNode.hasChildren (  ) || nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^207^[REPLACE] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { if  ( fs.canInline (  )  )  {^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t.getCompiler (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.isEmpty (  )  )  {^202^^^^^173^207^[REPLACE] if  ( !name.isEmpty (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^} else if  ( !fs.canRemove (  )  )  {^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( fn, t .getCompiler (  )   ) ;^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^203^^^^^173^207^[ADD] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node parentameNode = n.getString (  ) ;^187^^^^^173^207^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Function fn = parentew NamedFunction ( n ) ;^200^^^^^173^207^[REPLACE] Function fn = new NamedFunction ( n ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = fn .getFunctionNode (  )  ;^201^^^^^173^207^[REPLACE] String name = fn.getName (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getFirstChild (  ) .getAncestor (  )   !=  Token.FUNCTION )  {^221^^^^^215^238^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^}  else {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   &&  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fnNode = fnIdentifingNode;^225^226^227^^^215^238^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  null;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  safeFnNode;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^226^227^^^^215^238^[ADD] fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnIdentifingNode = safeFnNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^225^226^227^^^215^238^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnIdentifingNode = n.getString (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^224^225^226^227^^215^238^[ADD] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  safeFnNode.getFirstChild (  ) ;^222^^^^^215^238^[REPLACE] fnNode = n.getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fnIdentifingNode.getAncestor (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  root;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fnNode == null )  {^231^^^^^215^238^[REPLACE] if  ( fnNode != null )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^231^232^233^234^235^215^238^[ADD] if  ( fnNode != null )  { Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Function fn = new AnonymousFunction ( safeFnNode, callsSeen++ ) ;^232^^^^^215^238^[REPLACE] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^232^233^^^^215^238^[ADD] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = true;^220^^^^^215^238^[REPLACE] Node fnNode = null;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^220^^^^^215^238^[ADD] Node fnNode = null;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = fn.remove (  ) ;^246^^^^^245^299^[REPLACE] String name = fn.getName (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = getOrCreateFunctionState ( fnName ) ;^247^^^^^245^299^[REPLACE] FunctionState fs = getOrCreateFunctionState ( name ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^247^^^^^245^299^[ADD] FunctionState fs = getOrCreateFunctionState ( name ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^253^^^^^245^299^[REPLACE] if  ( fs.hasExistingFunctionDefinition (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (inlineGlobalFunctions (  )  )  {^257^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getName (  )  )  )  {^260^261^^^^253^298^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( false ) ;^262^^^^^260^263^[REPLACE] fs.inlineDirectly ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( isCandidateFunction ( fn )  )  {^268^^^^^253^298^[REPLACE] if  ( !isCandidateFunction ( fn )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .canInline (  )  ;^270^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.canRemove (  )  )  {^274^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !name.isEmpty (  )  )  {^280^^^^^253^298^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( true ) ;^281^^^^^253^298^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^fs.setModule ( module ) ;^281^^^^^253^298^[REMOVE] ^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .getNamesToAlias (  )  ;^282^^^^^253^298^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil .removeChild ( block )   )  {^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setReferencesThis ( false ) ;^287^^^^^253^298^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn .getName (  )  ;^277^^^^^253^298^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( safeFnNode ) ;^278^279^^^^253^298^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.getFunctionBody ( root ) ;^285^^^^^253^298^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( namesToAlias.isEmpty (  )  )  {^280^^^^^253^298^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^280^281^282^283^^253^298^[ADD] if  ( !namesToAlias.isEmpty (  )  )  { fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^281^^^^^253^298^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^281^^^^^253^298^[ADD] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setReferencesThis ( true ) ;^286^287^288^^^253^298^[ADD] if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (  fs.canInlineDirectly (  )  )  {^292^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^292^293^294^295^^253^298^[ADD] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  { if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^293^^^^^253^298^[REPLACE] if  ( !blockFunctionInliningEnabled )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setInline ( false ) ;^293^294^295^^^253^298^[ADD] if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setRemove ( true ) ;^294^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( blockFunctionInliningEnabled )  {^293^^^^^253^298^[REPLACE] if  ( !blockFunctionInliningEnabled )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^294^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^fs.setModule ( module ) ;^294^^^^^253^298^[REMOVE] ^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn.getName (  ) ;^277^^^^^253^298^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias =   fnNode   ;^278^279^^^^253^298^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector.setKnownConstants ( fn.getFunctionNode (  )  )  )  {^260^261^^^^253^298^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^270^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^274^275^^277^278^253^298^[ADD] if  ( fs.canInline (  )  )  { fs.setModule ( module ) ; Node fnNode = fn.getFunctionNode (  ) ; Set<String> namesToAlias =^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil.referencesThis ( safeFnNode )  )  {^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setRemove ( false ) ;^287^^^^^253^298^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^fs.setModule ( module ) ;^287^^^^^253^298^[REMOVE] ^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias =   safeFnNode   ;^278^279^^^^253^298^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.getFunctionBody ( safeFnNode ) ;^285^^^^^253^298^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^285^^^^^253^298^[ADD] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !namesToAlias .get ( true )   )  {^280^^^^^253^298^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^281^282^^^^253^298^[ADD] fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( namesToAlias ) ;^282^^^^^253^298^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.canInline (  )  && fs.canInlineDirectly (  )  )  {^292^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .canInline (  )  ;^294^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^254^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (false (  )  )  {^257^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^257^258^259^260^^245^299^[ADD] if  ( fs.canInline (  )  )  {  fs.setFn ( fn ) ; if  ( injector.isDirectCallNodeReplacementPossible (^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getName (  )  )  )  {^260^261^^^^245^299^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^260^261^262^263^^245^299^[ADD] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  { fs.inlineDirectly ( true ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( isCandidateFunction ( fn )  )  {^268^^^^^245^299^[REPLACE] if  ( !isCandidateFunction ( fn )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^270^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.canRemove (  )  )  {^274^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( namesToAlias.isEmpty (  )  )  {^280^^^^^245^299^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( true ) ;^281^^^^^245^299^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^281^^^^^245^299^[ADD] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .getNamesToAlias (  )  ;^282^^^^^245^299^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil.removeChild ( block )  )  {^286^^^^^245^299^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setReferencesThis ( false ) ;^287^^^^^245^299^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn.getName (  ) ;^277^^^^^245^299^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( safeFnNode ) ;^278^279^^^^245^299^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.getFunctionBody ( safeFnNode ) ;^285^^^^^245^299^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !name.isEmpty (  )  )  {^280^^^^^245^299^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.inlineDirectly ( false ) ;fs.setNamesToAlias ( namesToAlias ) ;^280^281^282^283^^245^299^[ADD] if  ( !namesToAlias.isEmpty (  )  )  { fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil.referencesThis ( safeFnNode )  )  {^286^^^^^245^299^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.canInline (  )  && fs.canInlineDirectly (  )  )  {^292^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^292^293^294^295^^245^299^[ADD] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  { if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( blockFunctionInliningEnabled )  {^293^^^^^245^299^[REPLACE] if  ( !blockFunctionInliningEnabled )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^293^294^295^^^245^299^[ADD] if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^294^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setRemove ( true ) ;^294^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^fs.setModule ( module ) ;^294^^^^^245^299^[REMOVE] ^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn .getName (  )  ;^277^^^^^245^299^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^278^279^^^^245^299^[ADD] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector.setKnownConstants ( fn.getFunctionNode (  )  )  )  {^260^261^^^^245^299^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( false ) ;^262^^^^^260^263^[REPLACE] fs.inlineDirectly ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .canInline (  )  ;^270^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^281^^^^^245^299^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^281^282^^^^245^299^[ADD] fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( namesToAlias ) ;^282^^^^^245^299^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setReferencesThis ( true ) ;^286^287^288^^^245^299^[ADD] if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias =   safeFnNode   ;^278^279^^^^245^299^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil .isFunctionObjectCall ( block )  ;^285^^^^^245^299^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !namesToAlias.add (  )  )  {^280^^^^^245^299^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^294^^^^^245^299^[ADD] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( root ) ;^278^279^^^^245^299^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.removeChild ( safeFnNode ) ;^285^^^^^245^299^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String fnName = fn .getFunctionNode (  )  ;^307^^^^^305^320^[REPLACE] String fnName = fn.getName (  ) ;^[METHOD] isCandidateFunction [TYPE] boolean [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^308^^^^^305^320^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[METHOD] isCandidateFunction [TYPE] boolean [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return true;^315^^^^^305^320^[REPLACE] return false;^[METHOD] isCandidateFunction [TYPE] boolean [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn .getName (  )  ;^318^^^^^305^320^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] isCandidateFunction [TYPE] boolean [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return injector.doesFunctionMeetMinimumRequirements ( fnName, safeFnNode ) ;^319^^^^^305^320^[REPLACE] return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[METHOD] isCandidateFunction [TYPE] boolean [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( child.getType (  )   ||  Token.NAME )  {^355^^^^^347^378^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^name = child.getString (  ) ;name = anonFunctionMap.get ( child ) ;^355^356^357^358^^347^378^[ADD] if  ( child.getType (  )  == Token.NAME )  { name = child.getString (  ) ; } else if  ( child.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( child.getType (  )   ||  Token.FUNCTION )  {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  else {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;name = fnIdentifingNode.getString (  ) ;^359^360^361^362^363^347^378^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     Node child = node.getFirstChild (  ) ;     if  (  ( child.getType (  )  )  ==  ( NAME )  )  {         String name = child.getString (  ) ;         changed.add ( name ) ;     } }^362^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( nameNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name = anonFunctionMap.get ( child ) ; ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  root.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   &&  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^365^366^^^^347^378^[ADD] name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  null.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnIdentifingNode = safeFnNode.getFirstChild (  ) ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^361^362^363^364^365^347^378^[ADD] Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode.getAncestor (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  else {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  n.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( safeFnNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   name = anonFunctionMap.get ( fnIdentifingNode ) ;^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name = anonFunctionMap.get ( fnIdentifingNode ) ; ;^358^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^358^^^^^347^378^[ADD] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   Node fnIdentifingNode = child.getFirstChild (  ) ;name = fnIdentifingNode.getString (  ) ;^359^360^361^362^363^347^378^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  safeFnNode.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( n.getType (  )   ||  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( fnIdentifingNode.getAncestor (  )   &&  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  safeFnNode.getString (  ) ;^356^^^^^347^378^[REPLACE] name = child.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( child.getType (  )   ||  Token.FUNCTION )  {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( safeFnNode )  )  {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     Node child = node.getFirstChild (  ) ;     if  (  ( child.getType (  )  )  ==  ( NAME )  )  {         String name = child.getString (  ) ;         changed.add ( name ) ;     } }^359^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  nameNode.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( fnIdentifingNode .put ( null , this )   {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( safeFnNode.putType (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnIdentifingNode = child .getString (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^name = fnIdentifingNode.getString (  ) ;name = anonFunctionMap.get ( fnIdentifingNode ) ;^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( fnIdentifingNode.getType (  )   ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (fnName == null )  {^369^^^^^347^378^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs == this )  {^372^^^^^347^378^[REPLACE] if  ( fs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^callback .visitCallSite ( t , fn , parent , fs )  ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = functionMap.get ( fnName ) ;^370^^^^^347^378^[REPLACE] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs == null )  {^372^^^^^347^378^[REPLACE] if  ( fs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^callback .visitCallSite ( t , root , fnNode , fs )  ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^363^364^365^366^^347^378^[ADD] name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node child = safeFnNode .getString (  )  ;^351^^^^^347^378^[REPLACE] Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^String name = null;^351^352^^^^347^378^[ADD] Node child = n.getFirstChild (  ) ; String name = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^String name = false;^352^^^^^347^378^[REPLACE] String name = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^super.CallVisitor ( t, n, var ) ;^397^^^^^396^401^[REPLACE] super.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^398^^^^^396^401^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^checkNameUsage ( t, n, parent ) ;^398^399^400^^^396^401^[ADD] if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^changed.add ( name ) ;^399^^^^^396^401^[REPLACE] checkNameUsage ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return  ( references != null && !references.isEmpty (  )  ) ;^405^^^^^403^406^[REPLACE] maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^maybeAddReference ( t, fs, callNode, t .getCompiler (  )   ) ;^405^^^^^403^406^[REPLACE] maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !fs.setInline (  )  )  {^410^^^^^408^433^[REPLACE] if  ( !fs.canInline (  )  )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^411^^^^^408^433^[REPLACE] return;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^boolean referenceAdded = true;^414^^^^^408^433^[REPLACE] boolean referenceAdded = false;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^InliningMode mode = fs.canInline (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^408^433^[REPLACE] InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^417^418^^^^408^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^[REPLACE] if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^mode  =  mode ;^423^^^^^408^433^[REPLACE] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^423^^^^^408^433^[ADD] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^408^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^424^425^^^^408^433^[ADD] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( referenceAdded )  {^428^^^^^408^433^[REPLACE] if  ( !referenceAdded )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fs.setRemove ( true ) ;^431^^^^^408^433^[REPLACE] fs.setRemove ( false ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getModule (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^[REPLACE] CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( result  ==  CanInlineResult.NO )  {^441^^^^^435^450^[REPLACE] if  ( result != CanInlineResult.NO )  {^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return false;^446^^^^^435^450^[REPLACE] return true;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^boolean decompose = ( result  !=  CanInlineResult.AFTER_DECOMPOSITION ) ;^443^444^^^^435^450^[REPLACE] boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^443^444^^^^435^450^[ADD] boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^boolean decompose = ( result  &&  CanInlineResult.AFTER_DECOMPOSITION ) ;^443^444^^^^435^450^[REPLACE] boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return true;^449^^^^^435^450^[REPLACE] return false;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  CanInlineResult result  [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkState ( n.getType (  )   !=  Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkState ( n.getAncestor (  )  == Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( parent.getType (  )  == Token.VAR ) {^458^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^458^459^^461^462^455^508^[ADD] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^461^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( parent.getType (  )  == Token.CALL ) {^464^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^466^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (  n == parent .getString (  )  || n.getNext (  ) .getType (  )  == Token.STRING || n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^455^508^[REPLACE] if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (  gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^485^^^^^477^487^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node gramps = n.getAncestor ( 2L ) ;^481^^^^^477^487^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( gramps.getType (  )  == Token.CALL ) {^482^483^^^^455^508^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^485^^^^^482^486^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^485^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node gramps = safeFnNode.getAncestor ( 3 ) ;^481^^^^^455^508^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^String safeFnNodeame = n.getString (  ) ;^490^^^^^455^508^[REPLACE] String name = n.getString (  ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = fns.get ( fnName ) ;^491^^^^^455^508^[REPLACE] FunctionState fs = fns.get ( name ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^491^^^^^455^508^[ADD] FunctionState fs = fns.get ( name ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs != null )  {^492^^^^^455^508^[REPLACE] if  ( fs == null )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return fs;^493^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (  parent.getAncestor (  )  == n )  {^497^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fs.setInline ( true ) ;^506^^^^^497^507^[REPLACE] fs.setRemove ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^506^^^^^497^507^[ADD] fs.setRemove ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fs.setInline ( true ) ;^501^^^^^455^508^[REPLACE] fs.setInline ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkArgument ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^[REPLACE] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkState ( fs.FunctionState (  )  ) ;^523^^^^^521^537^[REPLACE] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs .setInline ( inlineDirectly )   )  {^524^^^^^521^537^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( ref == this  )  {^530^^^^^521^537^[REPLACE] if  ( ref != null )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^ref.inlined = false;^534^^^^^521^537^[REPLACE] ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Reference ref = fs.setSafeFnNode ( callNode ) ;^525^^^^^521^537^[REPLACE] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( ref == true )  {^530^^^^^521^537^[REPLACE] if  ( ref != null )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^534^^^^^521^537^[ADD] ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^525^^^^^521^537^[ADD] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Function fn = fs.getModule (  ) ;^544^^^^^542^551^[REPLACE] Function fn = fs.getFn (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^544^545^^^^542^551^[ADD] Function fn = fs.getFn (  ) ; String fnName = fn.getName (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^String fnName = fn .getFunctionNode (  )  ;^545^^^^^542^551^[REPLACE] String fnName = fn.getName (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnNode = fs.getReferences (  ) ;^546^^^^^542^551^[REPLACE] Node fnNode = fs.getSafeFnNode (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node newCode = injector.inline ( t, callNode, fnName, safeFnNode, mode ) ;^548^^^^^542^551^[REPLACE] Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getModule (  ) .reportCodeChange (  ) ;^549^^^^^542^551^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getCompiler (  ) .addToDebugLog ( name + name (  )  ) ;^550^^^^^542^551^[REPLACE] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getModule (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^550^^^^^542^551^[REPLACE] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^550^^^^^542^551^[ADD] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^550^^^^^542^551^[REPLACE] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Iterator<Entry<Node, Reference>> i;^559^^^^^558^566^[REPLACE] Iterator<Entry<String, FunctionState>> i;^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^562^^^^^558^566^[REPLACE] if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i.next (  ) ;^563^^^^^558^566^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^560^^^^^558^566^[REPLACE] for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (  !fs.canInline (  )  )  {^562^^^^^558^566^[REPLACE] if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i .next (  )  ;^563^^^^^558^566^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^563^^^^^558^566^[ADD] i.remove (  ) ;^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = null.next (  ) .getValue (  ) ;^561^^^^^558^566^[REPLACE] FunctionState fs = i.next (  ) .getValue (  ) ;^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( i  =  for  ( i ;^560^^^^^558^566^[REPLACE] for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = this.next (  ) .getValue (  ) ;^561^^^^^558^566^[REPLACE] FunctionState fs = i.next (  ) .getValue (  ) ;^[METHOD] trimCanidatesNotMeetingMinimumRequirements [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Iterator<Entry<Node, Reference>> i;^572^^^^^571^588^[REPLACE] Iterator<Entry<String, FunctionState>> i;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^572^^^^^571^588^[ADD] Iterator<Entry<String, FunctionState>> i;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !fs.hasReferences (  )  )  {^575^^^^^571^588^[REPLACE] if  ( fs.hasReferences (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^575^576^577^578^^571^588^[ADD] if  ( fs.hasReferences (  )  )  {  boolean lowersCost = mimimizeCost ( fs ) ; if  ( !lowersCost )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs.canRemove (  )  )  {^582^^^^^571^588^[REPLACE] } else if  ( !fs.canRemove (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   i.remove (  ) ;^582^583^^585^586^571^588^[ADD] else if  ( !fs.canRemove (  )  )  {  i.remove (  ) ; }^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i .next (  )  ;^585^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( lowersCost )  {^578^^^^^571^588^[REPLACE] if  ( !lowersCost )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i.next (  ) ;^580^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^boolean referenceAdded = false;^577^^^^^571^588^[REPLACE] boolean lowersCost = mimimizeCost ( fs ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !true )  {^578^^^^^571^588^[REPLACE] if  ( !lowersCost )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^578^579^580^581^^571^588^[ADD] if  ( !lowersCost )  {  i.remove (  ) ; }^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  else {^582^^^^^571^588^[REPLACE] } else if  ( !fs.canRemove (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i.next (  ) ;^585^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( 0 = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^573^^^^^571^588^[REPLACE] for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^573^574^575^^577^571^588^[ADD] for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  { FunctionState fs = i.next (  ) .getValue (  ) ; if  ( fs.hasReferences (  )  )  { boolean lowersCost = mimimizeCost ( fs ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( !fs .setRemove ( inlineLocalFunctions )   )  {^582^^^^^571^588^[REPLACE] } else if  ( !fs.canRemove (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REMOVE]^fs.setModule ( module ) ;^585^^^^^571^588^[REMOVE] ^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i .next (  )  ;^580^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !requiresDecomposition )  {^578^^^^^571^588^[REPLACE] if  ( !lowersCost )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = false.next (  ) .getValue (  ) ;^574^^^^^571^588^[REPLACE] FunctionState fs = i.next (  ) .getValue (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( i  = null ;^573^^^^^571^588^[REPLACE] for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = null.next (  ) .getValue (  ) ;^574^^^^^571^588^[REPLACE] FunctionState fs = i.next (  ) .getValue (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( inliningLowersCost ( fs )  )  {^596^^^^^595^609^[REPLACE] if  ( !inliningLowersCost ( fs )  )  {^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^598^^^^^595^609^[REPLACE] if  ( fs.hasBlockInliningReferences (  )  )  {^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setRemove ( false ) ;fs.removeBlockInliningReferences (  ) ;return false;^598^599^600^601^602^595^609^[ADD] if  ( fs.hasBlockInliningReferences (  )  )  { fs.setRemove ( false ) ; fs.removeBlockInliningReferences (  ) ; if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  { return false;^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return true;^605^^^^^595^609^[REPLACE] return false;^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (  !inliningLowersCost ( fs )  )  {^601^^^^^595^609^[REPLACE] if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return true;^602^^^^^595^609^[REPLACE] return false;^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^return false;^601^602^603^^^595^609^[ADD] if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  { return false; }^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.hasReferences (  )  ) {^601^^^^^595^609^[REPLACE] if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return false;^608^^^^^595^609^[REPLACE] return true;^[METHOD] mimimizeCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return injector.isDirectCallNodeReplacementPossible ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^[REPLACE] return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[METHOD] inliningLowersCost [TYPE] boolean [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { resolveInlineConflictsForFunction ( fs ) ;^642^^^^^641^645^[REPLACE] for  ( FunctionState fs : fns.values (  )  )  {^[METHOD] resolveInlineConflicts [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !fs.setReferencesThis (  )  )  {^652^^^^^650^676^[REPLACE] if  ( !fs.hasReferences (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^return;^652^653^654^^^650^676^[ADD] if  ( !fs.hasReferences (  )  )  { return; }^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^653^^^^^650^676^[REPLACE] return;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fsCalled.getFn (  ) .getFunctionNode (  ) ;^656^^^^^650^676^[REPLACE] Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> names = findCalledFunctions ( newCode ) ;^657^^^^^650^676^[REPLACE] Set<String> names = findCalledFunctions ( fnNode ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( names.isEmpty (  )  )  {^658^^^^^650^676^[REPLACE] if  ( !names.isEmpty (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fsCalled == null ) {^662^^^^^650^676^[REPLACE] if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !mimimizeCost ( fs )  )  {^666^^^^^650^676^[REPLACE] if  ( !mimimizeCost ( fsCalled )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled.setInline ( true ) ;^668^^^^^650^676^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^668^^^^^650^676^[ADD] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = n.getString (  ) ;^660^^^^^650^676^[REPLACE] for  ( String name : names )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^660^661^662^663^^650^676^[ADD] for  ( String name : names )  { FunctionState fsCalled = fns.get ( name ) ; if  ( fsCalled != null && fsCalled.canRemove (  )  )  { fsCalled.setRemove ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = fns.get ( name ) ;^661^^^^^650^676^[REPLACE] FunctionState fsCalled = fns.get ( name ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^661^^^^^650^676^[ADD] FunctionState fsCalled = fns.get ( name ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fsCalled == null && fsCalled.canRemove (  )  )  {^662^^^^^650^676^[REPLACE] if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fsCalled.setRemove ( false ) ;^662^663^^^^650^676^[ADD] if  ( fsCalled != null && fsCalled.canRemove (  )  )  { fsCalled.setRemove ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( mimimizeCost ( fsCalled )  )  {^666^^^^^650^676^[REPLACE] if  ( !mimimizeCost ( fsCalled )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^668^^^^^650^676^[REMOVE] ^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled .canInline (  )  ;^668^^^^^650^676^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fsCalled = fns.get ( fnName ) ;^661^^^^^650^676^[REPLACE] FunctionState fsCalled = fns.get ( name ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> names = findCalledFunctions ( fnNode ) ;^682^^^^^681^685^[REPLACE] Set<String> changed = Sets.newHashSet (  ) ;^[METHOD] findCalledFunctions [TYPE] Set [PARAMETER] Node node [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^findCalledFunctions ( safeFnNode, changed ) ;^683^^^^^681^685^[REPLACE] findCalledFunctions ( node, changed ) ;^[METHOD] findCalledFunctions [TYPE] Set [PARAMETER] Node node [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^683^^^^^681^685^[ADD] findCalledFunctions ( node, changed ) ;^[METHOD] findCalledFunctions [TYPE] Set [PARAMETER] Node node [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return null;^684^^^^^681^685^[REPLACE] return changed;^[METHOD] findCalledFunctions [TYPE] Set [PARAMETER] Node node [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Preconditions.checkArgument ( null == true ) ;^692^^^^^690^705^[REPLACE] Preconditions.checkArgument ( changed != null ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( safeFnNode.getAncestor (  )   !=  Token.CALL )  {^694^^^^^690^705^[REPLACE] if  ( node.getType (  )  == Token.CALL )  {^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( child.getType (  )   !=  Token.NAME )  {^696^^^^^690^705^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = child .getParent (  )  ;^697^^^^^690^705^[REPLACE] String name = child.getString (  ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node child = safeFnNode.getFirstChild (  ) ;^695^^^^^690^705^[REPLACE] Node child = node.getFirstChild (  ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = safeFnNode.getParent (  ) ;^697^^^^^690^705^[REPLACE] String name = child.getString (  ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( child.getType (  )   ||  Token.NAME )  {^696^^^^^690^705^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     Node child = node.getFirstChild (  ) ;     if  (  ( child.getType (  )  )  ==  ( NAME )  )  {         String name = child.getString (  ) ;         changed.add ( name ) ;     } }^696^^^^^690^705^[REMOVE] ^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = safeFnNode.getString (  ) ;^697^^^^^690^705^[REPLACE] String name = child.getString (  ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node child = node.getString (  ) ;^695^^^^^690^705^[REPLACE] Node child = node.getFirstChild (  ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( Node c = node.getFirstChild (  ) ; c ==newCode; c = c.getNext (  )  )  {^702^^^^^690^705^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^702^703^704^^^690^705^[ADD] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { findCalledFunctions ( c, changed ) ; }^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^findCalledFunctions ( newCode, changed ) ;^703^^^^^690^705^[REPLACE] findCalledFunctions ( c, changed ) ;^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( Node c =  node.getFirstChild (  ) ; null !^702^^^^^690^705^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( Node c = safeFnNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findCalledFunctions [TYPE] void [PARAMETER] Node node String> changed [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , this ) ;^712^713^^^^711^724^[REPLACE] ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[METHOD] decomposeExpressions [TYPE] void [PARAMETER] String> fnNames [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  ExpressionDecomposer decomposer  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs.canRemove (  )  )  {^716^^^^^711^724^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] decomposeExpressions [TYPE] void [PARAMETER] String> fnNames [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  ExpressionDecomposer decomposer  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^718^^^^^711^724^[REPLACE] if  ( ref.requiresDecomposition )  {^[METHOD] decomposeExpressions [TYPE] void [PARAMETER] String> fnNames [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  ExpressionDecomposer decomposer  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fsCalled.setRemove ( false ) ;^719^^^^^711^724^[REPLACE] decomposer.maybeDecomposeExpression ( ref.callNode ) ;^[METHOD] decomposeExpressions [TYPE] void [PARAMETER] String> fnNames [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  ExpressionDecomposer decomposer  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { if  ( fs.canInline (  )  )  {^717^^^^^711^724^[REPLACE] for  ( Reference ref : fs.getReferences (  )  )  {^[METHOD] decomposeExpressions [TYPE] void [PARAMETER] String> fnNames [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  ExpressionDecomposer decomposer  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { resolveInlineConflictsForFunction ( fs ) ;^715^^^^^711^724^[REPLACE] for  ( FunctionState fs : fns.values (  )  )  {^[METHOD] decomposeExpressions [TYPE] void [PARAMETER] String> fnNames [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  ExpressionDecomposer decomposer  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( !fs.canRemove (  )  )  {^731^^^^^729^740^[REPLACE] if  ( fs.canRemove (  )  )  {^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^Function fn = fs.getFn (  ) ;Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkState ( fn != null ) ;verifyAllReferencesInlined ( fs ) ;^731^732^733^734^735^729^740^[ADD] if  ( fs.canRemove (  )  )  { Function fn = fs.getFn (  ) ; Preconditions.checkState ( fs.canInline (  )  ) ; Preconditions.checkState ( fn != null ) ; verifyAllReferencesInlined ( fs ) ;^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Function fn = fs.getModule (  ) ;^732^^^^^729^740^[REPLACE] Function fn = fs.getFn (  ) ;^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^732^733^^^^729^740^[ADD] Function fn = fs.getFn (  ) ; Preconditions.checkState ( fs.canInline (  )  ) ;^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { resolveInlineConflictsForFunction ( fs ) ;^730^^^^^729^740^[REPLACE] for  ( FunctionState fs : fns.values (  )  )  {^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^730^731^732^733^734^729^740^[ADD] for  ( FunctionState fs : fns.values (  )  )  { if  ( fs.canRemove (  )  )  { Function fn = fs.getFn (  ) ; Preconditions.checkState ( fs.canInline (  )  ) ; Preconditions.checkState ( fn != null ) ;^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Function fn = fs .setFn ( fn )  ;^732^^^^^729^740^[REPLACE] Function fn = fs.getFn (  ) ;^[METHOD] removeInlinedFunctions [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^748^^^^^746^752^[REPLACE] if  ( !ref.inlined )  {^[METHOD] verifyAllReferencesInlined [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return ;^749^^^^^746^752^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] verifyAllReferencesInlined [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^749^^^^^746^752^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] verifyAllReferencesInlined [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { if  ( fs.canInline (  )  )  {^747^^^^^746^752^[REPLACE] for  ( Reference ref : fs.getReferences (  )  )  {^[METHOD] verifyAllReferencesInlined [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^747^748^749^750^^746^752^[ADD] for  ( Reference ref : fs.getReferences (  )  )  { if  ( !ref.inlined )  { throw new IllegalStateException  (" ")  ; }^[METHOD] verifyAllReferencesInlined [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return  ( fn ;^769^^^^^768^770^[REPLACE] return  ( fn != null ) ;^[METHOD] hasExistingFunctionDefinition [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.referencesThis =  null;^773^^^^^772^774^[REPLACE] this.referencesThis = referencesThis;^[METHOD] setReferencesThis [TYPE] void [PARAMETER] boolean referencesThis [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fn.getFirstChild (  ) .getString (  ) ;^777^^^^^776^778^[REPLACE] return this.referencesThis;^[METHOD] getReferencesThis [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Iterator<Entry<String, FunctionState>> i;^781^^^^^780^788^[REPLACE] Iterator<Entry<Node, Reference>> i;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( entry.getValue (  ) .mode  &&  InliningMode.BLOCK )  {^784^^^^^780^788^[REPLACE] if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i.next (  ) ;^785^^^^^780^788^[REPLACE] i.remove (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REMOVE]^fs.setModule ( module ) ;^785^^^^^780^788^[REMOVE] ^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^[REPLACE] for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( entry.getValue (  ) .mode  !=  InliningMode.BLOCK )  {^784^^^^^780^788^[REPLACE] if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Entry<Node, Reference> entry = this.next (  ) ;^783^^^^^780^788^[REPLACE] Entry<Node, Reference> entry = i.next (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^783^^^^^780^788^[ADD] Entry<Node, Reference> entry = i.next (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^for  ( i  =  for  ( i ;^782^^^^^780^788^[REPLACE] for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Entry<Node, Reference> entry = i.hasNext (  ) ;^783^^^^^780^788^[REPLACE] Entry<Node, Reference> entry = i.next (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( r.mode  !=  InliningMode.BLOCK )  {^792^^^^^790^797^[REPLACE] if  ( r.mode == InliningMode.BLOCK )  {^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference r  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return false;^793^^^^^790^797^[REPLACE] return true;^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference r  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( FunctionState fs : fns.values (  )  )  { if  ( fs.canInline (  )  )  {^791^^^^^790^797^[REPLACE] for  ( Reference r : getReferencesInternal (  ) .values (  )  )  {^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference r  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return true;^796^^^^^790^797^[REPLACE] return false;^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference r  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^800^^^^^799^801^[REPLACE] return fn;^[METHOD] getFn [TYPE] InlineFunctions$Function [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Preconditions.checkState ( this.fn != null ) ;^804^^^^^803^806^[REPLACE] Preconditions.checkState ( this.fn == null ) ;^[METHOD] setFn [TYPE] void [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.fn =  null;^805^^^^^803^806^[REPLACE] this.fn = fn;^[METHOD] setFn [TYPE] void [PARAMETER] Function fn [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return  (var ! =  fn.getName (  ) ;^809^^^^^808^810^[REPLACE] return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[METHOD] getSafeFnNode [TYPE] Node [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.safeFnNode =  null;^813^^^^^812^814^[REPLACE] this.safeFnNode = safeFnNode;^[METHOD] setSafeFnNode [TYPE] void [PARAMETER] Node safeFnNode [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^817^^^^^816^818^[REPLACE] return inline;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.inline =  referencesThis;^821^^^^^820^828^[REPLACE] this.inline = inline;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( inline  &&  true )  {^822^^^^^820^828^[REPLACE] if  ( inline == false )  {^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^822^823^824^^826^820^828^[ADD] if  ( inline == false )  {  references = null; remove = false;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^references = true;^824^^^^^820^828^[REPLACE] references = null;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^remove = true;^826^^^^^820^828^[REPLACE] remove = false;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^824^^^^^820^828^[ADD] references = null;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^826^^^^^820^828^[ADD] remove = false;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^831^^^^^830^832^[REPLACE] return remove;^[METHOD] canRemove [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.remove =  inlined;^835^^^^^834^836^[REPLACE] this.remove = remove;^[METHOD] setRemove [TYPE] void [PARAMETER] boolean remove [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^839^^^^^838^840^[REPLACE] return inlineDirectly;^[METHOD] canInlineDirectly [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.inlineDirectly =  null;^843^^^^^842^844^[REPLACE] this.inlineDirectly = directReplacement;^[METHOD] inlineDirectly [TYPE] void [PARAMETER] boolean directReplacement [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^843^^^^^842^844^[ADD] this.inlineDirectly = directReplacement;^[METHOD] inlineDirectly [TYPE] void [PARAMETER] boolean directReplacement [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return  ( references != null && !references.get (  )  ) ;^847^^^^^846^848^[REPLACE] return  ( references != null && !references.isEmpty (  )  ) ;^[METHOD] hasReferences [TYPE] boolean [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( references != true )  {^851^^^^^850^855^[REPLACE] if  ( references == null )  {^[METHOD] getReferencesInternal [TYPE] Map [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return Collections.emptySet (  ) ;^852^^^^^850^855^[REPLACE] return Collections.emptyMap (  ) ;^[METHOD] getReferencesInternal [TYPE] Map [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fn.getFirstChild (  ) .getString (  ) ;^854^^^^^850^855^[REPLACE] return references;^[METHOD] getReferencesInternal [TYPE] Map [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( references != true )  {^858^^^^^857^862^[REPLACE] if  ( references == null )  {^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^858^859^860^^^857^862^[ADD] if  ( references == null )  { references = Maps.newHashMap (  ) ; }^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^references  =  references ;^859^^^^^857^862^[REPLACE] references = Maps.newHashMap (  ) ;^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^references ;^859^^^^^857^862^[REPLACE] references = Maps.newHashMap (  ) ;^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return  ( references != null && !references.isEmpty (  )  ) ;^861^^^^^857^862^[REPLACE] references.put ( ref.callNode, ref ) ;^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^return  ( references != null && !references.isEmpty (  )  ) ;^861^^^^^857^862^[REMOVE] ^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Reference ref  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return getReferencesInternal (  )  .get ( null )  ;^865^^^^^864^866^[REPLACE] return getReferencesInternal (  ) .values (  ) ;^[METHOD] getReferences [TYPE] Collection [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return getReferencesInternal (  ) .get ( safeFnNode ) ;^869^^^^^868^870^[REPLACE] return getReferencesInternal (  ) .get ( n ) ;^[METHOD] getReference [TYPE] InlineFunctions$Reference [PARAMETER] Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( namesToAlias != null )  {^873^^^^^872^877^[REPLACE] if  ( namesToAlias == null )  {^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^873^874^875^^^872^877^[ADD] if  ( namesToAlias == null )  { return Collections.emptySet (  ) ; }^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return Collections .emptyMap (  )  ;^874^^^^^872^877^[REPLACE] return Collections.emptySet (  ) ;^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return Collections.emptyMap (  ) ;^874^^^^^872^877^[REPLACE] return Collections.emptySet (  ) ;^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return   namesToAlias   ;^876^^^^^872^877^[REPLACE] return Collections.unmodifiableSet ( namesToAlias ) ;^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^namesToAlias =  this;^880^^^^^879^881^[REPLACE] namesToAlias = names;^[METHOD] setNamesToAlias [TYPE] void [PARAMETER] String> names [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^this.module =  null;^884^^^^^883^885^[REPLACE] this.module = module;^[METHOD] setModule [TYPE] void [PARAMETER] JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^888^^^^^887^889^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fn.getFirstChild (  ) .isExported (  ) ;^913^^^^^912^914^[REPLACE] return fn.getFirstChild (  ) .getString (  ) ;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^917^^^^^916^918^[REPLACE] return fn;^[METHOD] getFunctionNode [TYPE] Node [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeUtil.removeChild ( fn.getString (  ) , fn ) ;^921^^^^^920^922^[REPLACE] NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeUtil.removeChild ( fn .getString (  )  , fn ) ;^921^^^^^920^922^[REPLACE] NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return var.getFirstChild (  )  .getParent (  )  ;^934^^^^^933^935^[REPLACE] return var.getFirstChild (  ) .getString (  ) ;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return var.isExported (  ) .getFirstChild (  ) ;^938^^^^^937^939^[REPLACE] return var.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] getFunctionNode [TYPE] Node [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^var.getParent (  )  ;^942^^^^^941^943^[REPLACE] NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeUtil.removeChild ( var.getString (  ) , var ) ;^942^^^^^941^943^[REPLACE] NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^959^^^^^958^960^[REPLACE] return fakeName;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return fs;^963^^^^^962^964^[REPLACE] return fn;^[METHOD] getFunctionNode [TYPE] Node [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^private int callsSeen ;^150^^^^^^^[REPLACE] private int callsSeen = 0;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatement ( parent ) ;^157^158^159^^^153^160^[REPLACE] return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[REPLACE]^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ) {^163^164^^^^162^171^[REPLACE] if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[ADD]^^163^164^165^166^^162^171^[ADD] if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[REPLACE]^findNamedFunctions ( t, n, n ) ;^165^^^^^162^171^[REPLACE] findNamedFunctions ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[REPLACE]^if  ( !NodeUtil.isStatement ( n )  )  {^168^^^^^162^171^[REPLACE] if  ( inlineAnonymousFunctionExpressions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[ADD]^^168^169^170^^^162^171^[ADD] if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[REPLACE]^findAnonymousFunctionExpressions ( t, parent ) ;^169^^^^^162^171^[REPLACE] findAnonymousFunctionExpressions ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[ADD]^^169^^^^^162^171^[ADD] findAnonymousFunctionExpressions ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  parent 
[REPLACE]^if  ( !NodeUtil.isStatement ( parent )  )  {^174^^^^^173^207^[REPLACE] if  ( !NodeUtil.isStatement ( n )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( parent.hasOneChild (  )  )  {^185^^^^^173^207^[REPLACE] if  ( n.hasOneChild (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( nameNode.getType (  )  == Token.NAME ) {^188^189^^^^173^207^[REPLACE] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t.inGlobalScope (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ;^190^^^^^188^191^[REMOVE] ^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^187^^^^^173^207^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (  nameNode .hasOneChild (  )  || nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^207^[REPLACE] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name.isEmpty (  )  )  {^202^^^^^173^207^[REPLACE] if  ( !name.isEmpty (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[ADD]^^202^203^204^^^173^207^[ADD] if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( fn, t.inGlobalScope (  )  ) ;^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Function fn = parentew NamedFunction ( n ) ;^200^^^^^173^207^[REPLACE] Function fn = new NamedFunction ( n ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Function fn = new NamedFunction ( n ) ;^201^^^^^173^207^[REPLACE] String name = fn.getName (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( fnNode.getFirstChild (  ) .getType (  )   ||  Token.FUNCTION )  {^221^^^^^215^238^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^^225^226^227^^^215^238^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^fnNode =  n;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^^226^227^^^^215^238^[ADD] fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Node fnIdentifingNode = fnNode .hasOneChild (  )^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   &&  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Node fnIdentifingNode = fnNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^fnNode =  fnIdentifingNode.getFirstChild (  ) ;^222^^^^^215^238^[REPLACE] fnNode = n.getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^}  else {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^}   fnNode = fnIdentifingNode;^223^224^225^226^227^215^238^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^fnNode = fnIdentifingNode;^225^226^227^^^215^238^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( fnIdentifing       &&  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  (n == null )  {^231^^^^^215^238^[REPLACE] if  ( fnNode != null )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Function fn = new AnonymousFunction ( n, callsSeen++ ) ;^232^^^^^215^238^[REPLACE] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^^222^^^^^215^238^[ADD] fnNode = n.getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Node fnNode = this;^220^^^^^215^238^[REPLACE] Node fnNode = null;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^^232^^^^^215^238^[ADD] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^this.anonFunctionMap = anonFns; ;^342^^^^^339^345^[REPLACE] this.functionMap = fns;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] CallVisitor   [TYPE]  CallVisitorCallback callback  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  [TYPE]  boolean false  true 
[REPLACE]^this.functionMap = fns; ;^343^^^^^339^345^[REPLACE] this.anonFunctionMap = anonFns;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] CallVisitor   [TYPE]  CallVisitorCallback callback  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  [TYPE]  boolean false  true 
[REPLACE]^this.callback =  null;^344^^^^^339^345^[REPLACE] this.callback = callback;^[METHOD] <init> [TYPE] InlineFunctions$CallVisitorCallback) [PARAMETER] FunctionState> fns String> anonFns CallVisitorCallback callback [CLASS] CallVisitor   [TYPE]  CallVisitorCallback callback  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  [TYPE]  boolean false  true 
[REPLACE]^if  ( child.getType (  )   &&  Token.NAME )  {^355^^^^^347^378^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^name = child.getString (  ) ;name = anonFunctionMap.get ( child ) ;^355^356^357^358^^347^378^[ADD] if  ( child.getType (  )  == Token.NAME )  { name = child.getString (  ) ; } else if  ( child.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( child.getType (  )   &&  Token.FUNCTION )  {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}   Node fnIdentifingNode = child.getFirstChild (  ) ;name = fnIdentifingNode.getString (  ) ;^359^360^361^362^363^347^378^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( parent .getString (  )    &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  else {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REMOVE]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( NAME )  )  {     name = fnIdentifingNode.getString (  ) ; }else     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         name = anonFunctionMap.get ( fnIdentifingNode ) ;     }^364^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name = anonFunctionMap.get ( child ) ; ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^365^366^^^^347^378^[ADD] name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  null.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  parent.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^363^364^365^366^^347^378^[ADD] name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = fnIdentifingNode.getFirstChild (  ) ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^361^362^363^364^365^347^378^[ADD] Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( parent.getType (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name = anonFunctionMap.get ( fnIdentifingNode ) ; ;^358^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  else {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = fnIdentifingNode .getString (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^name = fnIdentifingNode.getString (  ) ;name = anonFunctionMap.get ( fnIdentifingNode ) ;^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if  ( fnIdentifingNode .getString (  )    ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = child.getString (  ) ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  fnIdentifingNode.getString (  ) ;^356^^^^^347^378^[REPLACE] name = child.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( child.getType (  )   !=  Token.FUNCTION )  {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}   name = anonFunctionMap.get ( child ) ;Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^357^358^359^360^361^347^378^[ADD] else if  ( child.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( child ) ; } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}   Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;name = fnIdentifingNode.getString (  ) ;^359^360^361^362^363^347^378^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fnIdentifing       !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}   name = anonFunctionMap.get ( fnIdentifingNode ) ;^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = child .getString (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   &&  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if  ( parent.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = fnIdentifingNode.getString (  ) ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( parent )  )  {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REMOVE]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( NAME )  )  {     name = fnIdentifingNode.getString (  ) ; }else     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         name = anonFunctionMap.get ( fnIdentifingNode ) ;     }^359^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   ||  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REMOVE]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {     name = anonFunctionMap.get ( fnIdentifingNode ) ; }^362^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( name == null )  {^369^^^^^347^378^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fs == null )  {^372^^^^^347^378^[REPLACE] if  ( fs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^callback.visitCallSite ( t, n, n, fs ) ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^FunctionState fs = function  name   ;^370^^^^^347^378^[REPLACE] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^370^^^^^347^378^[ADD] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^372^373^374^^^347^378^[ADD] if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^356^^^^^347^378^[ADD] name = child.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node child = parent.getFirstChild (  ) ;^351^^^^^347^378^[REPLACE] Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^String name = true;^352^^^^^347^378^[REPLACE] String name = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^String name = null;^370^^^^^347^378^[REPLACE] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^super ( fns, anonFns, this ) ;^391^^^^^388^393^[REPLACE] super ( fns, anonFns, null ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionState> fns String> anonFns [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  Map anonFns  fns 
[REPLACE]^this.callback ;^392^^^^^388^393^[REPLACE] this.callback = this;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionState> fns String> anonFns [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  Map anonFns  fns 
[REPLACE]^super .CallVisitor ( null , null , null )  ;^397^^^^^396^401^[REPLACE] super.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )   ||  Token.NAME )  {^398^^^^^396^401^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^checkNameUsage ( t, n, parent ) ;^398^399^400^^^396^401^[ADD] if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ;^399^^^^^396^401^[REPLACE] checkNameUsage ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeAddReference ( t, fs, parent, t.getModule (  )  ) ;^405^^^^^403^406^[REPLACE] maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^405^^^^^403^406^[REPLACE] maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[ADD]^^405^^^^^403^406^[ADD] maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^if  ( !fs .setInline ( referenceAdded )   )  {^410^^^^^408^433^[REPLACE] if  ( !fs.canInline (  )  )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^return;^410^411^412^^^408^433^[ADD] if  ( !fs.canInline (  )  )  { return; }^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^return false;^411^^^^^408^433^[REPLACE] return;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^boolean referenceAdded = true;^414^^^^^408^433^[REPLACE] boolean referenceAdded = false;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^^414^^^^^408^433^[ADD] boolean referenceAdded = false;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^InliningMode mode = fs.canInline (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^408^433^[REPLACE] InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^417^418^^^^408^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^if  ( referenceAdded ) {^419^420^^^^408^433^[REPLACE] if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^^419^420^^^423^408^433^[ADD] if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  { mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^mode ;^423^^^^^408^433^[REPLACE] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^408^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^mode  =  mode ;^423^^^^^408^433^[REPLACE] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^428^^^^^408^433^[REPLACE] if  ( !referenceAdded )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^fs.setInline ( true ) ;^431^^^^^408^433^[REPLACE] fs.setRemove ( false ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REMOVE]^checkNameUsage ( t, n, parent ) ;^431^^^^^408^433^[REMOVE] ^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs .setInline ( true )  .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^[REPLACE] CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] FindCandidatesReferences   [TYPE]  CanInlineResult result  [TYPE]  boolean decompose  false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^if  ( result  ==  CanInlineResult.NO )  {^441^^^^^435^450^[REPLACE] if  ( result != CanInlineResult.NO )  {^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] FindCandidatesReferences   [TYPE]  CanInlineResult result  [TYPE]  boolean decompose  false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^return false;^446^^^^^435^450^[REPLACE] return true;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] FindCandidatesReferences   [TYPE]  CanInlineResult result  [TYPE]  boolean decompose  false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^boolean decompose = ( result  !=  CanInlineResult.AFTER_DECOMPOSITION ) ;^443^444^^^^435^450^[REPLACE] boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] FindCandidatesReferences   [TYPE]  CanInlineResult result  [TYPE]  boolean decompose  false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^boolean decompose = ( result  ||  CanInlineResult.AFTER_DECOMPOSITION ) ;^443^444^^^^435^450^[REPLACE] boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] FindCandidatesReferences   [TYPE]  CanInlineResult result  [TYPE]  boolean decompose  false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^return true;^449^^^^^435^450^[REPLACE] return false;^[METHOD] maybeAddReferenceUsingMode [TYPE] boolean [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [CLASS] FindCandidatesReferences   [TYPE]  CanInlineResult result  [TYPE]  boolean decompose  false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^Preconditions.checkState ( n.getType (  )   !=  Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( n.getAncestor (  )  == Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.VAR && parent.getType (  )  == Token.FUNCTION )  {^458^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return false;^461^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^464^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[ADD]^^464^465^466^467^^455^508^[ADD] if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {  return; }^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return false;^466^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isGet ( parent ) || n == parent.getFirstChild (  ) || n.getType (  ) .getType (  )  == Token.STRING || n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^455^508^[REPLACE] if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( gramps.getAncestor (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return false;^485^^^^^477^487^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Node gramps = n.getAncestor ( 4 ) ;^481^^^^^477^487^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( gramps.getType (  )  == Token.CALL ) {^482^483^^^^455^508^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return false;^485^^^^^482^486^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return false;^485^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Node gramps = n.getAncestor ( 4 ) ;^481^^^^^455^508^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^String parentame = n.getString (  ) ;^490^^^^^455^508^[REPLACE] String name = n.getString (  ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^491^^^^^455^508^[REPLACE] FunctionState fs = fns.get ( name ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[ADD]^^491^^^^^455^508^[ADD] FunctionState fs = fns.get ( name ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( fs != true )  {^492^^^^^455^508^[REPLACE] if  ( fs == null )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return false;^493^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN ) {^497^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^fs.setRemove ( true ) ;^506^^^^^497^507^[REPLACE] fs.setRemove ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^fs.setRemove ( true ) ;^501^^^^^455^508^[REPLACE] fs.setInline ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^private  FunctionInjector injector;^515^^^^^^^[REPLACE] private final FunctionInjector injector;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^this.injector =  null;^518^^^^^517^519^[REPLACE] this.injector = injector;^[METHOD] <init> [TYPE] FunctionInjector) [PARAMETER] FunctionInjector injector [CLASS] Inline   [TYPE]  FunctionInjector injector  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( fs.getSafeFnNode (  )  ) ;^523^^^^^521^537^[REPLACE] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^if  ( ref != null )  {^524^^^^^521^537^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^if  ( ref == null )  {^530^^^^^521^537^[REPLACE] if  ( ref != null )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^ref.inlined = false;^534^^^^^521^537^[REPLACE] ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^Reference ref = fs.getReference ( parent ) ;^525^^^^^521^537^[REPLACE] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[ADD]^^534^^^^^521^537^[ADD] ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^Function fn = fs.getFn (  ) ;^525^^^^^521^537^[REPLACE] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[ADD]^^525^^^^^521^537^[ADD] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^Function fn = fs.getSafeFnNode (  ) ;^544^^^^^542^551^[REPLACE] Function fn = fs.getFn (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[ADD]^String fnName = fn.getName (  ) ;^544^545^^^^542^551^[ADD] Function fn = fs.getFn (  ) ; String fnName = fn.getName (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^Function fn = fs.getFn (  ) ;^545^^^^^542^551^[REPLACE] String fnName = fn.getName (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnNode = fs.getFn (  ) ;^546^^^^^542^551^[REPLACE] Node fnNode = fs.getSafeFnNode (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[ADD]^^546^^^^^542^551^[ADD] Node fnNode = fs.getSafeFnNode (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnNode = fs.getSafeFnNode (  ) ;^548^^^^^542^551^[REPLACE] Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getCompiler (  ) .addToDebugLog (  ) ;^549^^^^^542^551^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^549^^^^^542^551^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getCompiler (  ) .addToDebugLog (fnName + fn.getName (  )  ) ;^550^^^^^542^551^[REPLACE] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[ADD]^^550^^^^^542^551^[ADD] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^t.getCompiler (  ) .reportCodeChange (  ) ;^550^^^^^542^551^[REPLACE] t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] Inline   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Function fn ;^758^^^^^^^[REPLACE] private Function fn = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Node safeFnNode ;^759^^^^^^^[REPLACE] private Node safeFnNode = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean inline ;^760^^^^^^^[REPLACE] private boolean inline = true;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean remove  = null ;^761^^^^^^^[REPLACE] private boolean remove = true;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean inlineDirectly  = null ;^762^^^^^^^[REPLACE] private boolean inlineDirectly = false;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean referencesThis ;^763^^^^^^^[REPLACE] private boolean referencesThis = false;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Map<Node, Reference> references  = null ;^764^^^^^^^[REPLACE] private Map<Node, Reference> references = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private JSModule module  = null ;^765^^^^^^^[REPLACE] private JSModule module = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Set<String> namesToAlias  = null ;^766^^^^^^^[REPLACE] private Set<String> namesToAlias = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^return true ;^769^^^^^768^770^[REPLACE] return  ( fn != null ) ;^[METHOD] hasExistingFunctionDefinition [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.referencesThis =  remove;^773^^^^^772^774^[REPLACE] this.referencesThis = referencesThis;^[METHOD] setReferencesThis [TYPE] void [PARAMETER] boolean referencesThis [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return remove;^777^^^^^776^778^[REPLACE] return this.referencesThis;^[METHOD] getReferencesThis [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^Entry<Node, Reference> entry = i.next (  ) ;^781^^^^^780^788^[REPLACE] Iterator<Entry<Node, Reference>> i;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( entry.getValue (  ) .mode  &&  InliningMode.BLOCK )  {^784^^^^^780^788^[REPLACE] if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^i.next (  ) ;^785^^^^^780^788^[REPLACE] i.remove (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^for  ( true = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^[REPLACE] for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( entry.getValue (  ) .mode  !=  InliningMode.BLOCK )  {^784^^^^^780^788^[REPLACE] if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^Entry<Node, Reference> entry = null.next (  ) ;^783^^^^^780^788^[REPLACE] Entry<Node, Reference> entry = i.next (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^for  ( i ;^782^^^^^780^788^[REPLACE] for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^Entry<Node, Reference> entry = i .hasNext (  )  ;^783^^^^^780^788^[REPLACE] Entry<Node, Reference> entry = i.next (  ) ;^[METHOD] removeBlockInliningReferences [TYPE] void [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  Entry entry  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( r.mode  !=  InliningMode.BLOCK )  {^792^^^^^790^797^[REPLACE] if  ( r.mode == InliningMode.BLOCK )  {^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference r  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[ADD]^^792^793^794^^^790^797^[ADD] if  ( r.mode == InliningMode.BLOCK )  { return true; }^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference r  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return false;^793^^^^^790^797^[REPLACE] return true;^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference r  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^for  ( Reference r : getReferencesInternal (  ) .values (  )  )  { if  ( r.mode == InliningMode.BLOCK )  {^791^^^^^790^797^[REPLACE] for  ( Reference r : getReferencesInternal (  ) .values (  )  )  {^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference r  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[ADD]^^791^792^793^794^^790^797^[ADD] for  ( Reference r : getReferencesInternal (  ) .values (  )  )  { if  ( r.mode == InliningMode.BLOCK )  { return true; }^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference r  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return true;^796^^^^^790^797^[REPLACE] return false;^[METHOD] hasBlockInliningReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference r  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return this.referencesThis;^800^^^^^799^801^[REPLACE] return fn;^[METHOD] getFn [TYPE] InlineFunctions$Function [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^Preconditions.checkState ( this.fn != null ) ;^804^^^^^803^806^[REPLACE] Preconditions.checkState ( this.fn == null ) ;^[METHOD] setFn [TYPE] void [PARAMETER] Function fn [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.fn =  null;^805^^^^^803^806^[REPLACE] this.fn = fn;^[METHOD] setFn [TYPE] void [PARAMETER] Function fn [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return  ( safeFnNode ;^809^^^^^808^810^[REPLACE] return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[METHOD] getSafeFnNode [TYPE] Node [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.safeFnNode =  null;^813^^^^^812^814^[REPLACE] this.safeFnNode = safeFnNode;^[METHOD] setSafeFnNode [TYPE] void [PARAMETER] Node safeFnNode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return this.referencesThis;^817^^^^^816^818^[REPLACE] return inline;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.inline =  true;^821^^^^^820^828^[REPLACE] this.inline = inline;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[ADD]^^821^^^^^820^828^[ADD] this.inline = inline;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( inline  || true )  {^822^^^^^820^828^[REPLACE] if  ( inline == false )  {^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^references = true;^824^^^^^820^828^[REPLACE] references = null;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^remove = true;^826^^^^^820^828^[REPLACE] remove = false;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^references = this;^824^^^^^820^828^[REPLACE] references = null;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[ADD]^^824^^^^^820^828^[ADD] references = null;^[METHOD] setInline [TYPE] void [PARAMETER] boolean inline [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return this.referencesThis;^831^^^^^830^832^[REPLACE] return remove;^[METHOD] canRemove [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.remove =  referencesThis;^835^^^^^834^836^[REPLACE] this.remove = remove;^[METHOD] setRemove [TYPE] void [PARAMETER] boolean remove [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return this.referencesThis;^839^^^^^838^840^[REPLACE] return inlineDirectly;^[METHOD] canInlineDirectly [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.inlineDirectly =  true;^843^^^^^842^844^[REPLACE] this.inlineDirectly = directReplacement;^[METHOD] inlineDirectly [TYPE] void [PARAMETER] boolean directReplacement [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return  ( references != null && !references.get (  )  ) ;^847^^^^^846^848^[REPLACE] return  ( references != null && !references.isEmpty (  )  ) ;^[METHOD] hasReferences [TYPE] boolean [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( references != null )  {^851^^^^^850^855^[REPLACE] if  ( references == null )  {^[METHOD] getReferencesInternal [TYPE] Map [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return Collections.emptySet (  ) ;^852^^^^^850^855^[REPLACE] return Collections.emptyMap (  ) ;^[METHOD] getReferencesInternal [TYPE] Map [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return this.referencesThis;^854^^^^^850^855^[REPLACE] return references;^[METHOD] getReferencesInternal [TYPE] Map [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( references != this  )  {^858^^^^^857^862^[REPLACE] if  ( references == null )  {^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference ref  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^references ;^859^^^^^857^862^[REPLACE] references = Maps.newHashMap (  ) ;^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference ref  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^references  =  references ;^859^^^^^857^862^[REPLACE] references = Maps.newHashMap (  ) ;^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference ref  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^references = Maps.newHashMap (  ) ;^861^^^^^857^862^[REPLACE] references.put ( ref.callNode, ref ) ;^[METHOD] addReference [TYPE] void [PARAMETER] Reference ref [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Reference ref  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return getReferencesInternal (  ) .get (  ) ;^865^^^^^864^866^[REPLACE] return getReferencesInternal (  ) .values (  ) ;^[METHOD] getReferences [TYPE] Collection [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return getReferencesInternal (  ) .get ( safeFnNode ) ;^869^^^^^868^870^[REPLACE] return getReferencesInternal (  ) .get ( n ) ;^[METHOD] getReference [TYPE] InlineFunctions$Reference [PARAMETER] Node n [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^if  ( namesToAlias != null )  {^873^^^^^872^877^[REPLACE] if  ( namesToAlias == null )  {^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return Collections .emptyMap (  )  ;^874^^^^^872^877^[REPLACE] return Collections.emptySet (  ) ;^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return Collections.emptyMap (  ) ;^874^^^^^872^877^[REPLACE] return Collections.emptySet (  ) ;^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return Collections .emptySet (  )  ;^876^^^^^872^877^[REPLACE] return Collections.unmodifiableSet ( namesToAlias ) ;^[METHOD] getNamesToAlias [TYPE] Set [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^namesToAlias =  1;^880^^^^^879^881^[REPLACE] namesToAlias = names;^[METHOD] setNamesToAlias [TYPE] void [PARAMETER] String> names [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set names  namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.module =  null;^884^^^^^883^885^[REPLACE] this.module = module;^[METHOD] setModule [TYPE] void [PARAMETER] JSModule module [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set names  namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^return this.referencesThis;^888^^^^^887^889^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set names  namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^private  Node fn;^906^^^^^^^[REPLACE] private final Node fn;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NamedFunction   [TYPE]  Function fn  [TYPE]  boolean directReplacement  false  inline  inlineDirectly  referencesThis  remove  true  [TYPE]  Set names  namesToAlias  [TYPE]  Node n  safeFnNode  [TYPE]  JSModule module  [TYPE]  Map references 
[REPLACE]^this.fn =  null;^909^^^^^908^910^[REPLACE] this.fn = fn;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node fn [CLASS] NamedFunction   [TYPE]  Node fn  [TYPE]  boolean false  true 
[REPLACE]^return fn .getParent (  )  .getString (  ) ;^913^^^^^912^914^[REPLACE] return fn.getFirstChild (  ) .getString (  ) ;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] NamedFunction   [TYPE]  Node fn  [TYPE]  boolean false  true 
[REPLACE]^fn.getParent (  )  ;^921^^^^^920^922^[REPLACE] NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NamedFunction   [TYPE]  Node fn  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.removeChild ( fn.getFirstChild (  ) , fn ) ;^921^^^^^920^922^[REPLACE] NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NamedFunction   [TYPE]  Node fn  [TYPE]  boolean false  true 
[REPLACE]^this.var =  null;^930^^^^^929^931^[REPLACE] this.var = var;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node var [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[ADD]^^930^^^^^929^931^[ADD] this.var = var;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node var [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^return var.getFirstChild (  ) .getFirstChild (  ) ;^934^^^^^933^935^[REPLACE] return var.getFirstChild (  ) .getString (  ) ;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^return var.getFirstChild (  ) .getString (  ) ;^938^^^^^937^939^[REPLACE] return var.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] getFunctionNode [TYPE] Node [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^var.getParent (  )  ;^942^^^^^941^943^[REPLACE] NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[REMOVE]^return var.getFirstChild (  ) .getFirstChild (  ) ;^942^^^^^941^943^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.removeChild ( var.getFirstChild (  ) , var ) ;^942^^^^^941^943^[REPLACE] NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[ADD]^^942^^^^^941^943^[ADD] NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^private  Node fn;^948^^^^^^^[REPLACE] private final Node fn;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnonymousFunction   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^private  String fakeName;^949^^^^^^^[REPLACE] private final String fakeName;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnonymousFunction   [TYPE]  Node var  [TYPE]  boolean false  true 
[REPLACE]^this.fn =  null;^952^^^^^951^956^[REPLACE] this.fn = fn;^[METHOD] <init> [TYPE] Node,int) [PARAMETER] Node fn int index [CLASS] AnonymousFunction   [TYPE]  String fakeName  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Node fn 
[REPLACE]^this.fakeName =  String.valueOf ( null ) ;^955^^^^^951^956^[REPLACE] this.fakeName = String.valueOf ( index ) ;^[METHOD] <init> [TYPE] Node,int) [PARAMETER] Node fn int index [CLASS] AnonymousFunction   [TYPE]  String fakeName  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Node fn 
[ADD]^^955^^^^^951^956^[ADD] this.fakeName = String.valueOf ( index ) ;^[METHOD] <init> [TYPE] Node,int) [PARAMETER] Node fn int index [CLASS] AnonymousFunction   [TYPE]  String fakeName  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Node fn 
[REPLACE]^return fn;^959^^^^^958^960^[REPLACE] return fakeName;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] AnonymousFunction   [TYPE]  Node fn  [TYPE]  String fakeName  [TYPE]  boolean false  true 
[REPLACE]^return fakeName;^963^^^^^962^964^[REPLACE] return fn;^[METHOD] getFunctionNode [TYPE] Node [PARAMETER] [CLASS] AnonymousFunction   [TYPE]  Node fn  [TYPE]  String fakeName  [TYPE]  boolean false  true 
[REPLACE]^boolean requiresDecomposition;^972^^^^^^^[REPLACE] final boolean requiresDecomposition;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] Reference   [TYPE]  Node fn  [TYPE]  String fakeName  [TYPE]  boolean false  true 
[REPLACE]^boolean inlined ;^973^^^^^^^[REPLACE] boolean inlined = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] Reference   [TYPE]  Node fn  [TYPE]  String fakeName  [TYPE]  boolean false  true 
[REPLACE]^this.requiresDecomposition =  true;^977^^^^^974^978^[REPLACE] this.requiresDecomposition = decompose;^[METHOD] <init> [TYPE] InliningMode,boolean) [PARAMETER] Node callNode JSModule module InliningMode mode boolean decompose [CLASS] Reference   [TYPE]  JSModule module  [TYPE]  boolean decompose  false  inlined  requiresDecomposition  true  [TYPE]  InliningMode mode  [TYPE]  Node callNode 
