[REPLACE]^private static final Logger logger  = null ;^56^57^^^^56^57^[REPLACE] private static final Logger logger = Logger.getLogger ( InlineGetters.class.getName (  )  ) ;^ [CLASS] InlineGetters InlineTrivialAccessors 1  
[REPLACE]^final MethodCompilerPass.SignatureStore DUMMY_SIGNATURE_STORE = new MethodCompilerPass.SignatureStore (  )  {^282^283^^^^282^296^[REPLACE] static final MethodCompilerPass.SignatureStore DUMMY_SIGNATURE_STORE = new MethodCompilerPass.SignatureStore (  )  {^ [CLASS] InlineGetters InlineTrivialAccessors 1  
[REPLACE]^nonMethodProperties.contains ( callName )  )  { return;^60^^^^^59^61^[REPLACE] super ( compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Logger logger 
[ADD]^^60^^^^^59^61^[ADD] super ( compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Logger logger 
[REPLACE]^if  (  nonMethodProperties.contains ( callName )  )  {^71^72^^^^70^109^[REPLACE] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^71^72^73^74^^70^109^[ADD] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return false;^73^^^^^71^74^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return false;^73^^^^^70^109^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^Collection<Node> definitions =   callName   ;^76^^^^^70^109^[REPLACE] Collection<Node> definitions = methodDefinitions.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^76^^^^^70^109^[ADD] Collection<Node> definitions = methodDefinitions.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  (  definitions.size (  )  - 3 == 0 )  {^77^^^^^70^109^[REPLACE] if  ( definitions == null || definitions.size (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return false;^78^^^^^70^109^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^Node firstDefinition = null.iterator (  ) .next (  ) ;^83^^^^^70^109^[REPLACE] Node firstDefinition = definitions.iterator (  ) .next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( definitions.size (  )  /  2 == 1 ) {^86^^^^^70^109^[REPLACE] if  ( definitions.size (  )  == 1 || allDefinitionsEquivalent ( definitions )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger .getLogger ( callName )  ;^107^^^^^86^108^[REPLACE] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^107^^^^^86^108^[ADD] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( argsMayHaveSideEffects ( callNode )  )  {^88^^^^^70^109^[REPLACE] if  ( !argsMayHaveSideEffects ( callNode )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  (parent == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining empty method: "  <  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineEmptyMethod ( t, parent, returned ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( isPropertyTree ( parent )  )  {^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  else {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  >  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, returned, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  &&  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^!NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ;^93^^^^^70^109^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( firstDefinition, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^94^^^^^70^109^[ADD] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  >=  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^97^^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, callNode, parent ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( definitions == null || definitions.size (  )  == 0 )  {^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  ==  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( returned, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  <  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( firstDefinition, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( isEmptyMethod ( firstDefinition )  &&   callNode.getFirstChild (  )   )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining empty method: "  ^  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^Node returned = returnedExpression ( returned ) ;^90^^^^^70^109^[REPLACE] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( returned == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining empty method: "  &&  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^!NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ;^102^^^^^100^104^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  &&  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^98^^^^^95^99^[ADD] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( parent.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^}   logger.fine ( "Inlining constant accessor: " + callName ) ;inlineConstReturn ( parent, callNode, returned ) ;^95^96^97^98^99^70^109^[ADD] else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  <=  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, parent, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  ||  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  !=  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( parent, parent, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^}   logger.fine ( "Inlining empty method: " + callName ) ;inlineEmptyMethod ( t, parent, callNode ) ;^100^101^102^103^104^70^109^[ADD] else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger .getLogger ( callName )  ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^103^^^^^100^104^[ADD] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( argsMayHaveSideEffects ( returned )  )  {^88^^^^^70^109^[REPLACE] if  ( !argsMayHaveSideEffects ( callNode )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^88^89^90^91^^70^109^[ADD] if  ( !argsMayHaveSideEffects ( callNode )  )  {  Node returned = returnedExpression ( firstDefinition ) ; if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  ) {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining empty method: "  ||  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineEmptyMethod ( t, returned, callNode ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^!NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ;^97^^^^^95^99^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  >  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^93^94^^^^70^109^[ADD] logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^92^93^94^95^^70^109^[ADD] if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  >=  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^93^^^^^70^109^[ADD] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^97^98^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( returned, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  else {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^90^^^^^70^109^[ADD] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^102^^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  ) {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  ==  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  ||  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( parent, callNode, firstDefinition ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, callNode, firstDefinition ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  <=  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  |  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining empty method: "  ==  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^102^103^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, callNode, returned ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^replaceThis ( leftChild, replacement ) ;^103^^^^^100^104^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return DUMMY_SIGNATURE_STORE;^114^^^^^113^115^[REPLACE] return new InlineTrivialAccessors (  ) ;^[METHOD] getActingCallback [TYPE] Callback [PARAMETER] [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  Logger logger  [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true 
[REPLACE]^if  ( expectedGetprop.getType (  )   ==  Token.GETPROP )  {^123^^^^^122^138^[REPLACE] if  ( expectedGetprop.getType (  )  != Token.GETPROP )  {^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[ADD]^return false;^123^124^125^^^122^138^[ADD] if  ( expectedGetprop.getType (  )  != Token.GETPROP )  { return false; }^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^124^^^^^122^138^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^Node leftChild = retVal.getLastChild (  ) ;^127^^^^^122^138^[REPLACE] Node leftChild = expectedGetprop.getFirstChild (  ) ;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^if  (  !isPropertyTree ( leftChild )  )  {^128^129^^^^122^138^[REPLACE] if  ( leftChild.getType (  )  != Token.THIS && !isPropertyTree ( leftChild )  )  {^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^130^^^^^122^138^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^Node retVal = retVal.getNext (  ) ;^133^^^^^122^138^[REPLACE] Node retVal = leftChild.getNext (  ) ;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[ADD]^^133^^^^^122^138^[ADD] Node retVal = leftChild.getNext (  ) ;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^if  ( NodeUtil.getStringValue ( retVal )  != this )  {^134^^^^^122^138^[REPLACE] if  ( NodeUtil.getStringValue ( retVal )  == null )  {^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^135^^^^^122^138^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return false;^137^^^^^122^138^[REPLACE] return true;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^Node leftChild = replacement.getLastChild (  ) ;^145^^^^^144^151^[REPLACE] Node leftChild = expectedGetprop.getFirstChild (  ) ;^[METHOD] replaceThis [TYPE] void [PARAMETER] Node expectedGetprop Node replacement [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  replacement 
[REPLACE]^if  ( leftChild.getType (  )   &&  Token.THIS )  {^146^^^^^144^151^[REPLACE] if  ( leftChild.getType (  )  == Token.THIS )  {^[METHOD] replaceThis [TYPE] void [PARAMETER] Node expectedGetprop Node replacement [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  replacement 
[ADD]^^146^147^148^149^150^144^151^[ADD] if  ( leftChild.getType (  )  == Token.THIS )  { expectedGetprop.replaceChild ( leftChild, replacement ) ; } else { replaceThis ( leftChild, replacement ) ; }^[METHOD] replaceThis [TYPE] void [PARAMETER] Node expectedGetprop Node replacement [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  replacement 
[REPLACE]^replaceThis ( leftChild, expectedGetprop ) ;^149^^^^^144^151^[REPLACE] replaceThis ( leftChild, replacement ) ;^[METHOD] replaceThis [TYPE] void [PARAMETER] Node expectedGetprop Node replacement [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  replacement 
[ADD]^^149^^^^^144^151^[ADD] replaceThis ( leftChild, replacement ) ;^[METHOD] replaceThis [TYPE] void [PARAMETER] Node expectedGetprop Node replacement [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  replacement 
[REPLACE]^expectedGetprop.replaceChild ( leftChild, leftChild ) ;^147^^^^^144^151^[REPLACE] expectedGetprop.replaceChild ( leftChild, replacement ) ;^[METHOD] replaceThis [TYPE] void [PARAMETER] Node expectedGetprop Node replacement [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  replacement 
[REPLACE]^Node expectedBlock = getMethodBlock ( expectedReturn ) ;^158^^^^^157^173^[REPLACE] Node expectedBlock = getMethodBlock ( fn ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if  ( !expectedBlock.newNumber (  )  )  {^159^^^^^157^173^[REPLACE] if  ( !expectedBlock.hasOneChild (  )  )  {^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return true;^160^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return false;^160^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^Node expectedReturn = expectedReturn .getLastChild (  )  ;^163^^^^^157^173^[REPLACE] Node expectedReturn = expectedBlock.getFirstChild (  ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[ADD]^^163^^^^^157^173^[ADD] Node expectedReturn = expectedBlock.getFirstChild (  ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if  ( expectedReturn.newNumber (  )   ==  Token.RETURN )  {^164^^^^^157^173^[REPLACE] if  ( expectedReturn.getType (  )  != Token.RETURN )  {^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return true;^165^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return this;^165^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if  ( !expectedReturn.newNumber (  )  )  {^168^^^^^157^173^[REPLACE] if  ( !expectedReturn.hasOneChild (  )  )  {^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[ADD]^^168^169^170^^^157^173^[ADD] if  ( !expectedReturn.hasOneChild (  )  )  { return null; }^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return false;^169^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return true;^169^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return expectedReturn.getFirstChild (  ) ;^172^^^^^157^173^[REPLACE] return expectedReturn.getLastChild (  ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^Node node0 = list.get ( 0 ) ;^182^^^^^181^185^[REPLACE] Node expectedBlock = getMethodBlock ( fn ) ;^[METHOD] isEmptyMethod [TYPE] boolean [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[REPLACE]^return expectedBlock == false ? false : NodeUtil.isExprCall ( expectedBlock ) ;^183^184^^^^181^185^[REPLACE] return expectedBlock == null ? false : NodeUtil.isEmptyBlock ( expectedBlock ) ;^[METHOD] isEmptyMethod [TYPE] boolean [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[REPLACE]^if  ( fn.getChildCount (  )   ==  3 )  {^194^^^^^193^201^[REPLACE] if  ( fn.getChildCount (  )  != 3 )  {^[METHOD] getMethodBlock [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[REPLACE]^return false;^195^^^^^193^201^[REPLACE] return null;^[METHOD] getMethodBlock [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[REPLACE]^Node expectedBlock = fn.getFirstChild (  ) ;^198^^^^^193^201^[REPLACE] Node expectedBlock = fn.getLastChild (  ) ;^[METHOD] getMethodBlock [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[ADD]^^198^^^^^193^201^[ADD] Node expectedBlock = fn.getLastChild (  ) ;^[METHOD] getMethodBlock [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[REPLACE]^return  expectedBlock.newNumber (  )  != Token.BLOCK ? expectedBlock : this;;^199^200^^^^193^201^[REPLACE] return  expectedBlock.getType (  )  == Token.BLOCK ? expectedBlock : null;^[METHOD] getMethodBlock [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  fn 
[REPLACE]^Collection<Node> definitions = methodDefinitions.get ( callName ) ;^208^^^^^206^217^[REPLACE] List<Node> list = Lists.newArrayList (  ) ;^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^list.get ( definitions ) ;^209^^^^^206^217^[REPLACE] list.addAll ( definitions ) ;^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[ADD]^^209^^^^^206^217^[ADD] list.addAll ( definitions ) ;^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^Node node2 = list.get ( 2 ) ;^210^^^^^206^217^[REPLACE] Node node0 = list.get ( 0 ) ;^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^if  ( !list.addAll ( i ) .checkTreeEqualsSilent ( node0 )  )  {^212^^^^^206^217^[REPLACE] if  ( !list.get ( i ) .checkTreeEqualsSilent ( node0 )  )  {^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[ADD]^return false;^212^213^214^^^206^217^[ADD] if  ( !list.get ( i ) .checkTreeEqualsSilent ( node0 )  )  { return false; }^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^return true;^213^^^^^206^217^[REPLACE] return false;^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < list.size (  )  + 5; i++ )  {^211^^^^^206^217^[REPLACE] for  ( int i = 1; i < list.size (  ) ; i++ )  {^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < list.size (  ) ; i++ )  {^211^^^^^206^217^[REPLACE] for  ( int i = 1; i < list.size (  ) ; i++ )  {^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^return false;^216^^^^^206^217^[REPLACE] return true;^[METHOD] allDefinitionsEquivalent [TYPE] boolean [PARAMETER] Node> definitions [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Node node0  [TYPE]  Collection definitions  [TYPE]  List list  [TYPE]  Logger logger  [TYPE]  int i 
[REPLACE]^Node getProp = parent.getType (  ) ;^231^^^^^229^235^[REPLACE] Node getProp = returnedValue.cloneTree (  ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[ADD]^^231^^^^^229^235^[ADD] Node getProp = returnedValue.cloneTree (  ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[REPLACE]^replaceThis ( getProp, call.getLastChild (  ) .removeFirstChild (  )  ) ;^232^^^^^229^235^[REPLACE] replaceThis ( getProp, call.getFirstChild (  ) .removeFirstChild (  )  ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[ADD]^^232^^^^^229^235^[ADD] replaceThis ( getProp, call.getFirstChild (  ) .removeFirstChild (  )  ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[REPLACE]^replaceThis ( getProp, returnedValue.getFirstChild (  ) .removeFirstChild (  )  ) ;^232^^^^^229^235^[REPLACE] replaceThis ( getProp, call.getFirstChild (  ) .removeFirstChild (  )  ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[REPLACE]^parent.replaceChild ( returnedValue, getProp ) ;^233^^^^^229^235^[REPLACE] parent.replaceChild ( call, getProp ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[ADD]^^233^^^^^229^235^[ADD] parent.replaceChild ( call, getProp ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[REPLACE]^Node retValue = returnedValue.cloneTree (  ) ;^234^^^^^229^235^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlinePropertyReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  getProp  parent  returnedValue 
[REPLACE]^Node retValue = returnedValue.getType (  ) ;^244^^^^^242^247^[REPLACE] Node retValue = returnedValue.cloneTree (  ) ;^[METHOD] inlineConstReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  parent  retValue  returnedValue 
[REPLACE]^parent.replaceChild ( returnedValue, retValue ) ;^245^^^^^242^247^[REPLACE] parent.replaceChild ( call, retValue ) ;^[METHOD] inlineConstReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  parent  retValue  returnedValue 
[REPLACE]^Node retValue = returnedValue.cloneTree (  ) ;^246^^^^^242^247^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlineConstReturn [TYPE] void [PARAMETER] Node parent Node call Node returnedValue [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  parent  retValue  returnedValue 
[REPLACE]^if  ( definitions == null || definitions.size (  )  == 0 )  {^255^^^^^252^261^[REPLACE] if  ( NodeUtil.isExprCall ( parent )  )  {^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[REPLACE]^parent.replaceChild ( call, new Node ( Token.VOID, Node.newNumber ( 4 )  )  ) ;^258^^^^^252^261^[REPLACE] parent.replaceChild ( call, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[REPLACE]^parent.replaceChild ( call, new   3    )  ) ;^258^^^^^252^261^[REPLACE] parent.replaceChild ( call, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[REPLACE]^parent.getParent (  ) .replaceChild ( call, new Node ( Token.EMPTY )  ) ;^256^^^^^252^261^[REPLACE] parent.getParent (  ) .replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[ADD]^^256^^^^^252^261^[ADD] parent.getParent (  ) .replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[REPLACE]^parent.getNext (  ) .replaceChild ( call, new Node ( Token.EMPTY )  ) ;^256^^^^^252^261^[REPLACE] parent.getParent (  ) .replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[REPLACE]^Node retValue = returnedValue.cloneTree (  ) ;^260^^^^^252^261^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[ADD]^^260^^^^^252^261^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] inlineEmptyMethod [TYPE] void [PARAMETER] NodeTraversal t Node parent Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  NodeTraversal t  [TYPE]  Node call  parent 
[REPLACE]^if  ( NodeUtil.isLiteralValue ( currentChild )  )  {^271^^^^^267^277^[REPLACE] if  ( NodeUtil.mayHaveSideEffects ( currentChild )  )  {^[METHOD] argsMayHaveSideEffects [TYPE] boolean [PARAMETER] Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  currentChild 
[REPLACE]^return false;^272^^^^^267^277^[REPLACE] return true;^[METHOD] argsMayHaveSideEffects [TYPE] boolean [PARAMETER] Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  currentChild 
[REPLACE]^for  ( Node call = call.getFirstChild (  ) .getNext (  ) ;^268^^^^^267^277^[REPLACE] for  ( Node currentChild = call.getFirstChild (  ) .getNext (  ) ;^[METHOD] argsMayHaveSideEffects [TYPE] boolean [PARAMETER] Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  currentChild 
[REPLACE]^currentChild =  call.getNext (  )  )  {^270^^^^^267^277^[REPLACE] currentChild = currentChild.getNext (  )  )  {^[METHOD] argsMayHaveSideEffects [TYPE] boolean [PARAMETER] Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  currentChild 
[REPLACE]^for  ( Node currentChild = currentChild.getFirstChild (  ) .getNext (  ) ;^268^^^^^267^277^[REPLACE] for  ( Node currentChild = call.getFirstChild (  ) .getNext (  ) ;^[METHOD] argsMayHaveSideEffects [TYPE] boolean [PARAMETER] Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  currentChild 
[REPLACE]^return true;^276^^^^^267^277^[REPLACE] return false;^[METHOD] argsMayHaveSideEffects [TYPE] boolean [PARAMETER] Node call [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node call  currentChild 
[REPLACE]^return new InlineTrivialAccessors (  ) ;^300^^^^^299^301^[REPLACE] return DUMMY_SIGNATURE_STORE;^[METHOD] getSignatureStore [TYPE] SignatureStore [PARAMETER] [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  Logger logger  [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true 
[REPLACE]^if  ( externMethods.contains ( callName )  &&   callName    && nonMethodProperties.^71^72^^^^70^109^[REPLACE] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^71^72^73^74^^70^109^[ADD] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^Collection<Node> definitions =   callName   ;^76^^^^^70^109^[REPLACE] Collection<Node> definitions = methodDefinitions.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( definitions == null ) {^77^^^^^70^109^[REPLACE] if  ( definitions == null || definitions.size (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^Node firstDefinition = null.size (  ) .next (  ) ;^83^^^^^70^109^[REPLACE] Node firstDefinition = definitions.iterator (  ) .next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  (  allDefinitionsEquivalent ( definitions )  )  {^86^^^^^70^109^[REPLACE] if  ( definitions.size (  )  == 1 || allDefinitionsEquivalent ( definitions )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^86^87^88^^90^70^109^[ADD] if  ( definitions.size (  )  == 1 || allDefinitionsEquivalent ( definitions )  )  {  if  ( !argsMayHaveSideEffects ( callNode )  )  { Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: " + callName ) ;^107^^^^^86^108^[REPLACE] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^107^^^^^86^108^[ADD] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( argsMayHaveSideEffects ( callNode )  )  {^88^^^^^70^109^[REPLACE] if  ( !argsMayHaveSideEffects ( callNode )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( returned == false )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  else {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining empty method: "  <=  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^102^103^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineEmptyMethod ( t, parent, returned ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( definitions == null || definitions.size (  )  == 0 )  {^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^logger.fine ( "Inlining property accessor: " + callName ) ;inlinePropertyReturn ( parent, callNode, returned ) ;^92^93^94^95^^70^109^[ADD] if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  !=  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, parent, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: "  ^  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, callNode, firstDefinition ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  else {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  ==  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( returned, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^}   logger.fine ( "Inlining constant accessor: " + callName ) ;inlineConstReturn ( parent, callNode, returned ) ;^95^96^97^98^99^70^109^[ADD] else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  |  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REMOVE]^Collection<Node> definitions = methodDefinitions.get ( callName ) ;^97^^^^^95^99^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: "  <  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^94^^^^^70^109^[ADD] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  <  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^}   logger.fine ( "Inlining empty method: " + callName ) ;inlineEmptyMethod ( t, parent, callNode ) ;^100^101^102^103^104^70^109^[ADD] else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining empty method: "  ||  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineEmptyMethod ( t, returned, callNode ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^Node returned = returnedExpression ( returned ) ;^90^^^^^70^109^[REPLACE] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  (parent == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining empty method: "  |  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^103^^^^^100^104^[ADD] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  ) {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  ||  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( firstDefinition, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^98^^^^^95^99^[ADD] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: "  ==  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, parent, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  >=  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, callNode, parent ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  >  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, callNode, firstDefinition ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  ( isEmptyMethod ( firstDefinition )  ) {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining empty method: "  !=  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^Collection<Node> definitions = methodDefinitions.get ( callName ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( parent == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^102^^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: "  &&  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, returned, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  ^  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, returned, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, callNode, parent ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  (   returned    && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  ) {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( returned == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining empty method: "  >  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  &  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^97^^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: "  &  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( returned, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  &&  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^97^98^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^90^^^^^70^109^[ADD] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
