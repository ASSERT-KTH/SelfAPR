[REPLACE]^private  AbstractCompiler compiler;^34^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private  CheckLevel checkLevel;^35^^^^^^^[REPLACE] private final CheckLevel checkLevel;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private  CodingConvention codingConvention;^36^^^^^^^[REPLACE] private final CodingConvention codingConvention;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^static  DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDE", "missing goog.provide ( ''{0}'' ) " ) ;^38^39^40^^^38^40^[REPLACE] static final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDE", "missing goog.provide ( ''{0}'' ) " ) ;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private final Map<String, Node> provides ;^56^^^^^^^[REPLACE] private final Map<String, Node> provides = Maps.newHashMap (  ) ;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^private final Map<String, Node> ctors  = null ;^57^^^^^^^[REPLACE] private final Map<String, Node> ctors = Maps.newHashMap (  ) ;^ [CLASS] CheckProvides CheckProvidesCallback  
[REPLACE]^this.compiler =  null;^43^^^^^42^46^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention 
[ADD]^^43^^^^^42^46^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^this.checkLevel =  null;^44^^^^^42^46^[REPLACE] this.checkLevel = checkLevel;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^this.codingConvention =  null.getCodingConvention (  ) ;^45^^^^^42^46^[REPLACE] this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^this.convention =  codingConvention;^61^^^^^60^62^[REPLACE] this.convention = convention;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] CodingConvention convention [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention 
[REPLACE]^provides.put ( providedClassName, n ) ;^52^^^^^49^53^[REPLACE] new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node externs  root  [TYPE]  CheckProvidesCallback callback  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( providedClassName == parentull )  {^70^^^^^65^80^[REPLACE] if  ( providedClassName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  parent  [TYPE]  String providedClassName  [TYPE]  Map ctors  provides 
[REPLACE]^provides.put ( providedClassName, parent ) ;^71^^^^^65^80^[REPLACE] provides.put ( providedClassName, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  parent  [TYPE]  String providedClassName  [TYPE]  Map ctors  provides 
[REPLACE]^String providedClassName = codingConvention .isPrivate ( providedClassName )  ;^68^69^^^^65^80^[REPLACE] String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  parent  [TYPE]  String providedClassName  [TYPE]  Map ctors  provides 
[REPLACE]^Node name = true;^83^^^^^82^103^[REPLACE] Node name = null;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^JSDocInfo info = name.getFirstChild (  ) ;^84^^^^^82^103^[REPLACE] JSDocInfo info = parent.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == true ) {^85^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == true && info .getVisibility (  )   )  {^90^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^name = n.getFirstChild (  ) ;^90^91^92^^^82^103^[ADD] if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = parent.getFirstChild (  ) ; ;^91^^^^^82^103^[REPLACE] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^info =  parent.getJSDocIparentfo (  ) ;^89^^^^^82^103^[REPLACE] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^89^^^^^82^103^[ADD] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = n.getFirstChild (  ) ; ;^86^^^^^82^103^[REPLACE] name = parent.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  (  info.isConstructor (  )  )  {^90^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^info =  null.getJSDocInullfo (  ) ;^89^^^^^82^103^[REPLACE] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^[REPLACE] if  ( name != null && name.isQualifiedName (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( this.convention.isPrivate ( qualifiedName )  )  {^96^^^^^82^103^[REPLACE] if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^98^^^^^82^103^[REPLACE] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^ctors.put ( qualifiedName, name ) ;^98^99^100^^^82^103^[ADD] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^Visibility visibility = info.isConstructor (  ) ;^97^^^^^82^103^[REPLACE] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^99^100^^^^82^103^[ADD] ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^[REPLACE] String qualifiedName = name.getQualifiedName (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^95^96^97^98^99^82^103^[ADD] String qualifiedName = name.getQualifiedName (  ) ; if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^Visibility visibility = info .isConstructor (  )  ;^97^^^^^82^103^[REPLACE] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors .get ( qualifiedName )  ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( provides.containsKey ( ctorName )  )  {^107^^^^^105^115^[REPLACE] if  ( !provides.containsKey ( ctorName )  )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^compiler.report ( JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^[REPLACE] compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^[REPLACE] JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^for  ( String ctorName : ctors.keySet (  )  )  { if  ( !provides.containsKey ( ctorName )  )  {^106^^^^^105^115^[REPLACE] for  ( String ctorName : ctors.keySet (  )  )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[ADD]^^106^107^108^109^110^105^115^[ADD] for  ( String ctorName : ctors.keySet (  )  )  { if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^provides .get ( ctorName )  ;^113^^^^^105^115^[REPLACE] provides.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^ctors .get ( ctorName )  ;^114^^^^^105^115^[REPLACE] ctors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvides CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^private  Map<String, Node> provides = Maps.newHashMap (  ) ;^56^^^^^^^[REPLACE] private final Map<String, Node> provides = Maps.newHashMap (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^private  Map<String, Node> ctors = Maps.newHashMap (  ) ;^57^^^^^^^[REPLACE] private final Map<String, Node> ctors = Maps.newHashMap (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel checkLevel  [TYPE]  DiagnosticType MISSING_PROVIDE_WARNING  [TYPE]  CodingConvention codingConvention  convention  [TYPE]  Node n  [TYPE]  String ctorName  [TYPE]  Map ctors  provides 
[REPLACE]^this.convention =  null;^61^^^^^60^62^[REPLACE] this.convention = convention;^[METHOD] <init> [TYPE] CodingConvention) [PARAMETER] CodingConvention convention [CLASS] CheckProvidesCallback   [TYPE]  Map ctors  provides  [TYPE]  CodingConvention convention  [TYPE]  boolean false  true 
[REPLACE]^if  ( providedClassName == this )  {^70^^^^^65^80^[REPLACE] if  ( providedClassName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  String providedClassName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n  parent 
[REPLACE]^provides .get ( providedClassName )  ;^71^^^^^65^80^[REPLACE] provides.put ( providedClassName, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  String providedClassName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n  parent 
[REPLACE]^String providedClassName = codingConvention .isPrivate ( providedClassName )  ;^68^69^^^^65^80^[REPLACE] String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  String providedClassName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n  parent 
[REPLACE]^Node name = true;^83^^^^^82^103^[REPLACE] Node name = null;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^JSDocInfo info = name.getJSDocInfo (  ) ;^84^^^^^82^103^[REPLACE] JSDocInfo info = parent.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^85^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( info == null ) {^90^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^name = n.getFirstChild (  ) ;^90^91^92^^^82^103^[ADD] if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = parent.getFirstChild (  ) ; ;^91^^^^^82^103^[REPLACE] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^91^^^^^82^103^[ADD] name = n.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^info =  parent.getJSDocIparentfo (  ) ;^89^^^^^82^103^[REPLACE] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^89^^^^^82^103^[ADD] info = n.getJSDocInfo (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^name = n.getFirstChild (  ) ; ;^86^^^^^82^103^[REPLACE] name = parent.getFirstChild (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  (  info.isConstructor (  )  )  {^90^^^^^82^103^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^[REPLACE] if  ( name != null && name.isQualifiedName (  )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^94^95^96^97^^82^103^[ADD] if  ( name != null && name.isQualifiedName (  )  )  { String qualifiedName = name.getQualifiedName (  ) ; if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( this.convention.isPrivate ( qualifiedName )  )  {^96^^^^^82^103^[REPLACE] if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^Visibility visibility = info.getVisibility (  ) ;ctors.put ( qualifiedName, name ) ;^96^97^98^99^100^82^103^[ADD] if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^98^^^^^82^103^[REPLACE] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors .get ( qualifiedName )  ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^99^100^^^^82^103^[ADD] ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^Visibility visibility = info.isConstructor (  ) ;^97^^^^^82^103^[REPLACE] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( !this.convention.isPrivate ( qualifiedName )  )  {^98^^^^^82^103^[REPLACE] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^ctors.put ( qualifiedName, name ) ;^98^99^100^^^82^103^[ADD] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^[REPLACE] String qualifiedName = name.getQualifiedName (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^95^96^97^98^99^82^103^[ADD] String qualifiedName = name.getQualifiedName (  ) ; if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^[REPLACE] ctors.put ( qualifiedName, name ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^97^^^^^82^103^[ADD] Visibility visibility = info.getVisibility (  ) ;^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[ADD]^^98^99^100^^^82^103^[ADD] if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[METHOD] visitFunctionNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckProvidesCallback   [TYPE]  boolean false  true  [TYPE]  CodingConvention convention  [TYPE]  Node n  name  parent  [TYPE]  Visibility visibility  [TYPE]  String qualifiedName  [TYPE]  JSDocInfo info  [TYPE]  Map ctors  provides 
[REPLACE]^if  ( provides.containsKey ( ctorName )  )  {^107^^^^^105^115^[REPLACE] if  ( !provides.containsKey ( ctorName )  )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[REPLACE]^compiler.report ( JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^[REPLACE] compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[ADD]^^108^109^110^^^105^115^[ADD] compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[REPLACE]^JSError.make ( t, ctors .put ( ctorName , n )  , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^[REPLACE] JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[REPLACE]^JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^[REPLACE] JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[REPLACE]^for  ( String ctorName : ctors.keySet (  )  )  { if  ( !provides.containsKey ( ctorName )  )  {^106^^^^^105^115^[REPLACE] for  ( String ctorName : ctors.keySet (  )  )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[REPLACE]^provides.keySet (  ) ;^113^^^^^105^115^[REPLACE] provides.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[REPLACE]^ctors.keySet (  ) ;^114^^^^^105^115^[REPLACE] ctors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
[ADD]^^114^^^^^105^115^[ADD] ctors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckProvidesCallback   [TYPE]  String ctorName  [TYPE]  boolean false  true  [TYPE]  Map ctors  provides  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node n 
