[REPLACE]^private  AbstractCompiler compiler;^60^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  FunctionNames functionNames;^61^^^^^^^[REPLACE] private final FunctionNames functionNames;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private   double  templateFilename;^62^^^^^^^[REPLACE] private final String templateFilename;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private final  long  appNameStr;^63^^^^^^^[REPLACE] private final String appNameStr;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private final  long  initCodeSource;^64^^^^^^^[REPLACE] private final String initCodeSource;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private final  long  definedFunctionName;^65^^^^^^^[REPLACE] private final String definedFunctionName;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  String reportFunctionName;^66^^^^^^^[REPLACE] private final String reportFunctionName;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private final  char  appNameSetter;^68^^^^^^^[REPLACE] private final String appNameSetter;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private  List<String> removable;^167^^^^^^^[REPLACE] private final List<String> removable;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^private final  long  functionId;^213^^^^^^^[REPLACE] private final int functionId;^ [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  
[REPLACE]^this.compiler =  null;^86^^^^^85^122^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.functionId = functionId; ;^87^^^^^85^122^[REPLACE] this.functionNames = functionNames;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^87^88^^^^85^122^[ADD] this.functionNames = functionNames; this.templateFilename = templateFilename;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.templateFilename =  null;^88^^^^^85^122^[REPLACE] this.templateFilename = templateFilename;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.appNameStr =  templateFilename;^89^^^^^85^122^[REPLACE] this.appNameStr = appNameStr;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Instrumentation.Builder builder = Instrumentation.getInitList (  ) ;^91^^^^^85^122^[REPLACE] Instrumentation.Builder builder = Instrumentation.newBuilder (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^91^^^^^85^122^[ADD] Instrumentation.Builder builder = Instrumentation.newBuilder (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^TextFormat.merge ( readable, builder ) ;^92^93^94^95^96^85^122^[ADD] try { TextFormat.merge ( readable, builder ) ; } catch  ( IOException e )  { compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " +^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^TextFormat.merge ( readable, null ) ;^93^^^^^85^122^[REPLACE] TextFormat.merge ( readable, builder ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^93^^^^^85^122^[ADD] TextFormat.merge ( readable, builder ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.initCodeSource ;^98^^^^^85^122^[REPLACE] this.initCodeSource = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.reportFunctionName = ""; ;^99^^^^^85^122^[REPLACE] this.definedFunctionName = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.definedFunctionName = ""; ;^100^^^^^85^122^[REPLACE] this.reportFunctionName = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^100^^^^^85^122^[ADD] this.reportFunctionName = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.reportFunctionName = ""; ;^101^^^^^85^122^[REPLACE] this.reportFunctionExitName = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.appNameSetter  =  this.appNameSetter ;^102^^^^^85^122^[REPLACE] this.appNameSetter = "";^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.declarationsToRemove  = null ;^103^^^^^85^122^[REPLACE] this.declarationsToRemove = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^103^^^^^85^122^[ADD] this.declarationsToRemove = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^104^^^^^85^122^[REPLACE] return;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^94^95^96^^^85^122^[ADD] catch  ( IOException e )  { compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " +^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Instrumentation template = null.build (  ) ;^107^^^^^85^122^[REPLACE] Instrumentation template = builder.build (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^JSModule module = t.getModule (  ) ;^109^^^^^85^122^[REPLACE] StringBuilder initCodeSourceBuilder = new StringBuilder (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^109^^^^^85^122^[ADD] StringBuilder initCodeSourceBuilder = new StringBuilder (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^for  ( String line : template.getInitList (  )  )  { initCodeSourceBuilder.append ( line ) .append ( "\n" ) ;^110^^^^^85^122^[REPLACE] for  ( String line : template.getInitList (  )  )  {^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.initCodeSource =  null.toString (  ) ;^113^^^^^85^122^[REPLACE] this.initCodeSource = initCodeSourceBuilder.toString (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.reportFunctionName = template.getReportCall (  ) ; ;^115^^^^^85^122^[REPLACE] this.definedFunctionName = template.getReportDefined (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^115^^^^^85^122^[ADD] this.definedFunctionName = template.getReportDefined (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.definedFunctionName = template.getReportDefined (  ) ; ;^116^^^^^85^122^[REPLACE] this.reportFunctionName = template.getReportCall (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.definedFunctionName = template.getReportDefined (  ) ; ;^117^^^^^85^122^[REPLACE] this.reportFunctionExitName = template.getReportExit (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.appNameSetter =  null.getAppNameSetter (  ) ;^118^^^^^85^122^[REPLACE] this.appNameSetter = template.getAppNameSetter (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^118^^^^^85^122^[ADD] this.appNameSetter = template.getAppNameSetter (  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.declarationsToRemove =  ImmutableList.copyOf ( null.getDeclarationToRemoveList (  )  ) ;^120^121^^^^85^122^[REPLACE] this.declarationsToRemove = ImmutableList.copyOf ( template.getDeclarationToRemoveList (  )  ) ;^[METHOD] <init> [TYPE] Readable) [PARAMETER] AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  StringBuilder initCodeSourceBuilder  [TYPE]  Builder builder  [TYPE]  Instrumentation template  [TYPE]  List declarationsToRemove  removable  [TYPE]  Readable readable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  IOException e  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.removable =  null;^169^^^^^168^170^[REPLACE] this.removable = removable;^[METHOD] <init> [TYPE] List) [PARAMETER] String> removable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^169^^^^^168^170^[ADD] this.removable = removable;^[METHOD] <init> [TYPE] List) [PARAMETER] String> removable [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.functionNames = functionNames; ;^221^^^^^220^222^[REPLACE] this.functionId = functionId;^[METHOD] <init> [TYPE] InstrumentFunctions$InstrumentReturns(int) [PARAMETER] int functionId [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node initCode = true;^126^^^^^125^157^[REPLACE] Node initCode = null;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( initCodeSource.isEmpty (  )  )  {^127^^^^^125^157^[REPLACE] if  ( !initCodeSource.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( root == null ) {^130^^^^^125^157^[REPLACE] if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REMOVE]^if  ( ! ( initCodeSource.isEmpty (  )  )  )  {     Node initCodeRoot = compiler.parseSyntheticCode (  (  ( templateFilename )  + ":init" ) , initCodeSource ) ;     if  (  ( initCodeRoot != null )  &&  (  ( initCodeRoot.getFirstChild (  )  )  != null )  )  {         initCode = initCodeRoot.removeChildren (  ) ;     }else {         return ;     } }^130^^^^^125^157^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^133^^^^^130^134^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^initCode =  root.removeChildren (  ) ;^131^^^^^125^157^[REPLACE] initCode = initCodeRoot.removeChildren (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^133^^^^^125^157^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node initCodeRoot = compiler.parseSyntheticCode (reportFunctionExitName + ":init", initCodeSource ) ;^128^129^^^^125^157^[REPLACE] Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( initCode == null && initCodeRoot.getFirstChild (  )  != null )  {^130^^^^^125^157^[REPLACE] if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node initCodeRoot = compiler.parseSyntheticCode (line + ":init", initCodeSource ) ;^128^129^^^^125^157^[REPLACE] Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^NodeTraversal.traverse ( compiler, initCodeRoot, new RemoveCallback ( declarationsToRemove )  ) ;^137^138^^^^125^157^[REPLACE] NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^NodeTraversal.traverse ( compiler, initCodeRoot, new InstrumentCallback (  )  ) ;^139^^^^^125^157^[REPLACE] NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REMOVE]^template.getDeclarationToRemoveList (  )  ) ;^139^^^^^125^157^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( appNameSetter.isEmpty (  )  )  {^141^^^^^125^157^[REPLACE] if  ( !appNameSetter.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.addChildBefore ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^142^143^144^^^125^157^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, initCodeRoot ) ;^145^^^^^125^157^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = compiler.getNodeForCodeInsertion ( true ) ;^147^^^^^125^157^[REPLACE] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newNumber ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^142^143^144^^^125^157^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( root == null )  {^152^^^^^125^157^[REPLACE] if  ( initCode != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = compiler.getNodeForCodeInsertion ( false ) ;^153^^^^^125^157^[REPLACE] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = compiler.getNodeForCodeInsertion ( true ) ;^153^^^^^125^157^[REPLACE] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^153^^^^^125^157^[ADD] Node addingRoot = compiler.getNodeForCodeInsertion ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node addingRoot  call  expr  externs  initCode  initCodeRoot  root  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^174^^^^^173^182^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( id < 0 )  {^175^^^^^173^182^[REPLACE] if  ( removable.contains ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( parent.hasChildren (  )  )  {^177^^^^^173^182^[REPLACE] if  ( !parent.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^parent.getParent (  ) .removeChild ( parent ) ;^177^178^179^^^173^182^[ADD] if  ( !parent.hasChildren (  )  )  { parent.getParent (  ) .removeChild ( parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^parent.getParent (  ) .removeChild ( n ) ;^178^^^^^173^182^[REPLACE] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( !parent.newNumber (  )  )  {^177^^^^^173^182^[REPLACE] if  ( !parent.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^parent .getString (  )  .removeChild ( parent ) ;^178^^^^^173^182^[REPLACE] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^177^178^179^^^173^182^[ADD] if  ( !parent.hasChildren (  )  )  { parent.getParent (  ) .removeChild ( parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^parent.getString (  ) .removeChild ( n ) ;^178^^^^^173^182^[REPLACE] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REMOVE]^if  ( removable.contains ( n.getString (  )  )  )  { parent.removeChild ( n ) ;^178^^^^^173^182^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^TextFormat.merge ( readable, builder ) ;^228^^^^^227^236^[REPLACE] NodeTraversal.traverse ( compiler, body, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node body  call  expr  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( allPathsReturn ( body )  )  {^230^^^^^227^236^[REPLACE] if  ( !allPathsReturn ( body )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node body  call  expr  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) ,^231^^^^^227^236^[REPLACE] Node call = newReportFunctionExitNode (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node body  call  expr  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^231^232^^^^227^236^[ADD] Node call = newReportFunctionExitNode (  ) ; Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node body  call  expr  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) ,^232^^^^^227^236^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node body  call  expr  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( returnRhs.newNumber (  )   ==  Token.RETURN )  {^240^^^^^239^251^[REPLACE] if  ( n.getType (  )  != Token.RETURN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^241^^^^^239^251^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) ,^244^^^^^239^251^[REPLACE] Node call = newReportFunctionExitNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^244^245^^^^239^251^[ADD] Node call = newReportFunctionExitNode (  ) ; Node returnRhs = n.removeFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node returnRhs = returnRhs.getFirstChild (  ) ;^245^^^^^239^251^[REPLACE] Node returnRhs = n.removeFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^245^^^^^239^251^[ADD] Node returnRhs = n.removeFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  (parent == null )  {^246^^^^^239^251^[REPLACE] if  ( returnRhs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^call.addChildToFront ( returnRhs ) ;^247^^^^^239^251^[REPLACE] call.addChildToBack ( returnRhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^n.addChildrenToFront ( call ) ;^249^^^^^239^251^[REPLACE] n.addChildToFront ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^compiler.report (  ) ;^250^^^^^239^251^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node call  n  parent  returnRhs  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return new Node ( Token.CALL, Node.addChildBefore ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^[REPLACE] return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[METHOD] newReportFunctionExitNode [TYPE] Node [PARAMETER] [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^264^^^^^262^277^[REPLACE] ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^cfa.process ( false, block ) ;^265^^^^^262^277^[REPLACE] cfa.process ( null, block ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^265^266^^^^262^277^[ADD] cfa.process ( null, block ) ; ControlFlowGraph<Node> cfg = cfa.getCfg (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^266^^^^^262^277^[REPLACE] ControlFlowGraph<Node> cfg = cfa.getCfg (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node returnPathsParent = cfg.getImplicitReturn (  ) .removeChild (  ) ;^268^^^^^262^277^[REPLACE] Node returnPathsParent = cfg.getImplicitReturn (  ) .getValue (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( n.getType (  )   ==  Token.RETURN )  {^272^^^^^262^277^[REPLACE] if  ( n.getType (  )  != Token.RETURN )  {^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[ADD]^^272^273^274^^^262^277^[ADD] if  ( n.getType (  )  != Token.RETURN )  { return false; }^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return true;^273^^^^^262^277^[REPLACE] return false;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node n = this.getValue (  ) ;^271^^^^^262^277^[REPLACE] Node n = pred.getValue (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^276^^^^^262^277^[REPLACE] return true;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( parent.getType (  )   ==  Token.FUNCTION )  {^283^^^^^282^333^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^284^^^^^282^333^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^int id = functionNames.getFunctionId ( parent ) ;^287^^^^^282^333^[REPLACE] int id = functionNames.getFunctionId ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^287^^^^^282^333^[ADD] int id = functionNames.getFunctionId ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( functionId  >=  0 )  {^288^^^^^282^333^[REPLACE] if  ( id < 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^return false;^290^^^^^282^333^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( reportFunctionName.isEmpty (  )  )  {^293^^^^^282^333^[REPLACE] if  ( !reportFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^293^294^295^296^297^282^333^[ADD] if  ( !reportFunctionName.isEmpty (  )  )  { Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ; Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^294^^^^^282^333^[ADD] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( functionId )  ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, parent ) ;^298^^^^^282^333^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^298^299^^^^282^333^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ; body.addChildToFront ( expr ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.addChildBefore ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^298^^^^^282^333^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( !definedFunctionName.isEmpty (  )  )  {^303^^^^^282^333^[REPLACE] if  ( !reportFunctionExitName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node body = n.removeFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node body = parent .removeFirstChild (  )  .getNext (  ) .getNext (  ) ;^304^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^304^^^^^282^333^[ADD] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( definedFunctionName.isEmpty (  )  )  {^308^^^^^282^333^[REPLACE] if  ( !definedFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( n )  )  {^315^^^^^282^333^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  (  type == Token.SCRIPT )  {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  null;^324^^^^^315^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  parent;^324^^^^^315^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^324^325^^^^315^330^[ADD] addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^beforeChild =  parent;^327^^^^^315^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node beforeChild = parent;^320^^^^^315^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^320^321^322^323^324^315^330^[ADD] Node beforeChild = n; for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node n = pred.getValue (  ) ;^321^^^^^315^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^int type = parent.getType (  ) ;^322^^^^^315^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  compiler.getNodeForCodeInsertion ( null ) ;^317^^^^^282^333^[REPLACE] addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node n = pred.getValue (  ) ;^316^^^^^282^333^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^282^333^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^addingRoot =  parent;^324^^^^^282^333^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^beforeChild =  parent;^327^^^^^282^333^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.addChildBefore ( Token.NAME, definedFunctionName ) , Node.newNumber ( functionId )  ) ;^309^310^311^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^309^310^311^^^282^333^[ADD] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = NodeUtil.newExpr ( parent ) ;^312^^^^^282^333^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = true;^314^^^^^282^333^[REPLACE] Node addingRoot = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node beforeChild = parent;^320^^^^^282^333^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^320^321^322^323^324^282^333^[ADD] Node beforeChild = n; for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node n = pred.getValue (  ) ;^321^^^^^282^333^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^int type = parent.getType (  ) ;^322^^^^^282^333^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^327^328^^^^315^330^[ADD] beforeChild = ancestor; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^317^318^^^^282^333^[ADD] addingRoot = compiler.getNodeForCodeInsertion ( module ) ; addingRoot.addChildToFront ( expr ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^JSModule module = t .traverse ( compiler , n , this )  ;^316^^^^^282^333^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^if  (  type == Token.SCRIPT )  {^323^^^^^282^333^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^323^324^325^326^^282^333^[ADD] if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node .newString ( definedFunctionName )   ) ;^309^310^311^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node expr = NodeUtil.isVarDeclaration ( parent ) ;^312^^^^^282^333^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^Node addingRoot = false;^314^^^^^282^333^[REPLACE] Node addingRoot = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[ADD]^^321^322^323^324^325^282^333^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  List declarationsToRemove  removable  [TYPE]  String appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  [TYPE]  int functionId  id  type  [TYPE]  FunctionNames functionNames 
[REPLACE]^this.removable =  false;^169^^^^^168^170^[REPLACE] this.removable = removable;^[METHOD] <init> [TYPE] List) [PARAMETER] String> removable [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true 
[ADD]^^169^^^^^168^170^[ADD] this.removable = removable;^[METHOD] <init> [TYPE] List) [PARAMETER] String> removable [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true 
[REPLACE]^if  ( removable.contains ( n.getString (  )  )  )  {^174^^^^^173^182^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( n )  )  {^175^^^^^173^182^[REPLACE] if  ( removable.contains ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( parent.hasChildren (  )  )  {^177^^^^^173^182^[REPLACE] if  ( !parent.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^parent.getParent (  ) .removeChild ( n ) ;^178^^^^^173^182^[REPLACE] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^178^^^^^173^182^[ADD] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( !parent.removeChild (  )  )  {^177^^^^^173^182^[REPLACE] if  ( !parent.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^parent.getParent (  ) .removeChild ( parent ) ;^177^178^179^^^173^182^[ADD] if  ( !parent.hasChildren (  )  )  { parent.getParent (  ) .removeChild ( parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^parent.getString (  ) .removeChild ( parent ) ;^178^^^^^173^182^[REPLACE] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^parent.getString (  ) .removeChild ( n ) ;^178^^^^^173^182^[REPLACE] parent.getParent (  ) .removeChild ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( removable.contains ( n .getParent (  )   )  )  {^175^^^^^173^182^[REPLACE] if  ( removable.contains ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REMOVE]^if  ( removable.contains ( n.getString (  )  )  )  {     parent.removeChild ( n ) ;     if  ( ! ( parent.hasChildren (  )  )  )  {         parent.getParent (  ) .removeChild ( parent ) ;     } }^177^^^^^173^182^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveCallback   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^private final  short  functionId;^213^^^^^^^[REPLACE] private final int functionId;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  List removable  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^this.functionId =  null;^221^^^^^220^222^[REPLACE] this.functionId = functionId;^[METHOD] <init> [TYPE] InstrumentFunctions$InstrumentReturns(int) [PARAMETER] int functionId [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  boolean false  true 
[REPLACE]^n.addChildToFront ( call ) ;^228^^^^^227^236^[REPLACE] NodeTraversal.traverse ( compiler, body, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  Node body  call  expr  [TYPE]  boolean false  true 
[REPLACE]^if  ( allPathsReturn ( body )  )  {^230^^^^^227^236^[REPLACE] if  ( !allPathsReturn ( body )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  Node body  call  expr  [TYPE]  boolean false  true 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^231^^^^^227^236^[REPLACE] Node call = newReportFunctionExitNode (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  Node body  call  expr  [TYPE]  boolean false  true 
[ADD]^^231^^^^^227^236^[ADD] Node call = newReportFunctionExitNode (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  Node body  call  expr  [TYPE]  boolean false  true 
[REPLACE]^Node returnRhs = n.removeFirstChild (  ) ;^232^^^^^227^236^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  Node body  call  expr  [TYPE]  boolean false  true 
[ADD]^^232^233^^^^227^236^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ; body.addChildToBack ( expr ) ;^[METHOD] process [TYPE] void [PARAMETER] Node body [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  Node body  call  expr  [TYPE]  boolean false  true 
[REPLACE]^if  ( n.getType (  )   ==  Token.RETURN )  {^240^^^^^239^251^[REPLACE] if  ( n.getType (  )  != Token.RETURN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^return false;^241^^^^^239^251^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^244^^^^^239^251^[REPLACE] Node call = newReportFunctionExitNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[ADD]^^244^^^^^239^251^[ADD] Node call = newReportFunctionExitNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^Node returnRhs = n .newString ( false )  ;^245^^^^^239^251^[REPLACE] Node returnRhs = n.removeFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[ADD]^^245^^^^^239^251^[ADD] Node returnRhs = n.removeFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^if  ( returnRhs == this )  {^246^^^^^239^251^[REPLACE] if  ( returnRhs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^call.addChildToBack ( parent ) ;^247^^^^^239^251^[REPLACE] call.addChildToBack ( returnRhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[ADD]^^247^^^^^239^251^[ADD] call.addChildToBack ( returnRhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^n.addChildToBack ( parent ) ;^249^^^^^239^251^[REPLACE] n.addChildToFront ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REMOVE]^body.addChildToBack ( expr ) ;^249^^^^^239^251^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^Node n = pred.getValue (  ) ;^250^^^^^239^251^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentReturns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int functionId  [TYPE]  Node call  n  parent  returnRhs 
[REPLACE]^return new Node ( Token.CALL, Node .newNumber ( functionId )  , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^[REPLACE] return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[METHOD] newReportFunctionExitNode [TYPE] Node [PARAMETER] [CLASS] InstrumentReturns   [TYPE]  int functionId  [TYPE]  boolean false  true 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^264^^^^^262^277^[REPLACE] ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^cfa.process ( false, block ) ;^265^^^^^262^277^[REPLACE] cfa.process ( null, block ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^266^^^^^262^277^[REPLACE] ControlFlowGraph<Node> cfg = cfa.getCfg (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^Node returnPathsParent = null.getImplicitReturn (  ) .getValue (  ) ;^268^^^^^262^277^[REPLACE] Node returnPathsParent = cfg.getImplicitReturn (  ) .getValue (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^if  ( returnPathsParent.newNumber (  )   ==  Token.RETURN )  {^272^^^^^262^277^[REPLACE] if  ( n.getType (  )  != Token.RETURN )  {^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REMOVE]^if  (  ( n.getType (  )  )  !=  ( RETURN )  )  {     return ; }^272^^^^^262^277^[REMOVE] ^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^return true;^273^^^^^262^277^[REPLACE] return false;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^Node n = null.getValue (  ) ;^271^^^^^262^277^[REPLACE] Node n = pred.getValue (  ) ;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^return false;^276^^^^^262^277^[REPLACE] return true;^[METHOD] allPathsReturn [TYPE] boolean [PARAMETER] Node block [CLASS] InstrumentReturns   [TYPE]  ControlFlowAnalysis cfa  [TYPE]  DiGraphNode pred  [TYPE]  boolean false  true  [TYPE]  int functionId  [TYPE]  Node block  n  returnPathsParent  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^if  ( n.getType (  )   ==  Token.FUNCTION )  {^283^^^^^282^333^[REPLACE] if  ( n.getType (  )  != Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int id = functionNames.getFunctionId ( parent ) ;^287^^^^^282^333^[REPLACE] int id = functionNames.getFunctionId ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( id  >  0 )  {^288^^^^^282^333^[REPLACE] if  ( id < 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( reportFunctionName.isEmpty (  )  )  {^293^^^^^282^333^[REPLACE] if  ( !reportFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^293^294^295^296^297^282^333^[ADD] if  ( !reportFunctionName.isEmpty (  )  )  { Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ; Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^id    ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = new Node ( Token.EXPR_RESULT, parent ) ;^298^^^^^282^333^[REPLACE] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^298^^^^^282^333^[ADD] Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newString ( id )  ) ;^295^296^297^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( !reportFunctionName.isEmpty (  )  )  {^303^^^^^282^333^[REPLACE] if  ( !reportFunctionExitName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^282^333^[REPLACE] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^304^305^^^^282^333^[ADD] Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ; ( new InstrumentReturns ( id )  ) .process ( body ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( definedFunctionName.isEmpty (  )  )  {^308^^^^^282^333^[REPLACE] if  ( !definedFunctionName.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( id < 0 )  {^315^^^^^282^333^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  (  type == Token.SCRIPT )  {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  parent;^324^^^^^315^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^beforeChild =  null;^327^^^^^315^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node beforeChild = parent;^320^^^^^315^330^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = ancestor.getType (  ) ;^321^^^^^315^330^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = n.getType (  ) ;^322^^^^^315^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  compiler.getNodeForCodeInsertion ( null ) ;^317^^^^^282^333^[REPLACE] addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = ancestor.getType (  ) ;^316^^^^^282^333^[REPLACE] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^282^333^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  null;^324^^^^^282^333^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^beforeChild =  parent;^327^^^^^282^333^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node .newString ( null )   ) ;^309^310^311^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = NodeUtil.isFunctionDeclaration ( parent ) ;^312^^^^^282^333^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node addingRoot = true;^314^^^^^282^333^[REPLACE] Node addingRoot = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node addingRoot = null;^320^^^^^282^333^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = ancestor.getType (  ) ;^321^^^^^282^333^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = parent.getType (  ) ;^322^^^^^282^333^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^if  ( type == Token.BLOCK ) {^323^^^^^315^330^[REPLACE] if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^addingRoot = ancestor;break;^323^324^325^326^^315^330^[ADD] if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^324^^^^^315^330^[ADD] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  null;^324^^^^^315^330^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^beforeChild =  parent;^327^^^^^315^330^[REPLACE] beforeChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^327^328^^^^315^330^[ADD] beforeChild = ancestor; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^321^322^323^324^325^315^330^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^int type = ancestor .getAncestors (  )  ;^322^^^^^315^330^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REMOVE]^if  (  ( n.getType (  )  )  !=  ( FUNCTION )  )  {     return ; }^323^^^^^282^333^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^addingRoot =  parent;^324^^^^^282^333^[REPLACE] addingRoot = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^317^318^^^^282^333^[ADD] addingRoot = compiler.getNodeForCodeInsertion ( module ) ; addingRoot.addChildToFront ( expr ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^break;^324^325^^^^282^333^[ADD] addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newString ( id )  ) ;^309^310^311^^^282^333^[REPLACE] Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node expr = NodeUtil.isFunctionDeclaration ( call ) ;^312^^^^^282^333^[REPLACE] Node expr = NodeUtil.newExpr ( call ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^316^^^^^282^333^[ADD] JSModule module = t.getModule (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[REPLACE]^Node beforeChild = parent;^320^^^^^282^333^[REPLACE] Node beforeChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
[ADD]^^321^322^323^324^325^282^333^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.BLOCK || type == Token.SCRIPT )  { addingRoot = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InstrumentCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node addingRoot  ancestor  beforeChild  body  call  expr  n  parent  [TYPE]  JSModule module  [TYPE]  int id  type 
