[REPLACE]^static  DiagnosticType CONST_REASSIGNED_VALUE_ERROR = DiagnosticType.error ( "JSC_CONSTANT_REASSIGNED_VALUE_ERROR", "constant {0} assigned a value more than once" ) ;^38^39^40^41^^38^41^[REPLACE] static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR = DiagnosticType.error ( "JSC_CONSTANT_REASSIGNED_VALUE_ERROR", "constant {0} assigned a value more than once" ) ;^ [CLASS] ConstCheck  
[REPLACE]^private  AbstractCompiler compiler;^43^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ConstCheck  
[REPLACE]^private  Set<Scope.Var> initializedConstants;^44^^^^^^^[REPLACE] private final Set<Scope.Var> initializedConstants;^ [CLASS] ConstCheck  
[REPLACE]^this.compiler =  null;^50^^^^^49^52^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR 
[REPLACE]^this.initializedConstants  = null ;^51^^^^^49^52^[REPLACE] this.initializedConstants = new HashSet<Scope.Var> (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR 
[REPLACE]^initializedConstants.add ( var ) ;^58^^^^^57^59^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Node externs  root 
[REPLACE]^if  ( parent != null && parent.getType (  )  != Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^64^122^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^67^68^69^70^71^64^122^[ADD] if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  { String name = n.getString (  ) ; Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( var )  )  {^72^^^^^67^79^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^72^73^74^75^76^67^79^[ADD] if  ( isConstant ( var )  )  { if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.add ( var )  )  {^73^^^^^67^79^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( null ) ;^76^^^^^67^79^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^74^^^^^67^79^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^74^^^^^67^79^[ADD] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( parent != null && parent.getType (  )  == Token.VAR &&^73^^^^^67^79^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^73^74^75^76^77^67^79^[ADD] if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants .contains ( var )  ;^76^^^^^67^79^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^reportError ( t, parent, name ) ;^74^^^^^67^79^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String parentame = n.getString (  ) ;^70^^^^^67^79^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^71^^^^^67^79^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( var )  )  {^72^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( null )  )  {^73^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^reportError ( t, n, name ) ;initializedConstants.add ( var ) ;^73^74^75^76^77^64^122^[ADD] if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.contains ( null ) ;^76^^^^^73^77^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^reportError ( t, parent, name ) ;^74^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^74^^^^^64^122^[ADD] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( parent != null && parent.getType (  )  == Token.VAR &&^73^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( null ) ;^76^^^^^73^77^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^74^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.NAME )  {^95^^^^^64^122^[REPLACE] if  ( lhs.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( var )  )  {^98^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( 1 )  )  {^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^reportError ( t, n, name ) ;initializedConstants.add ( var ) ;^99^100^101^102^103^64^122^[ADD] if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( null ) ;^102^^^^^99^103^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REMOVE]^if  ( isConstant ( var )  )  { if  ( initializedConstants.contains ( var )  )  {^102^^^^^99^103^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^reportError ( t, parent, name ) ;^100^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( null )  )  {^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^102^^^^^99^103^[ADD] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^100^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = lhs.getType (  ) ;^96^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^97^^^^^64^122^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.add ( var )  )  {^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^99^100^101^102^103^64^122^[ADD] if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( this ) ;^102^^^^^99^103^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( parent != null && parent.getType (  )  == Token.VAR &&^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.contains ( false ) ;^102^^^^^99^103^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( lhs.getType (  )   !=  Token.NAME )  {^112^^^^^64^122^[REPLACE] if  ( lhs.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( var )  )  {^115^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^reportError ( t, n, name ) ;^115^116^117^^^64^122^[ADD] if  ( isConstant ( var )  )  { reportError ( t, n, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^116^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = lhs.getType (  ) ;^113^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^113^114^^^^64^122^[ADD] String name = lhs.getString (  ) ; Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Scope.Var var = t .traverse ( compiler , n , 1 )  .getVar ( name ) ;^114^^^^^64^122^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( isConstant ( 0 )  )  {^115^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^reportError ( t, parent, name ) ;^116^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n .getFirstChild (  )  ;^70^^^^^64^122^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^71^^^^^64^122^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Node lhs = parent.getString (  ) ;^94^^^^^64^122^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = lhs .getFirstChild (  )  ;^96^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^97^^^^^64^122^[ADD] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Node lhs = parent .getString (  )  ;^111^^^^^64^122^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^111^^^^^64^122^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^114^^^^^64^122^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^return var ;^129^^^^^128^130^[REPLACE] return var != null && var.isConst (  ) ;^[METHOD] isConstant [TYPE] boolean [PARAMETER] Var var [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var 
[REPLACE]^initializedConstants.add ( var ) ;^136^^^^^135^137^[REPLACE] compiler.report ( JSError.make ( t, n, CONST_REASSIGNED_VALUE_ERROR, name )  ) ;^[METHOD] reportError [TYPE] void [PARAMETER] NodeTraversal t Node n String name [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Node n  [TYPE]  String name 
