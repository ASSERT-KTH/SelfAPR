[REPLACE]^private static  Logger logger = Logger.getLogger ( UnreachableCodeElimination.class.getName (  )  ) ;^47^48^^^^47^48^[REPLACE] private static final Logger logger = Logger.getLogger ( UnreachableCodeElimination.class.getName (  )  ) ;^ [CLASS] UnreachableCodeElimination  
[REPLACE]^Deque<ControlFlowGraph<Node>> cfgStack ;^53^54^^^^53^54^[REPLACE] Deque<ControlFlowGraph<Node>> cfgStack = new LinkedList<ControlFlowGraph<Node>> (  ) ;^ [CLASS] UnreachableCodeElimination  
[REPLACE]^ControlFlowGraph<Node> curCfg  = null ;^56^^^^^^^[REPLACE] ControlFlowGraph<Node> curCfg = null;^ [CLASS] UnreachableCodeElimination  
[REPLACE]^this.compiler =  null;^60^^^^^58^62^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeNoOpStatements [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg 
[REPLACE]^this.removeNoOpStatements =  true;^61^^^^^58^62^[REPLACE] this.removeNoOpStatements = removeNoOpStatements;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean removeNoOpStatements [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg 
[REPLACE]^Node body = n.getFirstChild (  ) ;^66^^^^^65^76^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^69^^^^^65^76^[REPLACE] ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^cfa.process ( false, scope.getRootNode (  )  ) ;^70^^^^^65^76^[REPLACE] cfa.process ( null, scope.getRootNode (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^70^^^^^65^76^[ADD] cfa.process ( null, scope.getRootNode (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Scope scope = t.getScope (  ) ;^70^^^^^65^76^[REPLACE] cfa.process ( null, scope.getRootNode (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^cfgStack .pop (  )  ;^71^^^^^65^76^[REPLACE] cfgStack.push ( curCfg ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^71^^^^^65^76^[ADD] cfgStack.push ( curCfg ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^curCfg =  null.getCfg (  ) ;^72^^^^^65^76^[REPLACE] curCfg = cfa.getCfg (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^72^^^^^65^76^[ADD] curCfg = cfa.getCfg (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^new GraphReachability<Node, ControlFlowGraph.Branch> ( curCfg ) .compute ( curCfg .getNode ( true )  .getValue (  )  ) ;^74^75^^^^65^76^[REPLACE] new GraphReachability<Node, ControlFlowGraph.Branch> ( curCfg ) .compute ( curCfg.getEntry (  ) .getValue (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Scope scope = t.getScope (  ) ;^75^^^^^65^76^[REPLACE] .compute ( curCfg.getEntry (  ) .getValue (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^curCfg  =  curCfg ;^80^^^^^79^81^[REPLACE] curCfg = cfgStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg 
[REPLACE]^NodeTraversal .getScope (  )  ;^85^^^^^84^86^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node externs  root 
[REPLACE]^if  ( parent != null )  {^90^^^^^89^118^[REPLACE] if  ( parent == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( n.removeChild (  )  == Token.FUNCTION ) {^93^^^^^89^118^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REMOVE]^if  (  (  ( n.getType (  )  )  ==  ( EMPTY )  )  ||  (  (  ( n.getType (  )  )  ==  ( BLOCK )  )  &&  ( ! ( n.hasChildren (  )  )  )  )  )  {     return ; }^93^^^^^89^118^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( n.getType (  )   ||  Token.TRY )  {^97^^^^^89^118^[REPLACE] if  ( n.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock != null ) {^102^103^^^^89^118^[REPLACE] if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^n =  finallyBlock;^107^^^^^102^108^[REPLACE] n = body;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^n =  finallyBlock;^107^^^^^89^118^[REPLACE] n = body;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node body = parent.getFirstChild (  ) ;^98^^^^^89^118^[REPLACE] Node body = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node catchOrFinallyBlock = finallyBlock.getType (  ) ;^99^^^^^89^118^[REPLACE] Node catchOrFinallyBlock = body.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node finallyBlock = parent.getType (  ) ;^100^^^^^89^118^[REPLACE] Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^100^^^^^89^118^[ADD] Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  (  !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^[REPLACE] if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^107^^^^^102^108^[ADD] n = body;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^98^99^^^^89^118^[ADD] Node body = n.getFirstChild (  ) ; Node catchOrFinallyBlock = body.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node catchOrFinallyBlock = finallyBlock.getNext (  ) ;^99^^^^^89^118^[REPLACE] Node catchOrFinallyBlock = body.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node finallyBlock = parent.getNext (  ) ;^100^^^^^89^118^[REPLACE] Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^GraphNode<Node, Branch> gNode = curCfg .getEntry (  )  ;^110^^^^^89^118^[REPLACE] GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( gNode != this  )  {^111^^^^^89^118^[REPLACE] if  ( gNode == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^return;^111^112^113^^^89^118^[ADD] if  ( gNode == null )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE && ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^[REPLACE] if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^114^115^116^117^^89^118^[ADD] if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  { removeDeadExprStatementSafely ( n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^removeDeadExprStatementSafely ( finallyBlock, parent ) ;^116^^^^^114^117^[REPLACE] removeDeadExprStatementSafely ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( parent.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && n.hasChildren (  )  )  )  {^121^122^^^^120^143^[REPLACE] if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[ADD]^^121^122^^124^125^120^143^[ADD] if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  { return; }^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^NodeUtil.mayHaveSideEffects ( parent ) ;^137^^^^^120^143^[REPLACE] NodeUtil.redeclareVarsInsideBranch ( n ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[ADD]^^137^^^^^120^143^[ADD] NodeUtil.redeclareVarsInsideBranch ( n ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^Scope scope = t.getScope (  ) ;^138^^^^^120^143^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^if  ( logger.fine ( Level.FINE )  )  {^139^^^^^120^143^[REPLACE] if  ( logger.isLoggable ( Level.FINE )  )  {^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[ADD]^logger.fine ( "Removing " + n.toString (  )  ) ;^139^140^141^^^120^143^[ADD] if  ( logger.isLoggable ( Level.FINE )  )  { logger.fine ( "Removing " + n.toString (  )  ) ; }^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^logger.fine (1 + parent.toString (  )  ) ;^140^^^^^120^143^[REPLACE] logger.fine ( "Removing " + n.toString (  )  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REMOVE]^.compute ( curCfg.getEntry (  ) .getValue (  )  ) ;^140^^^^^120^143^[REMOVE] ^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^logger.fine ( "Removing " + parent.toString (  )  ) ;^140^^^^^120^143^[REPLACE] logger.fine ( "Removing " + n.toString (  )  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^NodeUtil .removeChild ( n )  ;^142^^^^^120^143^[REPLACE] NodeUtil.removeChild ( parent, n ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
