[REPLACE]^static final CalendarConverter INSTANCE ;^43^^^^^^^[REPLACE] static final CalendarConverter INSTANCE = new CalendarConverter (  ) ;^ [CLASS] CalendarConverter  
[REPLACE]^return JulianChronology.getInstance ( zone ) ;^49^^^^^48^50^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] CalendarConverter() [PARAMETER] [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^if  ( chrono == null )  {^68^^^^^67^80^[REPLACE] if  ( chrono != null )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[ADD]^^68^69^70^^^67^80^[ADD] if  ( chrono != null )  { return chrono; }^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^return JulianChronology.getInstance ( zone ) ;^69^^^^^67^80^[REPLACE] return chrono;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^Calendar calendar =  ( Calendar )  object;^71^^^^^67^80^[REPLACE] Calendar cal =  ( Calendar )  object;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^DateTimeZone zone = false;^72^^^^^67^80^[REPLACE] DateTimeZone zone = null;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[ADD]^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;zone = DateTimeZone.getDefault (  ) ;^73^74^^76^77^67^80^[ADD] try { zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ; } catch  ( IllegalArgumentException ex )  { zone = DateTimeZone.getDefault (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^zone =  DateTimeZone.forTimeZone ( null.getTimeZone (  )  ) ;^74^^^^^67^80^[REPLACE] zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^zone  =  zone ;^77^^^^^67^80^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^return JulianChronology.getInstance ( zone ) ;^79^^^^^67^80^[REPLACE] return getChronology ( cal, zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true  [TYPE]  Calendar cal  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  DateTimeZone zone  [TYPE]  IllegalArgumentException ex 
[REPLACE]^} else if  ( object instanceof GregorianCalendar )  {^94^^^^^93^109^[REPLACE] if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  if  ( ! object instanceof GregorianCalendar )  {^96^^^^^93^109^[REPLACE] } else if  ( object instanceof GregorianCalendar )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return   zone   ;^107^^^^^93^109^[REPLACE] return ISOChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^if  ( cutover  ||  Long.MIN_VALUE )  {^99^^^^^93^109^[REPLACE] if  ( cutover == Long.MIN_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^^99^100^101^102^^93^109^[ADD] if  ( cutover == Long.MIN_VALUE )  { return GregorianChronology.getInstance ( zone ) ; } else if  ( cutover == Long.MAX_VALUE )  { return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  if  ( cutover  !=  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 2 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return   zone   ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 5 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return   zone   ;^100^^^^^93^109^[REPLACE] return GregorianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^} else if  ( cutover  ||  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 1 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 3 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^Calendar calendar =  ( Calendar )  object;^97^^^^^93^109^[REPLACE] GregorianCalendar gc =  ( GregorianCalendar )  object;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^^97^98^^^^93^109^[ADD] GregorianCalendar gc =  ( GregorianCalendar )  object; long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^DateTimeZone zone = null;^98^^^^^93^109^[REPLACE] long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^if  ( cutover  &&  Long.MIN_VALUE )  {^99^^^^^93^109^[REPLACE] if  ( cutover == Long.MIN_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  else {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology .getInstance ( zone , cutover , true )  ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology .getInstance ( zone )  ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  if  ( cutover  &&  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^^97^^^^^93^109^[ADD] GregorianCalendar gc =  ( GregorianCalendar )  object;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return   zone   ;^95^^^^^93^109^[REPLACE] return BuddhistChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  else {^96^^^^^93^109^[REPLACE] } else if  ( object instanceof GregorianCalendar )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REMOVE]^if  ( cutover ==  ( MIN_VALUE )  )  {     return getInstance ( zone ) ; }else     if  ( cutover ==  ( MAX_VALUE )  )  {         return getInstance ( zone ) ;     }else {         return getInstance ( zone, cutover, 4 ) ;     }^96^^^^^93^109^[REMOVE] ^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 4 >> 2 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  if  ( cutover  ||  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology .getInstance ( zone , cutover , false )  ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 4L ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REMOVE]^if  ( cutover ==  ( MIN_VALUE )  )  {     return getInstance ( zone ) ; }else     if  ( cutover ==  ( MAX_VALUE )  )  {         return getInstance ( zone ) ;     }else {         return getInstance ( zone, cutover, 4 ) ;     }^101^^^^^93^109^[REMOVE] ^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^} else if  ( cutover  &&  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return BuddhistChronology.getInstance ( zone ) ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance ( zone ) ;^95^^^^^93^109^[REPLACE] return BuddhistChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance ( zone ) ;^100^^^^^93^109^[REPLACE] return GregorianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 0 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^Calendar cal =  ( Calendar )  object;^121^^^^^120^123^[REPLACE] Calendar calendar =  ( Calendar )  object;^[METHOD] getInstantMillis [TYPE] long [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  boolean false  true  [TYPE]  Calendar calendar 
[ADD]^^121^^^^^120^123^[ADD] Calendar calendar =  ( Calendar )  object;^[METHOD] getInstantMillis [TYPE] long [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  boolean false  true  [TYPE]  Calendar calendar 
[REPLACE]^return calendar.getTimeZone (  ) .getTime (  ) ;^122^^^^^120^123^[REPLACE] return calendar.getTime (  ) .getTime (  ) ;^[METHOD] getInstantMillis [TYPE] long [PARAMETER] Object object Chronology chrono [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  Object object  [TYPE]  Chronology chrono  [TYPE]  boolean false  true  [TYPE]  Calendar calendar 
[REPLACE]^return calendar.getTime (  ) .getTime (  ) ;^132^^^^^131^133^[REPLACE] return Calendar.class;^[METHOD] getSupportedType [TYPE] Class [PARAMETER] [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  boolean false  true 
