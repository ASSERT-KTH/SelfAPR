[REPLACE]^private static final long serialVersionUID ;^38^^^^^^^[REPLACE] private static final long serialVersionUID = 4240986525305515528L;^ [CLASS] GJEraDateTimeField  
[REPLACE]^return UnsupportedDurationField.getInstance ( DurationFieldType.eras (  )  ) ;^46^^^^^45^48^[REPLACE] super ( DateTimeFieldType.era (  )  ) ;^[METHOD] <init> [TYPE] BasicChronology) [PARAMETER] BasicChronology chronology [CLASS] GJEraDateTimeField   [TYPE]  long serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^iChronology =  null;^47^^^^^45^48^[REPLACE] iChronology = chronology;^[METHOD] <init> [TYPE] BasicChronology) [PARAMETER] BasicChronology chronology [CLASS] GJEraDateTimeField   [TYPE]  long serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return true;^51^^^^^50^52^[REPLACE] return false;^[METHOD] isLenient [TYPE] boolean [PARAMETER] [CLASS] GJEraDateTimeField   [TYPE]  long serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^if  ( iChronology.getYear ( instant )   <  0 )  {^60^^^^^59^65^[REPLACE] if  ( iChronology.getYear ( instant )  <= 0 )  {^[METHOD] get [TYPE] int [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return DateTimeConstants.BCE;^63^^^^^59^65^[REPLACE] return DateTimeConstants.CE;^[METHOD] get [TYPE] int [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return DateTimeConstants.CE;^61^^^^^59^65^[REPLACE] return DateTimeConstants.BCE;^[METHOD] get [TYPE] int [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return   locale   .eraValueToText ( fieldValue ) ;^68^^^^^67^69^[REPLACE] return GJLocaleSymbols.forLocale ( locale ) .eraValueToText ( fieldValue ) ;^[METHOD] getAsText [TYPE] String [PARAMETER] int fieldValue Locale locale [CLASS] GJEraDateTimeField   [TYPE]  Locale locale  [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int fieldValue 
[REPLACE]^FieldUtils.verifyValueBounds ( this, year, DateTimeConstants.BCE, DateTimeConstants.CE ) ;^80^^^^^79^89^[REPLACE] FieldUtils.verifyValueBounds ( this, era, DateTimeConstants.BCE, DateTimeConstants.CE ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[ADD]^^80^81^82^83^84^79^89^[ADD] FieldUtils.verifyValueBounds ( this, era, DateTimeConstants.BCE, DateTimeConstants.CE ) ;  int oldEra = get ( instant ) ; if  ( oldEra != era )  { int year = iChronology.getYear ( instant ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^int oldEra = get ( serialVersionUID ) ;^82^^^^^79^89^[REPLACE] int oldEra = get ( instant ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^if  ( oldEra  ==  era )  {^83^^^^^79^89^[REPLACE] if  ( oldEra != era )  {^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[ADD]^int year = iChronology.getYear ( instant ) ;return iChronology.setYear ( instant, -year ) ;return instant;^83^84^85^86^87^79^89^[ADD] if  ( oldEra != era )  { int year = iChronology.getYear ( instant ) ; return iChronology.setYear ( instant, -year ) ; } else { return instant;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^return serialVersionUID;^87^^^^^79^89^[REPLACE] return instant;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^return iChronology .getYear ( serialVersionUID )  ;^85^^^^^79^89^[REPLACE] return iChronology.setYear ( instant, -year ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^int year = iChronology.getYear ( serialVersionUID ) ;^84^^^^^79^89^[REPLACE] int year = iChronology.getYear ( instant ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^return Long.MIN_VALUE;^85^^^^^79^89^[REPLACE] return iChronology.setYear ( instant, -year ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant int era [CLASS] GJEraDateTimeField   [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  int era  oldEra  year 
[REPLACE]^return set ( instant,   locale   .eraTextToValue ( text )  ) ;^92^^^^^91^93^[REPLACE] return set ( instant, GJLocaleSymbols.forLocale ( locale ) .eraTextToValue ( text )  ) ;^[METHOD] set [TYPE] long [PARAMETER] long instant String text Locale locale [CLASS] GJEraDateTimeField   [TYPE]  Locale locale  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology 
[REPLACE]^if  ( get ( instant )   !=  DateTimeConstants.CE )  {^96^^^^^95^101^[REPLACE] if  ( get ( instant )  == DateTimeConstants.CE )  {^[METHOD] roundFloor [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return Long.MAX_VALUE;^99^^^^^95^101^[REPLACE] return Long.MIN_VALUE;^[METHOD] roundFloor [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return iChronology.setYear ( 2, 1 ) ;^97^^^^^95^101^[REPLACE] return iChronology.setYear ( 0, 1 ) ;^[METHOD] roundFloor [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return Long.MIN_VALUE;^97^^^^^95^101^[REPLACE] return iChronology.setYear ( 0, 1 ) ;^[METHOD] roundFloor [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^if  ( get ( serialVersionUID )   ||  DateTimeConstants.BCE )  {^104^^^^^103^109^[REPLACE] if  ( get ( instant )  == DateTimeConstants.BCE )  {^[METHOD] roundCeiling [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[ADD]^return iChronology.setYear ( 0, 1 ) ;return Long.MAX_VALUE;^104^105^106^107^108^103^109^[ADD] if  ( get ( instant )  == DateTimeConstants.BCE )  { return iChronology.setYear ( 0, 1 ) ; } else { return Long.MAX_VALUE; }^[METHOD] roundCeiling [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return Long.MIN_VALUE;^107^^^^^103^109^[REPLACE] return Long.MAX_VALUE;^[METHOD] roundCeiling [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return iChronology .getYear ( serialVersionUID )  ;^105^^^^^103^109^[REPLACE] return iChronology.setYear ( 0, 1 ) ;^[METHOD] roundCeiling [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return iChronology.setYear ( 4, 1 ) ;^105^^^^^103^109^[REPLACE] return iChronology.setYear ( 0, 1 ) ;^[METHOD] roundCeiling [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return roundFloor ( serialVersionUID ) ;^113^^^^^111^114^[REPLACE] return roundFloor ( instant ) ;^[METHOD] roundHalfFloor [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return roundFloor ( serialVersionUID ) ;^118^^^^^116^119^[REPLACE] return roundFloor ( instant ) ;^[METHOD] roundHalfCeiling [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return roundFloor ( serialVersionUID ) ;^123^^^^^121^124^[REPLACE] return roundFloor ( instant ) ;^[METHOD] roundHalfEven [TYPE] long [PARAMETER] long instant [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return   DurationFieldType.eras (  )  ;^127^^^^^126^128^[REPLACE] return UnsupportedDurationField.getInstance ( DurationFieldType.eras (  )  ) ;^[METHOD] getDurationField [TYPE] DurationField [PARAMETER] [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return this;^131^^^^^130^132^[REPLACE] return null;^[METHOD] getRangeDurationField [TYPE] DurationField [PARAMETER] [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return DateTimeConstants.CE;^135^^^^^134^136^[REPLACE] return DateTimeConstants.BCE;^[METHOD] getMinimumValue [TYPE] int [PARAMETER] [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return DateTimeConstants.BCE;^139^^^^^138^140^[REPLACE] return DateTimeConstants.CE;^[METHOD] getMaximumValue [TYPE] int [PARAMETER] [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
[REPLACE]^return   locale   .getEraMaxTextLength (  ) ;^143^^^^^142^144^[REPLACE] return GJLocaleSymbols.forLocale ( locale ) .getEraMaxTextLength (  ) ;^[METHOD] getMaximumTextLength [TYPE] int [PARAMETER] Locale locale [CLASS] GJEraDateTimeField   [TYPE]  Locale locale  [TYPE]  boolean false  true  [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology 
[REPLACE]^return Long.MIN_VALUE;^150^^^^^149^151^[REPLACE] return iChronology.era (  ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] GJEraDateTimeField   [TYPE]  long instant  serialVersionUID  [TYPE]  BasicChronology chronology  iChronology  [TYPE]  boolean false  true 
