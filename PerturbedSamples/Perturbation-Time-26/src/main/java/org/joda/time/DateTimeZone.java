[REPLACE]^private static   short  serialVersionUID = 5546345482340108586L;^92^^^^^^^[REPLACE] private static final long serialVersionUID = 5546345482340108586L;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^public static final DateTimeZone UTC =  new FixedDateTimeZone ( id, null, offset, offset )  ;^95^^^^^^^[REPLACE] public static final DateTimeZone UTC = new FixedDateTimeZone ( "UTC", "UTC", 0, 0 ) ;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  Provider cProvider;^98^^^^^^^[REPLACE] private static Provider cProvider;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  NameProvider cNameProvider;^100^^^^^^^[REPLACE] private static NameProvider cNameProvider;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  volatile DateTimeZone cDefault;^104^^^^^^^[REPLACE] private static volatile DateTimeZone cDefault;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;^109^^^^^^^[REPLACE] private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private final  int  iID;^680^^^^^^^[REPLACE] private final String iID;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private static final long serialVersionUID = -6471952376487863581;^1222^^^^^^^[REPLACE] private static final long serialVersionUID = -6471952376487863581L;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private transient  char  iID;^1224^^^^^^^[REPLACE] private transient String iID;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^if  ( id != null )  {^689^^^^^688^693^[REPLACE] if  ( id == null )  {^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[ADD]^^689^690^691^^^688^693^[ADD] if  ( id == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^690^^^^^688^693^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[ADD]^^690^^^^^688^693^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[REPLACE]^return ;^690^^^^^688^693^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[REPLACE]^iID =  null;^692^^^^^688^693^[REPLACE] iID = id;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[ADD]^^692^^^^^688^693^[ADD] iID = id;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[REPLACE]^iID =  null;^1231^^^^^1230^1232^[REPLACE] iID = id;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[ADD]^^1231^^^^^1230^1232^[ADD] iID = id;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone temp = null;^133^^^^^132^162^[REPLACE] DateTimeZone zone = cDefault;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != null )  {^134^^^^^132^162^[REPLACE] if  ( zone == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != null )  {^137^^^^^132^162^[REPLACE] if  ( zone == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (iID == false )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp =  forID ( iID ) ;^143^^^^^132^162^[REPLACE] temp = forID ( id ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != null )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp ;^149^^^^^132^162^[REPLACE] temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != null )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp  =  temp ;^155^^^^^132^162^[REPLACE] temp = UTC;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^String id = System.getProperty ( "user.timezone" ) ;temp = forID ( id ) ;^139^140^141^142^143^132^162^[ADD] try { try { String id = System.getProperty ( "user.timezone" ) ; if  ( id != null )  { temp = forID ( id ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id ==iID )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^temp = forID ( id ) ;^142^143^144^^^132^162^[ADD] if  ( id != null )  { temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( temp != null )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp  = null ;^149^^^^^132^162^[REPLACE] temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^String id = System.getProperty ( "user.timezone" ) ;temp = forID ( id ) ;^140^141^142^143^144^132^162^[ADD] try { String id = System.getProperty ( "user.timezone" ) ; if  ( id != null )  { temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id == null )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^String id =   "user.timezone"   ;^141^^^^^132^162^[REPLACE] String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^141^^^^^132^162^[ADD] String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^145^146^147^^^132^162^[ADD] catch  ( RuntimeException ex )  {  }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp =  forID ( null ) ;^143^^^^^132^162^[REPLACE] temp = forID ( id ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp ;^155^^^^^132^162^[REPLACE] temp = UTC;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^cDefault =  zone^157^^^^^132^162^[REPLACE] cDefault = zone = temp;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone temp = false;^138^^^^^132^162^[REPLACE] DateTimeZone temp = null;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^151^152^153^^^132^162^[ADD] catch  ( IllegalArgumentException ex )  {  }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (iID == true )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^143^144^^^^132^162^[ADD] temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp  =  temp ;^149^^^^^132^162^[REPLACE] temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != null )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID == null )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^String id = System .getSecurityManager (  )  ;^141^^^^^132^162^[REPLACE] String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID == this )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^zone  = null ;^136^^^^^132^162^[REPLACE] zone = cDefault;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^157^^^^^132^162^[ADD] cDefault = zone = temp;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone temp = this;^138^^^^^132^162^[REPLACE] DateTimeZone temp = null;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^138^^^^^132^162^[ADD] DateTimeZone temp = null;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != this )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^148^149^150^^^132^162^[ADD] if  ( temp == null )  { temp = forTimeZone ( TimeZone.getDefault (  )  ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != true )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^154^155^156^^^132^162^[ADD] if  ( temp == null )  { temp = UTC; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^155^^^^^132^162^[ADD] temp = UTC;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id == this  )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp  = null ;^155^^^^^132^162^[REPLACE] temp = UTC;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (iID == null )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( temp != this  )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != false )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID == true )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^148^149^150^^^132^162^[ADD] if  ( temp == null )  { temp = forTimeZone ( TimeZone.getDefault (  )  ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id == false )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^zone ;^136^^^^^132^162^[REPLACE] zone = cDefault;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^161^^^^^132^162^[REPLACE] return zone;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^String id = System.getProperty ( "user.timezone" ) ;^174^^^^^173^184^[REPLACE] SecurityManager sm = System.getSecurityManager (  ) ;^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[ADD]^^174^^^^^173^184^[ADD] SecurityManager sm = System.getSecurityManager (  ) ;^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^if  ( sm == null )  {^175^^^^^173^184^[REPLACE] if  ( sm != null )  {^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^176^^^^^173^184^[REPLACE] sm.checkPermission ( new JodaTimePermission ( "DateTimeZone.setDefault" )  ) ;^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != null )  {^178^^^^^173^184^[REPLACE] if  ( zone == null )  {^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[ADD]^^178^179^180^^^173^184^[ADD] if  ( zone == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^179^^^^^173^184^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^cDefault =  null;^182^^^^^173^184^[REPLACE] cDefault = zone;^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[ADD]^^182^^^^^173^184^[ADD] cDefault = zone;^[METHOD] setDefault [TYPE] void [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id != null )  {^204^^^^^203^224^[REPLACE] if  ( id == null )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^205^^^^^203^224^[REPLACE] return getDefault (  ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID.startsWith ( "UTC" )  )  {^207^^^^^203^224^[REPLACE] if  ( id.equals ( "UTC" )  )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^207^208^209^^^203^224^[ADD] if  ( id.equals ( "UTC" )  )  { return DateTimeZone.UTC; }^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^208^^^^^203^224^[REPLACE] return DateTimeZone.UTC;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone zone = cProvider .getAvailableIDs (  )  ;^210^^^^^203^224^[REPLACE] DateTimeZone zone = cProvider.getZone ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone == null )  {^211^^^^^203^224^[REPLACE] if  ( zone != null )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return zone;^211^212^213^^^203^224^[ADD] if  ( zone != null )  { return zone; }^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^212^^^^^203^224^[REPLACE] return zone;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id .substring ( offset )   && id^214^^^^^203^224^[REPLACE] if  ( id.startsWith ( "+" )  || id.startsWith ( "-" )  )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  ||  0L )  {^216^^^^^203^224^[REPLACE] if  ( offset == 0L )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return DateTimeZone.UTC;id = printOffset ( offset ) ;return fixedOffsetZone ( id, offset ) ;^216^217^218^219^220^203^224^[ADD] if  ( offset == 0L )  { return DateTimeZone.UTC; } else { id = printOffset ( offset ) ; return fixedOffsetZone ( id, offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = printOffset ( offset ) ; ;^219^^^^^203^224^[REPLACE] id = printOffset ( offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^219^220^^^^203^224^[ADD] id = printOffset ( offset ) ; return fixedOffsetZone ( id, offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( id, millisOffset ) ;^220^^^^^203^224^[REPLACE] return fixedOffsetZone ( id, offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^217^^^^^203^224^[REPLACE] return DateTimeZone.UTC;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( iID, offset ) ;^220^^^^^203^224^[REPLACE] return fixedOffsetZone ( id, offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( convId ) ;^215^^^^^203^224^[REPLACE] int offset = parseOffset ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  &&  0 )  {^216^^^^^203^224^[REPLACE] if  ( offset == 0L )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( iID ) ;^215^^^^^203^224^[REPLACE] int offset = parseOffset ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^215^^^^^203^224^[ADD] int offset = parseOffset ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return ;^223^^^^^203^224^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^223^^^^^203^224^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return forOffsetHoursMinutes ( hoursOffset, 2 ) ;^237^^^^^236^238^[REPLACE] return forOffsetHoursMinutes ( hoursOffset, 0 ) ;^[METHOD] forOffsetHours [TYPE] DateTimeZone [PARAMETER] int hoursOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursOffset  [TYPE]  Provider cProvider 
[REPLACE]^if  (  minutesOffset == 0 )  {^254^^^^^253^273^[REPLACE] if  ( hoursOffset == 0 && minutesOffset == 0 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^254^255^256^^^253^273^[ADD] if  ( hoursOffset == 0 && minutesOffset == 0 )  { return DateTimeZone.UTC; }^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^255^^^^^253^273^[REPLACE] return DateTimeZone.UTC;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset < 0 ) {^257^^^^^253^273^[REPLACE] if  ( minutesOffset < 0 || minutesOffset > 59 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^257^258^259^^^253^273^[ADD] if  ( minutesOffset < 0 || minutesOffset > 59 )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^258^^^^^253^273^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^258^^^^^253^273^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = 1;^260^^^^^253^273^[REPLACE] int offset = 0;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( hoursInMinutes  <= offset )  {^263^^^^^253^273^[REPLACE] if  ( hoursInMinutes < 0 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ; ;^266^^^^^253^273^[REPLACE] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ; ;^264^^^^^253^273^[REPLACE] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^264^^^^^253^273^[ADD] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ;minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;^261^262^263^264^265^253^273^[ADD] try { int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ; if  ( hoursInMinutes < 0 )  { minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ; } else {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( hoursInMinutes  !=  2 )  {^263^^^^^253^273^[REPLACE] if  ( hoursInMinutes < 0 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^offset =  FieldUtils.safeMultiply ( null, DateTimeConstants.MILLIS_PER_MINUTE ) ;^268^^^^^253^273^[REPLACE] offset = FieldUtils.safeMultiply ( minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 0 ) ;^262^^^^^253^273^[REPLACE] int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^266^^^^^253^273^[ADD] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^offset =  FieldUtils.safeMultiply ( hoursOffset, DateTimeConstants.MILLIS_PER_MINUTE ) ;^268^^^^^253^273^[REPLACE] offset = FieldUtils.safeMultiply ( minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^int hoursInMinutes = FieldUtils.safeAdd ( hoursOffset, 0 ) ;^262^^^^^253^273^[REPLACE] int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^270^^^^^253^273^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^return forOffsetMillis ( minutesOffset ) ;^272^^^^^253^273^[REPLACE] return forOffsetMillis ( offset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^String id = System.getProperty ( "user.timezone" ) ;^282^^^^^281^284^[REPLACE] String id = printOffset ( millisOffset ) ;^[METHOD] forOffsetMillis [TYPE] DateTimeZone [PARAMETER] int millisOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int millisOffset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( id, offset ) ;^283^^^^^281^284^[REPLACE] return fixedOffsetZone ( id, millisOffset ) ;^[METHOD] forOffsetMillis [TYPE] DateTimeZone [PARAMETER] int millisOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int millisOffset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != this )  {^302^^^^^301^338^[REPLACE] if  ( zone == null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return getDefault (  ) ;^302^303^304^^^301^338^[ADD] if  ( zone == null )  { return getDefault (  ) ; }^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^303^^^^^301^338^[REPLACE] return getDefault (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^final String id = zone.getDisplayName (  ) ;^305^^^^^301^338^[REPLACE] final String id = zone.getID (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID.equals ( "UTC" )  )  {^306^^^^^301^338^[REPLACE] if  ( id.equals ( "UTC" )  )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return DateTimeZone.UTC;^306^307^308^^^301^338^[ADD] if  ( id.equals ( "UTC" )  )  { return DateTimeZone.UTC; }^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^307^^^^^301^338^[REPLACE] return DateTimeZone.UTC;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone dtz = this;^311^^^^^301^338^[REPLACE] DateTimeZone dtz = null;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^311^^^^^301^338^[ADD] DateTimeZone dtz = null;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^String convId = getConvertedId ( iID ) ;^312^^^^^301^338^[REPLACE] String convId = getConvertedId ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^312^^^^^301^338^[ADD] String convId = getConvertedId ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( convId == false )  {^313^^^^^301^338^[REPLACE] if  ( convId != null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^dtz = cProvider.getZone ( convId ) ;^313^314^315^^^301^338^[ADD] if  ( convId != null )  { dtz = cProvider.getZone ( convId ) ; }^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^dtz = cProvider.getZone ( id ) ; ;^314^^^^^301^338^[REPLACE] dtz = cProvider.getZone ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^314^^^^^301^338^[ADD] dtz = cProvider.getZone ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( dtz != null )  {^316^^^^^301^338^[REPLACE] if  ( dtz == null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^dtz = cProvider.getZone ( convId ) ; ;^317^^^^^301^338^[REPLACE] dtz = cProvider.getZone ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^317^^^^^301^338^[ADD] dtz = cProvider.getZone ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( dtz == false )  {^319^^^^^301^338^[REPLACE] if  ( dtz != null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return cDefault;^320^^^^^301^338^[REPLACE] return dtz;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  (id != null )  {^324^^^^^301^338^[REPLACE] if  ( convId == null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^convId = zone.getDisplayName (  ) ;convId = convId.substring ( 3 ) ;int offset = parseOffset ( convId ) ;^324^325^326^327^328^301^338^[ADD] if  ( convId == null )  { convId = zone.getDisplayName (  ) ; if  ( convId.startsWith ( "GMT+" )  || convId.startsWith ( "GMT-" )  )  { convId = convId.substring ( 3 ) ; int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( convId.startsWith ( "GMT+" )  ) {^326^^^^^301^338^[REPLACE] if  ( convId.startsWith ( "GMT+" )  || convId.startsWith ( "GMT-" )  )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^326^327^328^329^330^301^338^[ADD] if  ( convId.startsWith ( "GMT+" )  || convId.startsWith ( "GMT-" )  )  { convId = convId.substring ( 3 ) ; int offset = parseOffset ( convId ) ; if  ( offset == 0L )  { return DateTimeZone.UTC;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  &&  0L )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^id = printOffset ( offset ) ; ;^332^^^^^329^334^[REPLACE] convId = printOffset ( offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( id, offset ) ;^333^^^^^329^334^[REPLACE] return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^330^^^^^301^338^[REPLACE] return DateTimeZone.UTC;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = convId.substring ( 4 ) ;^327^^^^^301^338^[REPLACE] convId = convId.substring ( 3 ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^id = printOffset ( offset ) ; ;^332^^^^^301^338^[REPLACE] convId = printOffset ( offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( id, offset ) ;^333^^^^^301^338^[REPLACE] return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( id ) ;^328^^^^^301^338^[REPLACE] int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  !=  0L )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId =  null.getDisplayName (  ) ;^325^^^^^301^338^[REPLACE] convId = zone.getDisplayName (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = convId.substring ( 3 + 0 ) ;^327^^^^^301^338^[REPLACE] convId = convId.substring ( 3 ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  !=  serialVersionUID )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = convId.substring ( 2 ) ;^327^^^^^301^338^[REPLACE] convId = convId.substring ( 3 ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^327^328^^^^301^338^[ADD] convId = convId.substring ( 3 ) ; int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^332^^^^^329^334^[ADD] convId = printOffset ( offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^337^^^^^301^338^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  ||  0 )  {^349^^^^^348^366^[REPLACE] if  ( offset == 0 )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^350^^^^^348^366^[REPLACE] return DateTimeZone.UTC;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iFixedOffsetCache != null )  {^352^^^^^348^366^[REPLACE] if  ( iFixedOffsetCache == null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^iFixedOffsetCache  = null ;^353^^^^^348^366^[REPLACE] iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^353^^^^^348^366^[ADD] iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^iFixedOffsetCache  =  iFixedOffsetCache ;^353^^^^^348^366^[REPLACE] iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone zone = cDefault;^355^^^^^348^366^[REPLACE] DateTimeZone zone;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^Reference<DateTimeZone> ref = iFixedOffsetCache.get ( iID ) ;^356^^^^^348^366^[REPLACE] Reference<DateTimeZone> ref = iFixedOffsetCache.get ( id ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^356^^^^^348^366^[ADD] Reference<DateTimeZone> ref = iFixedOffsetCache.get ( id ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( ref == false )  {^357^^^^^348^366^[REPLACE] if  ( ref != null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone == null )  {^359^^^^^348^366^[REPLACE] if  ( zone != null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return zone;^359^360^361^^^348^366^[ADD] if  ( zone != null )  { return zone; }^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^360^^^^^348^366^[REPLACE] return zone;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^zone =  null.get (  ) ;^358^^^^^348^366^[REPLACE] zone = ref.get (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^358^^^^^348^366^[ADD] zone = ref.get (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^zone = new FixedDateTimeZone ( id, this, offset, offset ) ;^363^^^^^348^366^[REPLACE] zone = new FixedDateTimeZone ( id, null, offset, offset ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^iFixedOffsetCache.put ( iID, new SoftReference<DateTimeZone> ( zone )  ) ;^364^^^^^348^366^[REPLACE] iFixedOffsetCache.put ( id, new SoftReference<DateTimeZone> ( zone )  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^365^^^^^348^366^[REPLACE] return zone;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString (  ) ;^374^^^^^373^375^[REPLACE] return cAvailableIDs;^[METHOD] getAvailableIDs [TYPE] Set [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^return provider;^387^^^^^386^388^[REPLACE] return cProvider;^[METHOD] getProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider 
[REPLACE]^String id = System.getProperty ( "user.timezone" ) ;^401^^^^^400^406^[REPLACE] SecurityManager sm = System.getSecurityManager (  ) ;^[METHOD] setProvider [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( sm == null )  {^402^^^^^400^406^[REPLACE] if  ( sm != null )  {^[METHOD] setProvider [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^403^^^^^400^406^[REPLACE] sm.checkPermission ( new JodaTimePermission ( "DateTimeZone.setProvider" )  ) ;^[METHOD] setProvider [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^403^^^^^400^406^[ADD] sm.checkPermission ( new JodaTimePermission ( "DateTimeZone.setProvider" )  ) ;^[METHOD] setProvider [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^setProvider0 ( cProvider ) ;^405^^^^^400^406^[REPLACE] setProvider0 ( provider ) ;^[METHOD] setProvider [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REMOVE]^provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ;^405^^^^^400^406^[REMOVE] ^[METHOD] setProvider [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (cProvider != false )  {^415^^^^^414^431^[REPLACE] if  ( provider == null )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^nameProvider = getDefaultNameProvider (  ) ; ;^416^^^^^414^431^[REPLACE] provider = getDefaultProvider (  ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^Set<String> ids = cProvider.getAvailableIDs (  ) ;^418^^^^^414^431^[REPLACE] Set<String> ids = provider.getAvailableIDs (  ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ids.size (  )  %  0.5  == 0 )  {^419^^^^^414^431^[REPLACE] if  ( ids == null || ids.size (  )  == 0 )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^420^421^^^^414^431^[REPLACE] throw new IllegalArgumentException ( "The provider doesn't have any available ids" ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^420^421^^^^414^431^[ADD] throw new IllegalArgumentException ( "The provider doesn't have any available ids" ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( ids.contains ( "UTC" )  )  {^423^^^^^414^431^[REPLACE] if  ( !ids.contains ( "UTC" )  )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^424^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^424^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( !UTC.forID ( cProvider.getZone ( "UTC" )  )  )  {^426^^^^^414^431^[REPLACE] if  ( !UTC.equals ( provider.getZone ( "UTC" )  )  )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^426^427^428^^^414^431^[ADD] if  ( !UTC.equals ( provider.getZone ( "UTC" )  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new ArithmeticException  (" ")  ; ;^427^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^427^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cNameProvider = nameProvider; ;^429^^^^^414^431^[REPLACE] cProvider = provider;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^429^^^^^414^431^[ADD] cProvider = provider;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cAvailableIDs =  null;^430^^^^^414^431^[REPLACE] cAvailableIDs = ids;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^430^^^^^414^431^[ADD] cAvailableIDs = ids;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^Provider provider = this;^443^^^^^442^474^[REPLACE] Provider provider = null;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( providerClass == null )  {^448^^^^^442^474^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ;Thread thread = Thread.currentThread (  ) ;thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^449^450^451^452^453^442^474^[ADD] try { provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ; ;^450^^^^^442^474^[REPLACE] provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread .getThreadGroup (  )  ;^452^^^^^442^474^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ;^445^446^447^448^449^442^474^[ADD] try { String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ; if  ( providerClass != null )  { try {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( providerClass == true )  {^448^^^^^442^474^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^448^449^450^451^452^442^474^[ADD] if  ( providerClass != null )  { try { provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^452^^^^^442^474^[ADD] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^String providerClass =   "org.joda.time.DateTimeZone.Provider"   ;^446^447^^^^442^474^[REPLACE] String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread.getThreadGroup (  ) ;^452^^^^^442^474^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^String providerClass = System .getSecurityManager (  )  ;^446^447^^^^442^474^[REPLACE] String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^456^457^458^^^442^474^[ADD] catch  ( SecurityException ex )  {  }^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( provider != null )  {^460^^^^^442^474^[REPLACE] if  ( provider == null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;Thread thread = Thread.currentThread (  ) ;thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^461^462^463^464^465^442^474^[ADD] try { provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider ;^462^^^^^442^474^[REPLACE] provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider  =  provider ;^462^^^^^442^474^[REPLACE] provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread.getThreadGroup (  ) ;^464^^^^^442^474^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^464^465^^^^442^474^[ADD] Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  (cProvider != null )  {^469^^^^^442^474^[REPLACE] if  ( provider == null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^469^470^471^^^442^474^[ADD] if  ( provider == null )  { provider = new UTCProvider (  ) ; }^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider = getDefaultProvider (  ) ; ;^470^^^^^442^474^[REPLACE] provider = new UTCProvider (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^470^^^^^442^474^[ADD] provider = new UTCProvider (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^return cProvider;^473^^^^^442^474^[REPLACE] return provider;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^return cProvider;^486^^^^^485^487^[REPLACE] return cNameProvider;^[METHOD] getNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^SecurityManager sm = System .getProperty ( providerClass )  ;^500^^^^^499^505^[REPLACE] SecurityManager sm = System.getSecurityManager (  ) ;^[METHOD] setNameProvider [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^500^^^^^499^505^[ADD] SecurityManager sm = System.getSecurityManager (  ) ;^[METHOD] setNameProvider [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( sm == null )  {^501^^^^^499^505^[REPLACE] if  ( sm != null )  {^[METHOD] setNameProvider [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^502^^^^^499^505^[REPLACE] sm.checkPermission ( new JodaTimePermission ( "DateTimeZone.setNameProvider" )  ) ;^[METHOD] setNameProvider [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^setNameProvider0 ( cNameProvider ) ;^504^^^^^499^505^[REPLACE] setNameProvider0 ( nameProvider ) ;^[METHOD] setNameProvider [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  SecurityManager sm  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( cNameProvider != null )  {^514^^^^^513^518^[REPLACE] if  ( nameProvider == null )  {^[METHOD] setNameProvider0 [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^nameProvider = getDefaultNameProvider (  ) ;^514^515^516^^^513^518^[ADD] if  ( nameProvider == null )  { nameProvider = getDefaultNameProvider (  ) ; }^[METHOD] setNameProvider0 [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^provider = getDefaultProvider (  ) ; ;^515^^^^^513^518^[REPLACE] nameProvider = getDefaultNameProvider (  ) ;^[METHOD] setNameProvider0 [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cProvider = provider; ;^517^^^^^513^518^[REPLACE] cNameProvider = nameProvider;^[METHOD] setNameProvider0 [TYPE] void [PARAMETER] NameProvider nameProvider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^NameProvider nameProvider = true;^529^^^^^528^549^[REPLACE] NameProvider nameProvider = null;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( providerClass == null )  {^532^^^^^528^549^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;Thread thread = Thread.currentThread (  ) ;thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^533^534^535^536^537^528^549^[ADD] try { nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ; ;^534^^^^^528^549^[REPLACE] nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread.getThreadGroup (  ) ;^536^^^^^528^549^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.NameProvider" ) ;nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;^530^531^532^533^534^528^549^[ADD] try { String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.NameProvider" ) ; if  ( providerClass != null )  { try { nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^534^535^536^537^538^528^549^[ADD] nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ; }^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^String providerClass =   "org.joda.time.DateTimeZone.NameProvider"   ;^531^^^^^528^549^[REPLACE] String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.NameProvider" ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread .getThreadGroup (  )  ;^536^^^^^528^549^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^536^^^^^528^549^[ADD] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^540^541^542^^^528^549^[ADD] catch  ( SecurityException ex )  {  }^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( nameProvider != null )  {^544^^^^^528^549^[REPLACE] if  ( nameProvider == null )  {^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^nameProvider = getnew UTCProvider (  )  ; ;^545^^^^^528^549^[REPLACE] nameProvider = new DefaultNameProvider (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^nameProvider = getDefaultNameProvider (  ) ; ;^545^^^^^528^549^[REPLACE] nameProvider = new DefaultNameProvider (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^return cNameProvider;^548^^^^^528^549^[REPLACE] return nameProvider;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^final String id = zone.getID (  ) ;^559^^^^^558^598^[REPLACE] Map<String, String> map = cZoneIdConversion;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^559^^^^^558^598^[ADD] Map<String, String> map = cZoneIdConversion;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( map != null )  {^560^^^^^558^598^[REPLACE] if  ( map == null )  {^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^map  = null ;^562^^^^^558^598^[REPLACE] map = new HashMap<String, String> (  ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^562^^^^^558^598^[ADD] map = new HashMap<String, String> (  ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cZoneIdConversion =  false;^595^^^^^558^598^[REPLACE] cZoneIdConversion = map;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^map ;^562^^^^^558^598^[REPLACE] map = new HashMap<String, String> (  ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cZoneIdConversion =  null;^595^^^^^558^598^[REPLACE] cZoneIdConversion = map;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null.get ( id ) ;^597^^^^^558^598^[REPLACE] return map.get ( id ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return true;^605^^^^^600^618^[REPLACE] return null;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null;^608^^^^^600^618^[REPLACE] return this;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null;^611^^^^^600^618^[REPLACE] return this;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return getClass (  ) .forName (  ) ;^614^^^^^600^618^[REPLACE] return getClass (  ) .getName (  ) ;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^Chronology chrono = new BaseChronology (  )  { public DateTimeZone getZone (  )  {^603^^^^^600^618^[REPLACE] Chronology chrono = new BaseChronology (  )  {^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return - ( int )  offsetFormatter (  ) .withChronology ( chrono ) .toFormatter ( str ) ;^617^^^^^600^618^[REPLACE] return - ( int )  offsetFormatter (  ) .withChronology ( chrono ) .parseMillis ( str ) ;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return false;^605^^^^^604^606^[REPLACE] return null;^[METHOD] getZone [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null;^608^^^^^607^609^[REPLACE] return this;^[METHOD] withUTC [TYPE] Chronology [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null;^611^^^^^610^612^[REPLACE] return this;^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return getClass (  ) .forName (  ) ;^614^^^^^613^615^[REPLACE] return getClass (  ) .getName (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^String convId = getConvertedId ( id ) ;^630^^^^^629^661^[REPLACE] StringBuffer buf = new StringBuffer (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( minutes  <  0 )  {^631^^^^^629^661^[REPLACE] if  ( offset >= 0 )  {^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset = offsetLocal; ;^635^^^^^631^636^[REPLACE] offset = -offset;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^635^^^^^631^636^[ADD] offset = -offset;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf.append ( '-' ) ;^632^^^^^629^661^[REPLACE] buf.append ( '+' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset = offsetLocal; ;^635^^^^^629^661^[REPLACE] offset = -offset;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^int hours = offset  ;^638^^^^^629^661^[REPLACE] int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, hours, 1 ) ;^639^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, hours, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset -= hours  ;^640^^^^^629^661^[REPLACE] offset -= hours *  ( int )  DateTimeConstants.MILLIS_PER_HOUR;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^int minutes = offset  ;^642^^^^^629^661^[REPLACE] int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^buf.append ( ':' ) ;^642^643^^^^629^661^[ADD] int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE; buf.append ( ':' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf .toString (  )  ;^643^^^^^629^661^[REPLACE] buf.append ( ':' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, minutes, 2 - 4 ) ;^644^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, minutes, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REMOVE]^return fixedOffsetZone ( id, millisOffset ) ;^644^^^^^629^661^[REMOVE] ^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset -= minutes  ;^645^^^^^629^661^[REPLACE] offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^645^^^^^629^661^[ADD] offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offset  ||  0 )  {^646^^^^^629^661^[REPLACE] if  ( offset == 0 )  {^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.StringBuffer (  ) ;^647^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^int seconds = offset  ;^650^^^^^629^661^[REPLACE] int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf .toString (  )  ;^651^^^^^629^661^[REPLACE] buf.append ( ':' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, seconds, 1 ) ;^652^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, seconds, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset -=minutes  ;^653^^^^^629^661^[REPLACE] offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offset  &&  0 )  {^654^^^^^629^661^[REPLACE] if  ( offset == 0 )  {^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^654^655^656^^^629^661^[ADD] if  ( offset == 0 )  { return buf.toString (  ) ; }^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.StringBuffer (  ) ;^655^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf .StringBuffer (  )  ;^655^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf.append ( '+' ) ;^658^^^^^629^661^[REPLACE] buf.append ( '.' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, offset, 4 ) ;^659^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, offset, 3 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.StringBuffer (  ) ;^660^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( cOffsetFormatter != null )  {^669^^^^^668^675^[REPLACE] if  ( cOffsetFormatter == null )  {^[METHOD] offsetFormatter [TYPE] DateTimeFormatter [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cOffsetFormatter = new DateTimeFormatterBuilder (  ) .appendTimeZoneOffset ( this, true, 2, 4 ) .toFormatter (  ) ;^670^671^672^^^668^675^[REPLACE] cOffsetFormatter = new DateTimeFormatterBuilder (  ) .appendTimeZoneOffset ( null, true, 2, 4 ) .toFormatter (  ) ;^[METHOD] offsetFormatter [TYPE] DateTimeFormatter [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^674^^^^^668^675^[REPLACE] return cOffsetFormatter;^[METHOD] offsetFormatter [TYPE] DateTimeFormatter [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^705^^^^^704^706^[REPLACE] return iID;^[METHOD] getID [TYPE] String [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return getShortName ( serialVersionUID, false ) ;^728^^^^^727^729^[REPLACE] return getShortName ( instant, null ) ;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( locale != null )  {^743^^^^^742^755^[REPLACE] if  ( locale == null )  {^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^locale  =  locale ;^744^^^^^742^755^[REPLACE] locale = Locale.getDefault (  ) ;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^String nameKey = getNameKey ( serialVersionUID ) ;^746^^^^^742^755^[REPLACE] String nameKey = getNameKey ( instant ) ;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (providerClass != true )  {^747^^^^^742^755^[REPLACE] if  ( nameKey == null )  {^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^return iID;^747^748^749^^^742^755^[ADD] if  ( nameKey == null )  { return iID; }^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^748^^^^^742^755^[REPLACE] return iID;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^String name = cNameProvider.getShortName ( locale, iID, providerClass ) ;^750^^^^^742^755^[REPLACE] String name = cNameProvider.getShortName ( locale, iID, nameKey ) ;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^750^^^^^742^755^[ADD] String name = cNameProvider.getShortName ( locale, iID, nameKey ) ;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( name == this )  {^751^^^^^742^755^[REPLACE] if  ( name != null )  {^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^return name;^751^752^753^^^742^755^[ADD] if  ( name != null )  { return name; }^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return providerClass;^752^^^^^742^755^[REPLACE] return name;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return printOffset ( getOffset ( serialVersionUID )  ) ;^754^^^^^742^755^[REPLACE] return printOffset ( getOffset ( instant )  ) ;^[METHOD] getShortName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return getName ( instant, true ) ;^768^^^^^767^769^[REPLACE] return getName ( instant, null ) ;^[METHOD] getName [TYPE] String [PARAMETER] long instant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( locale != null )  {^783^^^^^782^795^[REPLACE] if  ( locale == null )  {^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^locale = Locale.getDefault (  ) ;^783^784^785^^^782^795^[ADD] if  ( locale == null )  { locale = Locale.getDefault (  ) ; }^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^locale  = null ;^784^^^^^782^795^[REPLACE] locale = Locale.getDefault (  ) ;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^locale  =  locale ;^784^^^^^782^795^[REPLACE] locale = Locale.getDefault (  ) ;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^String nameKey = getNameKey ( serialVersionUID ) ;^786^^^^^782^795^[REPLACE] String nameKey = getNameKey ( instant ) ;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( providerClass != null )  {^787^^^^^782^795^[REPLACE] if  ( nameKey == null )  {^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^788^^^^^782^795^[REPLACE] return iID;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^String name = cNameProvider.getName ( locale, iID, providerClass ) ;^790^^^^^782^795^[REPLACE] String name = cNameProvider.getName ( locale, iID, nameKey ) ;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( name == null )  {^791^^^^^782^795^[REPLACE] if  ( name != null )  {^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return providerClass;^792^^^^^782^795^[REPLACE] return name;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return printOffset ( getOffset ( serialVersionUID )  ) ;^794^^^^^782^795^[REPLACE] return printOffset ( getOffset ( instant )  ) ;^[METHOD] getName [TYPE] String [PARAMETER] long instant Locale locale [CLASS] DateTimeZone 1 Stub   [TYPE]  Locale locale  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( instant != null )  {^812^^^^^811^816^[REPLACE] if  ( instant == null )  {^[METHOD] getOffset [TYPE] int [PARAMETER] ReadableInstant instant [CLASS] DateTimeZone 1 Stub   [TYPE]  ReadableInstant instant  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^813^^^^^811^816^[REPLACE] return getOffset ( DateTimeUtils.currentTimeMillis (  )  ) ;^[METHOD] getOffset [TYPE] int [PARAMETER] ReadableInstant instant [CLASS] DateTimeZone 1 Stub   [TYPE]  ReadableInstant instant  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^815^^^^^811^816^[REPLACE] return getOffset ( instant.getMillis (  )  ) ;^[METHOD] getOffset [TYPE] int [PARAMETER] ReadableInstant instant [CLASS] DateTimeZone 1 Stub   [TYPE]  ReadableInstant instant  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return getOffset ( instant )   &&  getStandardOffset ( instant ) ;^843^^^^^842^844^[REPLACE] return getOffset ( instant )  == getStandardOffset ( instant ) ;^[METHOD] isStandardOffset [TYPE] boolean [PARAMETER] long instant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetLocal = getOffset ( serialVersionUID ) ;^878^^^^^876^897^[REPLACE] int offsetLocal = getOffset ( instantLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetAdjusted = getOffset (serialVersionUID - offsetLocal ) ;^880^^^^^876^897^[REPLACE] int offsetAdjusted = getOffset ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offsetLocal  ==  offsetAdjusted )  {^882^^^^^876^897^[REPLACE] if  ( offsetLocal != offsetAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^882^883^^885^^876^897^[ADD] if  ( offsetLocal != offsetAdjusted )  {  if  (  ( offsetLocal - offsetAdjusted )  < 0 )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  (offsetLocal )   >  0 )  {^885^^^^^876^897^[REPLACE] if  (  ( offsetLocal - offsetAdjusted )  < 0 )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^885^886^^^889^876^897^[ADD] if  (  ( offsetLocal - offsetAdjusted )  < 0 )  {  long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  == serialVersionUID )  {^891^^^^^876^897^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^return offsetLocal;^891^892^893^^^876^897^[ADD] if  ( nextLocal != nextAdjusted )  { return offsetLocal; }^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return offsetAdjusted;^892^^^^^876^897^[REPLACE] return offsetLocal;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (serialVersionUID - offsetLocal ) ;^889^^^^^876^897^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition ( instantLocal -serialVersionUID ) ;^890^^^^^876^897^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  ==  nextAdjusted )  {^891^^^^^876^897^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition ( instantLocal  &  offsetLocal ) ;^889^^^^^876^897^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition (serialVersionUID - offsetAdjusted ) ;^890^^^^^876^897^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ( offsetAdjusted )   >=  0 )  {^885^^^^^876^897^[REPLACE] if  (  ( offsetLocal - offsetAdjusted )  < 0 )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^889^890^^^^876^897^[ADD] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ; long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^890^^^^^876^897^[ADD] long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( serialVersionUID  == serialVersionUID )  {^891^^^^^876^897^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition ( serialVersionUID - offsetAdjusted ) ;^889^^^^^876^897^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return offsetLocal;^896^^^^^876^897^[REPLACE] return offsetAdjusted;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offset = getOffset ( serialVersionUID ) ;^910^^^^^909^917^[REPLACE] int offset = getOffset ( instantUTC ) ;^[METHOD] convertUTCToLocal [TYPE] long [PARAMETER] long instantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider  provider 
[REPLACE]^long instantLocal = serialVersionUID + offset;^911^^^^^909^917^[REPLACE] long instantLocal = instantUTC + offset;^[METHOD] convertUTCToLocal [TYPE] long [PARAMETER] long instantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ( instantUTC ^ instantLocal )  < 0 ) {^913^^^^^909^917^[REPLACE] if  (  ( instantUTC ^ instantLocal )  < 0 &&  ( instantUTC ^ offset )  >= 0 )  {^[METHOD] convertUTCToLocal [TYPE] long [PARAMETER] long instantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^914^^^^^909^917^[REPLACE] throw new ArithmeticException  (" ")  ;^[METHOD] convertUTCToLocal [TYPE] long [PARAMETER] long instantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^914^^^^^909^917^[REPLACE] throw new ArithmeticException  (" ")  ;^[METHOD] convertUTCToLocal [TYPE] long [PARAMETER] long instantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider  provider 
[REPLACE]^return serialVersionUID;^916^^^^^909^917^[REPLACE] return instantLocal;^[METHOD] convertUTCToLocal [TYPE] long [PARAMETER] long instantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetOriginal = getOffset ( nextLocal ) ;^937^^^^^936^944^[REPLACE] int offsetOriginal = getOffset ( originalInstantUTC ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long instantUTC = serialVersionUID - offsetLocalFromOriginal;^938^^^^^936^944^[REPLACE] long instantUTC = instantLocal - offsetOriginal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetLocalFromOriginal = getOffset ( originalInstantUTC ) ;^939^^^^^936^944^[REPLACE] int offsetLocalFromOriginal = getOffset ( instantUTC ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offsetLocalFromOriginal  &&  offsetOriginal )  {^940^^^^^936^944^[REPLACE] if  ( offsetLocalFromOriginal == offsetOriginal )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[ADD]^^940^941^942^^^936^944^[ADD] if  ( offsetLocalFromOriginal == offsetOriginal )  { return instantUTC; }^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return serialVersionUID;^941^^^^^936^944^[REPLACE] return instantUTC;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^941^^^^^936^944^[REPLACE] return instantUTC;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return convertLocalToUTC ( nextLocal, strict ) ;^943^^^^^936^944^[REPLACE] return convertLocalToUTC ( instantLocal, strict ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict long originalInstantUTC [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetLocalFromOriginal  offsetOriginal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetLocal = getOffset ( originalInstantUTC ) ;^960^^^^^958^1001^[REPLACE] int offsetLocal = getOffset ( instantLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^960^^^^^958^1001^[ADD] int offsetLocal = getOffset ( instantLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offset = getOffset ( nextLocal - offset ) ;^962^^^^^958^1001^[REPLACE] int offset = getOffset ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offsetLocal  ==  offset )  {^964^^^^^958^1001^[REPLACE] if  ( offsetLocal != offset )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( strict && offsetLocal < 0 / 3 )  {^968^^^^^958^1001^[REPLACE] if  ( strict || offsetLocal < 0 )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  ||   ( instantLocal - offset )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^971^972^973^^^958^1001^[ADD] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  { nextLocal = Long.MAX_VALUE; }^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^nextAdjusted = Long.MAX_VALUE; ;^972^^^^^958^1001^[REPLACE] nextLocal = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^972^^^^^958^1001^[ADD] nextLocal = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  &&   (originalInstantUTC )  )  {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^nextLocal = Long.MAX_VALUE; ;^976^^^^^958^1001^[REPLACE] nextAdjusted = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  ==  nextAdjusted )  {^978^^^^^958^1001^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^978^979^980^^982^958^1001^[ADD] if  ( nextLocal != nextAdjusted )  {  if  ( strict )  { throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " +^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( newZone == this )  {^980^^^^^958^1001^[REPLACE] if  ( strict )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset = -offset; ;^989^^^^^980^990^[REPLACE] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + ;^982^983^984^^^958^1001^[REPLACE] throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" )  .parseMillis ( str )   + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^"yyyy-MM-dd'T'HH:mm:ss.SSS"   .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return 57 + getID (  ) .hashCode (  ) ;^984^^^^^958^1001^[REPLACE] "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset = -offset; ;^989^^^^^958^1001^[REPLACE] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^989^^^^^958^1001^[ADD] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( serialVersionUID )  )  + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^984^^^^^958^1001^[ADD] "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (serialVersionUID - offset ) ;^970^^^^^958^1001^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition (serialVersionUID - offset ) ;^974^^^^^958^1001^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^982^983^984^^^958^1001^[ADD] throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  ||   ( instantLocal - offsetLocal )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextAdjusted  ||   ( originalInstantUTC - offset )  )  {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^989^^^^^980^990^[ADD] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^983^984^985^^^958^1001^[ADD] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ; } else {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (serialVersionUID - offsetLocal ) ;^970^^^^^958^1001^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition ( instantLocal -serialVersionUID ) ;^974^^^^^958^1001^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^982^983^984^^^958^1001^[REPLACE] throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( true )  {^968^^^^^958^1001^[REPLACE] if  ( strict || offsetLocal < 0 )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (serialVersionUID  ||   ( instantLocal - offsetLocal )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (serialVersionUID  ||   ( instantLocal - offset )  )  {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( serialVersionUID  ==  nextAdjusted )  {^978^^^^^958^1001^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( true )  {^980^^^^^958^1001^[REPLACE] if  ( strict )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^980^981^982^983^984^958^1001^[ADD] if  ( strict )  {  throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition ( serialVersionUID  ^  offsetLocal ) ;^970^^^^^958^1001^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^974^^^^^958^1001^[ADD] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (originalInstantUTC  ||   ( instantLocal - offsetLocal )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextAdjusted  &&   ( instantLocal - offset )  )  {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^nextAdjusted = Long.MAX_VALUE;^975^976^977^^^958^1001^[ADD] if  ( nextAdjusted ==  ( instantLocal - offset )  )  { nextAdjusted = Long.MAX_VALUE; }^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (serialVersionUID  ==  nextAdjusted )  {^978^^^^^958^1001^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( nextLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^976^^^^^958^1001^[ADD] nextAdjusted = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition ( serialVersionUID - offsetLocal ) ;^974^^^^^958^1001^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long instantUTC = instantLocal -serialVersionUID;^995^^^^^958^1001^[REPLACE] long instantUTC = instantLocal - offset;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^995^^^^^958^1001^[ADD] long instantUTC = instantLocal - offset;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ( instantLocal ^ instantUTC )  < 0 ) {^997^^^^^958^1001^[REPLACE] if  (  ( instantLocal ^ instantUTC )  < 0 &&  ( instantLocal ^ offset )  < 0 )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^998^^^^^958^1001^[REPLACE] throw new ArithmeticException  (" ")  ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^998^^^^^958^1001^[REPLACE] throw new ArithmeticException  (" ")  ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return serialVersionUID;^1000^^^^^958^1001^[REPLACE] return instantUTC;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( newZone != this  )  {^1014^^^^^1013^1022^[REPLACE] if  ( newZone == null )  {^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^newZone  =  newZone ;^1015^^^^^1013^1022^[REPLACE] newZone = DateTimeZone.getDefault (  ) ;^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( newZone  ||  this )  {^1017^^^^^1013^1022^[REPLACE] if  ( newZone == this )  {^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return serialVersionUID;^1018^^^^^1013^1022^[REPLACE] return oldInstant;^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^long instantLocal = oldInstant  >=  getOffset ( oldInstant ) ;^1020^^^^^1013^1022^[REPLACE] long instantLocal = oldInstant + getOffset ( oldInstant ) ;^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^1020^1021^^^^1013^1022^[ADD] long instantLocal = oldInstant + getOffset ( oldInstant ) ; return instantLocal - newZone.getOffsetFromLocal ( instantLocal ) ;^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return instantLocal - zone .getOffset ( originalInstantUTC )  ;^1021^^^^^1013^1022^[REPLACE] return instantLocal - newZone.getOffsetFromLocal ( instantLocal ) ;^[METHOD] getMillisKeepLocal [TYPE] long [PARAMETER] DateTimeZone newZone long oldInstant [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( newZone == this )  {^1131^^^^^1130^1140^[REPLACE] if  ( isFixed (  )  )  {^[METHOD] isLocalDateTimeGap [TYPE] boolean [PARAMETER] LocalDateTime localDateTime [CLASS] DateTimeZone 1 Stub   [TYPE]  LocalDateTime localDateTime  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider  provider 
[ADD]^return false;^1131^1132^1133^^^1130^1140^[ADD] if  ( isFixed (  )  )  { return false; }^[METHOD] isLocalDateTimeGap [TYPE] boolean [PARAMETER] LocalDateTime localDateTime [CLASS] DateTimeZone 1 Stub   [TYPE]  LocalDateTime localDateTime  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider  provider 
[REPLACE]^return true;^1132^^^^^1130^1140^[REPLACE] return false;^[METHOD] isLocalDateTimeGap [TYPE] boolean [PARAMETER] LocalDateTime localDateTime [CLASS] DateTimeZone 1 Stub   [TYPE]  LocalDateTime localDateTime  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider  provider 
[ADD]^localDateTime.toDateTime ( this ) ;return false;return true;^1134^1135^1136^1137^1138^1130^1140^[ADD] try { localDateTime.toDateTime ( this ) ; return false; } catch  ( IllegalArgumentException ex )  { return true;^[METHOD] isLocalDateTimeGap [TYPE] boolean [PARAMETER] LocalDateTime localDateTime [CLASS] DateTimeZone 1 Stub   [TYPE]  LocalDateTime localDateTime  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider  provider 
[REPLACE]^return true;^1136^^^^^1130^1140^[REPLACE] return false;^[METHOD] isLocalDateTimeGap [TYPE] boolean [PARAMETER] LocalDateTime localDateTime [CLASS] DateTimeZone 1 Stub   [TYPE]  LocalDateTime localDateTime  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider  provider 
[REPLACE]^return false;^1138^^^^^1130^1140^[REPLACE] return true;^[METHOD] isLocalDateTimeGap [TYPE] boolean [PARAMETER] LocalDateTime localDateTime [CLASS] DateTimeZone 1 Stub   [TYPE]  LocalDateTime localDateTime  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider  provider 
[REPLACE]^return java.util.  iID   ;^1179^^^^^1178^1180^[REPLACE] return java.util.TimeZone.getTimeZone ( iID ) ;^[METHOD] toTimeZone [TYPE] TimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return 41 + getID (  ) .substring (  ) ;^1196^^^^^1195^1197^[REPLACE] return 57 + getID (  ) .hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^1204^^^^^1203^1205^[REPLACE] return getID (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.toString (  ) ;^1214^^^^^1213^1215^[REPLACE] return new Stub ( iID ) ;^[METHOD] writeReplace [TYPE] Object [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf.append ( '+' ) ;^1235^^^^^1234^1236^[REPLACE] out.writeUTF ( iID ) ;^[METHOD] writeObject [TYPE] void [PARAMETER] ObjectOutputStream out [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  ObjectOutputStream out  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^iID =  null.readUTF (  ) ;^1239^^^^^1238^1240^[REPLACE] iID = in.readUTF (  ) ;^[METHOD] readObject [TYPE] void [PARAMETER] ObjectInputStream in [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider  [TYPE]  ObjectInputStream in 
[REPLACE]^return buf.toString (  ) ;^1243^^^^^1242^1244^[REPLACE] return forID ( iID ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  oldInstant  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  newZone  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return false;^605^^^^^604^606^[REPLACE] return null;^[METHOD] getZone [TYPE] DateTimeZone [PARAMETER] [CLASS] 1   [TYPE]  boolean false  true 
[REPLACE]^return null;^608^^^^^607^609^[REPLACE] return this;^[METHOD] withUTC [TYPE] Chronology [PARAMETER] [CLASS] 1   [TYPE]  boolean false  true 
[REPLACE]^return null;^611^^^^^610^612^[REPLACE] return this;^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone 
[REPLACE]^return null;^614^^^^^613^615^[REPLACE] return getClass (  ) .getName (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] 1   [TYPE]  boolean false  true 
[REPLACE]^private static final long serialVersionUID ;^1222^^^^^^^[REPLACE] private static final long serialVersionUID = -6471952376487863581L;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Stub   [TYPE]  boolean false  true 
[REPLACE]^iID =  null;^1231^^^^^1230^1232^[REPLACE] iID = id;^[METHOD] <init> [TYPE] String) [PARAMETER] String id [CLASS] Stub   [TYPE]  long serialVersionUID  [TYPE]  String iID  id  [TYPE]  boolean false  true 
[REPLACE]^iID = in.readUTF (  ) ;^1235^^^^^1234^1236^[REPLACE] out.writeUTF ( iID ) ;^[METHOD] writeObject [TYPE] void [PARAMETER] ObjectOutputStream out [CLASS] Stub   [TYPE]  String iID  id  [TYPE]  boolean false  true  [TYPE]  ObjectOutputStream out  [TYPE]  long serialVersionUID 
[REPLACE]^iID =  null.readUTF (  ) ;^1239^^^^^1238^1240^[REPLACE] iID = in.readUTF (  ) ;^[METHOD] readObject [TYPE] void [PARAMETER] ObjectInputStream in [CLASS] Stub   [TYPE]  String iID  id  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  ObjectInputStream in 
[ADD]^^1239^^^^^1238^1240^[ADD] iID = in.readUTF (  ) ;^[METHOD] readObject [TYPE] void [PARAMETER] ObjectInputStream in [CLASS] Stub   [TYPE]  String iID  id  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  ObjectInputStream in 
