[REPLACE]^private static  long serialVersionUID = -8731039522547897247L;^53^^^^^^^[REPLACE] private static final long serialVersionUID = -8731039522547897247L;^ [CLASS] JulianChronology  
[REPLACE]^private static final long MILLIS_PER_YEAR ;^55^56^^^^55^56^[REPLACE] private static final long MILLIS_PER_YEAR = ( long )   ( 365.25 * DateTimeConstants.MILLIS_PER_DAY ) ;^ [CLASS] JulianChronology  
[REPLACE]^private  final long MILLIS_PER_MONTH = ( long )   ( 365.25 * DateTimeConstants.MILLIS_PER_DAY / 12 ) ;^58^59^^^^58^59^[REPLACE] private static final long MILLIS_PER_MONTH = ( long )   ( 365.25 * DateTimeConstants.MILLIS_PER_DAY / 12 ) ;^ [CLASS] JulianChronology  
[REPLACE]^private static final int MIN_YEAR ;^62^^^^^^^[REPLACE] private static final int MIN_YEAR = -292269054;^ [CLASS] JulianChronology  
[REPLACE]^private static final  long  MAX_YEAR = 214185123;^65^^^^^^^[REPLACE] private static final int MAX_YEAR = 292272992;^ [CLASS] JulianChronology  
[REPLACE]^private static final Map<DateTimeZone, JulianChronology[]> cCache  = null ;^71^^^^^^^[REPLACE] private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]> (  ) ;^ [CLASS] JulianChronology  
[REPLACE]^super ( base, param, MIN_YEAR ) ;^162^^^^^161^163^[REPLACE] super ( base, param, minDaysInFirstWeek ) ;^[METHOD] <init> [TYPE] Object,int) [PARAMETER] Chronology base Object param int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Object param  [TYPE]  Chronology base  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek 
[REPLACE]^if  ( minDaysInFirstWeek  ==  0 - 1 )  {^78^^^^^77^86^[REPLACE] if  ( year <= 0 )  {^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^if  ( year  !=  1 )  {^79^^^^^77^86^[REPLACE] if  ( year == 0 )  {^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^return ;^80^81^^^^77^86^[REPLACE] throw new IllegalFieldValueException ( DateTimeFieldType.year (  ) , new Integer ( year ) , null, null ) ;^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[ADD]^^80^81^^^^77^86^[ADD] throw new IllegalFieldValueException ( DateTimeFieldType.year (  ) , new Integer ( year ) , null, null ) ;^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^81^^^^^77^86^[REPLACE] ( DateTimeFieldType.year (  ) , new Integer ( year ) , null, null ) ;^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^if  ( year  &&  0 )  {^79^^^^^77^86^[REPLACE] if  ( year == 0 )  {^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^return minDaysInFirstWeek;^85^^^^^77^86^[REPLACE] return year;^[METHOD] adjustYearForSet [TYPE] int [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^return MILLIS_PER_YEAR / 2;^95^^^^^94^96^[REPLACE] return INSTANCE_UTC;^[METHOD] getInstanceUTC [TYPE] JulianChronology [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^return getInstance ( DateTimeZone.getDefault (  ) , 7 ) ;^104^^^^^103^105^[REPLACE] return getInstance ( DateTimeZone.getDefault (  ) , 4 ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year 
[REPLACE]^return getInstance ( zone, 4L ) ;^114^^^^^113^115^[REPLACE] return getInstance ( zone, 4 ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone 
[REPLACE]^if  ( zone != null )  {^125^^^^^124^153^[REPLACE] if  ( zone == null )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^125^126^127^^^124^153^[ADD] if  ( zone == null )  { zone = DateTimeZone.getDefault (  ) ; }^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^zone ;^126^^^^^124^153^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^zone  =  zone ;^126^^^^^124^153^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^JulianChronology[] chronos = cCache.get ( zone ) ;^128^^^^^124^153^[REPLACE] JulianChronology chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( chronos != null )  {^131^^^^^124^153^[REPLACE] if  ( chronos == null )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos = new JulianChronology[5];^132^^^^^124^153^[REPLACE] chronos = new JulianChronology[7];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  (INSTANCE_UTC != null )  {^141^^^^^124^153^[REPLACE] if  ( chrono == null )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( zone  ||  DateTimeZone.UTC )  {^142^^^^^124^153^[REPLACE] if  ( zone == DateTimeZone.UTC )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^142^143^144^145^146^124^153^[ADD] if  ( zone == DateTimeZone.UTC )  { chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ; } else { chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ; chrono = new JulianChronology^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono =  getInstance ( DateTimeZone.UTC, year ) ;^145^^^^^142^148^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^145^^^^^142^148^[ADD] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , true, minDaysInFirstWeek ) ;^146^147^^^^142^148^[REPLACE] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^146^147^^^^142^148^[ADD] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( this, this, minDaysInFirstWeek ) ;^143^^^^^124^153^[REPLACE] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( true, true, minDaysInFirstWeek ) ;^143^^^^^124^153^[REPLACE] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono =  getInstance ( DateTimeZone.UTC, year ) ;^145^^^^^124^153^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , true, minDaysInFirstWeek ) ;^146^147^^^^124^153^[REPLACE] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos[minDaysInFirstWeek  ||  2] = chrono;^149^^^^^124^153^[REPLACE] chronos[minDaysInFirstWeek - 1] = chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( zone  &&  DateTimeZone.UTC )  {^142^^^^^124^153^[REPLACE] if  ( zone == DateTimeZone.UTC )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , false, minDaysInFirstWeek ) ;^146^147^^^^142^148^[REPLACE] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( false, false, minDaysInFirstWeek ) ;^143^^^^^124^153^[REPLACE] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^143^^^^^124^153^[ADD] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^chrono = chronos[minDaysInFirstWeek - 1];( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^135^136^137^138^139^124^153^[ADD] try { chrono = chronos[minDaysInFirstWeek - 1]; } catch  ( ArrayIndexOutOfBoundsException e )  { throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = chronos[minDaysInFirstWeek  &&  1];^136^^^^^124^153^[REPLACE] chrono = chronos[minDaysInFirstWeek - 1];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos = new JulianChronology[4];^132^^^^^124^153^[REPLACE] chronos = new JulianChronology[7];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^132^^^^^124^153^[ADD] chronos = new JulianChronology[7];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = chronos[minDaysInFirstWeek  &  1];^136^^^^^124^153^[REPLACE] chrono = chronos[minDaysInFirstWeek - 1];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , this, minDaysInFirstWeek ) ;^146^147^^^^124^153^[REPLACE] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos[minDaysInFirstWeek  >=  1L] = chrono;^149^^^^^124^153^[REPLACE] chronos[minDaysInFirstWeek - 1] = chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^149^^^^^124^153^[ADD] chronos[minDaysInFirstWeek - 1] = chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^JulianChronology[] chronos = cCache .put ( zone , chronos )  ;^130^^^^^124^153^[REPLACE] JulianChronology[] chronos = cCache.get ( zone ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^return ;^138^139^^^^124^153^[REPLACE] throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^138^139^^^^124^153^[ADD] throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^return INSTANCE_UTC;^152^^^^^124^153^[REPLACE] return chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^JulianChronology[] chronos = cCache.get ( zone ) ;^169^^^^^168^175^[REPLACE] Chronology base = getBase (  ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] JulianChronology   [TYPE]  Chronology base  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year 
[REPLACE]^JulianChronology chrono;^170^^^^^168^175^[REPLACE] int minDays = getMinimumDaysInFirstWeek (  ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] JulianChronology   [TYPE]  Chronology base  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year 
[ADD]^^170^171^^^^168^175^[ADD] int minDays = getMinimumDaysInFirstWeek (  ) ; minDays =  ( minDays == 0 ? 4 : minDays ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] JulianChronology   [TYPE]  Chronology base  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year 
[REPLACE]^minDays  =  4 ;^171^^^^^168^175^[REPLACE] minDays =  ( minDays == 0 ? 4 : minDays ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] JulianChronology   [TYPE]  Chronology base  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year 
[REPLACE]^return getInstance ( base.getZone (  ) , minDays ) ;^172^173^174^^^168^175^[REPLACE] return base == null ? getInstance ( DateTimeZone.UTC, minDays )  : getInstance ( base.getZone (  ) , minDays ) ;^[METHOD] readResolve [TYPE] Object [PARAMETER] [CLASS] JulianChronology   [TYPE]  Chronology base  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year 
[REPLACE]^return MILLIS_PER_YEAR / 2;^185^^^^^184^186^[REPLACE] return INSTANCE_UTC;^[METHOD] withUTC [TYPE] Chronology [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year 
[REPLACE]^if  ( zone != null )  {^195^^^^^194^202^[REPLACE] if  ( zone == null )  {^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone 
[REPLACE]^zone  =  zone ;^196^^^^^194^202^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone 
[REPLACE]^if  ( zone  !=  getZone (  )  )  {^198^^^^^194^202^[REPLACE] if  ( zone == getZone (  )  )  {^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone 
[REPLACE]^return null;^199^^^^^194^202^[REPLACE] return this;^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone 
[REPLACE]^return getInstance ( zone, 4 ) ;^201^^^^^194^202^[REPLACE] return getInstance ( zone ) ;^[METHOD] withZone [TYPE] Chronology [PARAMETER] DateTimeZone zone [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDays  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone 
[REPLACE]^return super .getMinimumDaysInFirstWeek (  )  ;^207^^^^^204^208^[REPLACE] return super.getDateMidnightMillis ( adjustYearForSet ( year ) , monthOfYear, dayOfMonth ) ;^[METHOD] getDateMidnightMillis [TYPE] long [PARAMETER] int year int monthOfYear int dayOfMonth [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  minDays  minDaysInFirstWeek  monthOfYear  year 
[REPLACE]^return  ( year & 4 )   !=  0;;^211^^^^^210^212^[REPLACE] return  ( year & 3 )  == 0;^[METHOD] isLeapYear [TYPE] boolean [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  minDays  minDaysInFirstWeek  monthOfYear  year 
[REPLACE]^int relativeYear =relativeYear - 1968;^219^^^^^214^238^[REPLACE] int relativeYear = year - 1968;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^int relativeYear = year - 1968;^220^^^^^214^238^[REPLACE] int leapYears;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^220^^^^^214^238^[ADD] int leapYears;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( relativeYear  !=  0 << 3 )  {^221^^^^^214^238^[REPLACE] if  ( relativeYear <= 0 )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^221^222^^224^^214^238^[ADD] if  ( relativeYear <= 0 )  {  leapYears =  ( relativeYear + 3 )  >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( !isLeapYear ( minDays )  )  {^228^^^^^214^238^[REPLACE] if  ( !isLeapYear ( year )  )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )  >> 2; ;^226^^^^^214^238^[REPLACE] leapYears = relativeYear >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )   <=  2;^224^^^^^214^238^[REPLACE] leapYears =  ( relativeYear + 3 )  >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( !isLeapYear ( relativeYear )  )  {^228^^^^^214^238^[REPLACE] if  ( !isLeapYear ( year )  )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^leapYears++;^228^229^230^^^214^238^[ADD] if  ( !isLeapYear ( year )  )  { leapYears++; }^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )   >=  2;^224^^^^^214^238^[REPLACE] leapYears =  ( relativeYear + 3 )  >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^224^^^^^214^238^[ADD] leapYears =  ( relativeYear + 3 )  >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^226^^^^^214^238^[ADD] leapYears = relativeYear >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^long millis =  ( relativeYear  >  365 + leapYears )   >   ( long ) DateTimeConstants.MILLIS_PER_DAY;^233^^^^^214^238^[REPLACE] long millis =  ( relativeYear * 365L + leapYears )  *  ( long ) DateTimeConstants.MILLIS_PER_DAY;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^233^^^^^214^238^[ADD] long millis =  ( relativeYear * 365L + leapYears )  *  ( long ) DateTimeConstants.MILLIS_PER_DAY;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return millis  |   ( 366 + 352 )  * DateTimeConstants.MILLIS_PER_DAY;^237^^^^^214^238^[REPLACE] return millis -  ( 366L + 352 )  * DateTimeConstants.MILLIS_PER_DAY;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return MAX_YEAR;^241^^^^^240^242^[REPLACE] return MIN_YEAR;^[METHOD] getMinYear [TYPE] int [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return MIN_YEAR;^245^^^^^244^246^[REPLACE] return MAX_YEAR;^[METHOD] getMaxYear [TYPE] int [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return MILLIS_PER_YEAR / 2;^249^^^^^248^250^[REPLACE] return MILLIS_PER_YEAR;^[METHOD] getAverageMillisPerYear [TYPE] long [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return serialVersionUID  ;^253^^^^^252^254^[REPLACE] return MILLIS_PER_YEAR / 2;^[METHOD] getAverageMillisPerYearDividedByTwo [TYPE] long [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return MILLIS_PER_YEAR / 2;^257^^^^^256^258^[REPLACE] return MILLIS_PER_MONTH;^[METHOD] getAverageMillisPerMonth [TYPE] long [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return  ( 1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY )   ;^261^^^^^260^262^[REPLACE] return  ( 1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY )  / 2;^[METHOD] getApproxMillisAtEpochDividedByTwo [TYPE] long [PARAMETER] [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( getBase (  )  != true )  {^265^^^^^264^271^[REPLACE] if  ( getBase (  )  == null )  {^[METHOD] assemble [TYPE] void [PARAMETER] Fields fields [CLASS] JulianChronology   [TYPE]  Fields fields  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^265^266^^268^269^264^271^[ADD] if  ( getBase (  )  == null )  { super.assemble ( fields ) ; fields.year = new SkipDateTimeField ( this, fields.year ) ; fields.weekyear = new SkipDateTimeField ( this, fields.weekyear ) ;^[METHOD] assemble [TYPE] void [PARAMETER] Fields fields [CLASS] JulianChronology   [TYPE]  Fields fields  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^fields.weekyear = new SkipDateTimeField ( this, fields.weekyear ) ; ;^268^^^^^264^271^[REPLACE] fields.year = new SkipDateTimeField ( this, fields.year ) ;^[METHOD] assemble [TYPE] void [PARAMETER] Fields fields [CLASS] JulianChronology   [TYPE]  Fields fields  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^fields.year = new SkipDateTimeField ( this, fields.year ) ; ;^269^^^^^264^271^[REPLACE] fields.weekyear = new SkipDateTimeField ( this, fields.weekyear ) ;^[METHOD] assemble [TYPE] void [PARAMETER] Fields fields [CLASS] JulianChronology   [TYPE]  Fields fields  [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
