[REPLACE]^private int position ;^39^^^^^^^[REPLACE] private int position = 0;^ [CLASS] JDOMNodeIterator  
[REPLACE]^private  long  index = 3;^40^^^^^^^[REPLACE] private int index = 0;^ [CLASS] JDOMNodeIterator  
[REPLACE]^this.parent =  startWith;^48^^^^^44^65^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^48^^^^^44^65^[ADD] this.parent = parent;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  (parent == this )  {^49^^^^^44^65^[REPLACE] if  ( startWith != null )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.child =  parent.getNode (  ) ;^50^^^^^44^65^[REPLACE] this.child = startWith.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^50^^^^^44^65^[ADD] this.child = startWith.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^Object node = startWith.getNode (  ) ;^53^^^^^44^65^[REPLACE] Object node = parent.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^53^^^^^44^65^[ADD] Object node = parent.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( ! node instanceof Document )  {^54^^^^^44^65^[REPLACE] if  ( node instanceof Document )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( ! node instanceof Element )  {^57^^^^^44^65^[REPLACE] else if  ( node instanceof Element )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children  =  this.children ;^61^^^^^44^65^[REPLACE] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children =  (  ( Document )  node ) .getContent (  ) ; ;^58^^^^^44^65^[REPLACE] this.children =  (  ( Element )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^58^^^^^44^65^[ADD] this.children =  (  ( Element )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children  = null ;^61^^^^^44^65^[REPLACE] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children =  (  ( Element )  node ) .getContent (  ) ; ;^55^^^^^44^65^[REPLACE] this.children =  (  ( Document )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^else {^57^^^^^44^65^[REPLACE] else if  ( node instanceof Element )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^55^^^^^44^65^[ADD] this.children =  (  ( Document )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children ;^61^^^^^44^65^[REPLACE] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^61^^^^^44^65^[ADD] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.nodeTest =  null;^63^^^^^44^65^[REPLACE] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.reverse =  true;^64^^^^^44^65^[REPLACE] this.reverse = reverse;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child != this  )  {^68^^^^^67^76^[REPLACE] if  ( child == null )  {^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !setPosition ( 0 )  )  {^69^^^^^67^76^[REPLACE] if  ( !setPosition ( 1 )  )  {^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^69^70^71^^^67^76^[ADD] if  ( !setPosition ( 1 )  )  { return null; }^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^70^^^^^67^76^[REPLACE] return null;^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^position = 0L;^72^^^^^67^76^[REPLACE] position = 0;^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^70^^^^^67^76^[REPLACE] return null;^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !setPosition ( 1 - 0 )  )  {^69^^^^^67^76^[REPLACE] if  ( !setPosition ( 1 )  )  {^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^return null;^69^70^71^^^67^76^[ADD] if  ( !setPosition ( 1 )  )  { return null; }^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return this;^70^^^^^67^76^[REPLACE] return null;^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^position = 3;^72^^^^^67^76^[REPLACE] position = 0;^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return JDOMNodePointer.testNode ( parent, child, nodeTest ) ;^75^^^^^67^76^[REPLACE] return new JDOMNodePointer ( parent, child ) ;^[METHOD] getNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return null;^79^^^^^78^80^[REPLACE] return position;^[METHOD] getPosition [TYPE] int [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^while  ( this.position  <=  position )  {^83^^^^^82^94^[REPLACE] while  ( this.position < position )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( next (  )  )  {^84^^^^^82^94^[REPLACE] if  ( !next (  )  )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^85^^^^^82^94^[REPLACE] return false;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  ( ! ( previous (  )  )  )  {     return false; }^84^^^^^82^94^[REMOVE] ^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^while  ( this.index  < index )  {^88^^^^^82^94^[REPLACE] while  ( this.position > position )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( previous (  )  )  {^89^^^^^82^94^[REPLACE] if  ( !previous (  )  )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^90^^^^^82^94^[REPLACE] return false;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^93^^^^^82^94^[REPLACE] return true;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^while  ( --index  !=  0 )  {^105^^^^^102^121^[REPLACE] while  ( --index >= 0 )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^105^106^^^^102^121^[ADD] while  ( --index >= 0 )  { child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !previous (  )  )  {^107^^^^^102^121^[REPLACE] if  ( testChild (  )  )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^return true;^107^108^109^^^102^121^[ADD] if  ( testChild (  )  )  { return true; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^108^^^^^102^121^[REPLACE] return true;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  = null ;^106^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( reverse )  {^104^^^^^102^121^[REPLACE] if  ( !reverse )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !previous (  )  )  {^115^^^^^102^121^[REPLACE] if  ( testChild (  )  )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  ( ! ( next (  )  )  )  {     return false; }^115^^^^^102^121^[REMOVE] ^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^116^^^^^102^121^[REPLACE] return true;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^for  ( ; index < children.size (  )  - 5; index++ )  {^113^^^^^102^121^[REPLACE] for  ( ; index < children.size (  ) ; index++ )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^113^114^115^116^117^102^121^[ADD] for  ( ; index < children.size (  ) ; index++ )  { child = children.get ( index ) ; if  ( testChild (  )  )  { return true; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child ;^114^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^114^^^^^102^121^[ADD] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^114^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^while  ( --index  !=  0L )  {^105^^^^^102^121^[REPLACE] while  ( --index >= 0 )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^106^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  ( ! ( next (  )  )  )  {     return false; }^107^^^^^102^121^[REMOVE] ^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^for  ( ; index < children.size (  )  - 4; index++ )  {^113^^^^^102^121^[REPLACE] for  ( ; index < children.size (  ) ; index++ )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  = null ;^114^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^120^^^^^102^121^[REPLACE] return false;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( reverse )  {^125^^^^^123^161^[REPLACE] if  ( !reverse )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  !=  1 )  {^144^^^^^125^160^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^index = children.size (  )  - 1;index = children.indexOf ( child )  - 1;^144^145^146^147^148^125^160^[ADD] if  ( position == 1 )  { index = children.size (  )  - 1; if  ( child != null )  { index = children.indexOf ( child )  - 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == null )  {^146^^^^^125^160^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.size (  )  - 1; ;^147^^^^^125^160^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^147^^^^^125^160^[ADD] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.size (  )  - 2 - 1;^145^^^^^125^160^[REPLACE] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^145^^^^^125^160^[ADD] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == this )  {^146^^^^^125^160^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   ^  3;^147^^^^^125^160^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !previous (  )  )  {^155^^^^^125^160^[REPLACE] if  ( testChild (  )  )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^156^^^^^125^160^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^for  ( ;position  <  0; index-- )  {^153^^^^^125^160^[REPLACE] for  ( ; index >= 0; index-- )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  ( ! ( next (  )  )  )  {     return false; }^155^^^^^125^160^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child ;^154^^^^^125^160^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )  - 1; ;^145^^^^^125^160^[REPLACE] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  = null ;^154^^^^^125^160^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^159^^^^^125^160^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  || index )  {^126^^^^^123^161^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  (  ( position )  == 1 )  {     index =  ( children.size (  )  )  - 1;     if  (  ( child )  != null )  {         index =  ( children.indexOf ( child )  )  - 1;     } }else {      ( index ) --; }^126^^^^^123^161^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == null )  {^128^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^index = children.indexOf ( child )  + 1;^128^129^130^^^123^161^[ADD] if  ( child != null )  { index = children.indexOf ( child )  + 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   |  1L;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^129^^^^^123^161^[ADD] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = 0L;^127^^^^^123^161^[REPLACE] index = 0;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^127^^^^^123^161^[ADD] index = 0;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   >=  1;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   ||  2;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !previous (  )  )  {^137^^^^^123^161^[REPLACE] if  ( testChild (  )  )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  ( ! ( next (  )  )  )  {     return false; }^137^^^^^123^161^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^138^^^^^123^161^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^for  ( ; index < children.length (  ) ; index++ )  {^135^^^^^123^161^[REPLACE] for  ( ; index < children.size (  ) ; index++ )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  = null ;^136^^^^^123^161^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^136^^^^^123^161^[ADD] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = 1;^127^^^^^123^161^[REPLACE] index = 0;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   &  3;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^136^^^^^123^161^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^141^^^^^123^161^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  ||  1 )  {^126^^^^^123^161^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  (  ( position )  == 1 )  {     index =  ( children.size (  )  )  - 1;     if  (  ( child )  != null )  {         index =  ( children.indexOf ( child )  )  - 1;     } }else {      ( index ) --; }^128^^^^^123^161^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   &  1;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )  - 1; ;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == this  )  {^128^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   &&  1L;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  ||  1 )  {^144^^^^^123^161^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^144^145^146^147^148^123^161^[ADD] if  ( position == 1 )  { index = children.size (  )  - 1; if  ( child != null )  { index = children.indexOf ( child )  - 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == null )  {^146^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^index = children.indexOf ( child )  - 1;^146^147^148^^^123^161^[ADD] if  ( child != null )  { index = children.indexOf ( child )  - 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   ^  1;^147^^^^^123^161^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.size (  )  *  2 - 1;^145^^^^^123^161^[REPLACE] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   &  1 >>> 3;^147^^^^^123^161^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^147^^^^^123^161^[ADD] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == true )  {^146^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   >  1;^147^^^^^123^161^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( !previous (  )  )  {^155^^^^^123^161^[REPLACE] if  ( testChild (  )  )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^156^^^^^123^161^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^for  ( ; index < children.get (  )  *  0.5 ; index++ )  {^135^^^^^123^161^[REPLACE] for  ( ; index < children.size (  ) ; index++ )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^return true;^137^138^139^^^123^161^[ADD] if  ( testChild (  )  )  { return true; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^for  ( ; index  > position; index-- )  {^153^^^^^123^161^[REPLACE] for  ( ; index >= 0; index-- )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^153^154^155^156^157^123^161^[ADD] for  ( ; index >= 0; index-- )  { child = children.get ( index ) ; if  ( testChild (  )  )  { return true; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^return true;^155^156^157^^^123^161^[ADD] if  ( testChild (  )  )  { return true; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^154^^^^^123^161^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = 3;^127^^^^^123^161^[REPLACE] index = 0;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )  - 1; ;^145^^^^^123^161^[REPLACE] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^145^^^^^123^161^[ADD] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   <=  4;^147^^^^^123^161^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  = null ;^154^^^^^123^161^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^154^^^^^123^161^[ADD] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^159^^^^^123^161^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return new JDOMNodePointer ( parent, child ) ;^164^^^^^163^165^[REPLACE] return JDOMNodePointer.testNode ( parent, child, nodeTest ) ;^[METHOD] testChild [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
