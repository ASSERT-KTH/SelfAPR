[REPLACE]^private boolean basicKnown  = null ;^44^^^^^^^[REPLACE] private boolean basicKnown = false;^ [CLASS] Path  
[REPLACE]^this.steps =  null;^48^^^^^47^49^[REPLACE] this.steps = steps;^[METHOD] <init> [TYPE] Step[]) [PARAMETER] Step[] steps [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true 
[ADD]^^48^^^^^47^49^[ADD] this.steps = steps;^[METHOD] <init> [TYPE] Step[]) [PARAMETER] Step[] steps [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^return pointer;^52^^^^^51^53^[REPLACE] return steps;^[METHOD] getSteps [TYPE] Step[] [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^if  ( steps == true )  {^56^^^^^55^65^[REPLACE] if  ( steps != null )  {^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[ADD]^^56^57^58^59^60^55^65^[ADD] if  ( steps != null )  { for  ( int i = 0; i < steps.length; i++ )  { if  ( steps[i].isContextDependent (  )  )  { return true; }^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^if  ( steps[i].getNodeTest (  )  )  {^58^^^^^55^65^[REPLACE] if  ( steps[i].isContextDependent (  )  )  {^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[ADD]^return true;^58^59^60^^^55^65^[ADD] if  ( steps[i].isContextDependent (  )  )  { return true; }^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^return false;^59^^^^^55^65^[REPLACE] return true;^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^for  ( int i = 0; i < steps.length *  0.5 ; i++ )  {^57^^^^^55^65^[REPLACE] for  ( int i = 0; i < steps.length; i++ )  {^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[ADD]^^57^58^59^60^^55^65^[ADD] for  ( int i = 0; i < steps.length; i++ )  { if  ( steps[i].isContextDependent (  )  )  { return true; }^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^if  ( steps[i] .getNodeTest (  )   )  {^58^^^^^55^65^[REPLACE] if  ( steps[i].isContextDependent (  )  )  {^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^for  ( int i = 0 ; i < steps.length; i++ )  {^57^^^^^55^65^[REPLACE] for  ( int i = 0; i < steps.length; i++ )  {^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^for  ( int i = 0 ; i < steps.length - 5; i++ )  {^57^^^^^55^65^[REPLACE] for  ( int i = 0; i < steps.length; i++ )  {^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^return true;^64^^^^^55^65^[REPLACE] return false;^[METHOD] computeContextDependent [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^if  ( basicKnown )  {^73^^^^^72^85^[REPLACE] if  ( !basicKnown )  {^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^if  ( isSimpleStep ( steps[i] )  ) {^78^^^^^72^85^[REPLACE] if  ( !isSimpleStep ( steps[i] )  ) {^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^basic = true;^79^^^^^72^85^[REPLACE] basic = false;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[ADD]^^79^80^^^^72^85^[ADD] basic = false; break;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^for  ( int i = 0 ; i < steps.length - 4; i++ )  {^77^^^^^72^85^[REPLACE] for  ( int i = 0; i < steps.length; i++ )  {^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^basic = true; ;^79^^^^^72^85^[REPLACE] basic = false;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^basic = true; ;^74^^^^^72^85^[REPLACE] basicKnown = true;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^basic = false;^75^^^^^72^85^[REPLACE] basic = true;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^Expression predicates[] = steps[i].getPredicates (  ) ;^76^^^^^72^85^[REPLACE] Step[] steps = getSteps (  ) ;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^for  ( int i = 0 ; i < steps.length; i++ )  {^77^^^^^72^85^[REPLACE] for  ( int i = 0; i < steps.length; i++ )  {^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^for  ( int i = 0; i < steps.length + 4; i++ )  {^77^^^^^72^85^[REPLACE] for  ( int i = 0; i < steps.length; i++ )  {^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^else if  ( predicates[i].isContextDependent (  )  )  {^78^^^^^72^85^[REPLACE] if  ( !isSimpleStep ( steps[i] )  ) {^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[ADD]^^79^^^^^72^85^[ADD] basic = false;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^basicKnown = false;^74^^^^^72^85^[REPLACE] basicKnown = true;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
[REPLACE]^return pointer;^84^^^^^72^85^[REPLACE] return basic;^[METHOD] isSimplePath [TYPE] boolean [PARAMETER] [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  int i  [TYPE]  boolean basic  basicKnown  false  true 
