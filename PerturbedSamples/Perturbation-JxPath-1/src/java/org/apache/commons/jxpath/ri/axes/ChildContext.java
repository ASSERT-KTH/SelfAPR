[REPLACE]^super.setPosition ( position ) ;^44^^^^^38^48^[REPLACE] super ( parentContext ) ;^[METHOD] <init> [TYPE] NodeTest,boolean,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean startFromParentLocation boolean reverse [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^this.nodeTest =  null;^45^^^^^38^48^[REPLACE] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] NodeTest,boolean,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean startFromParentLocation boolean reverse [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[ADD]^^45^^^^^38^48^[ADD] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] NodeTest,boolean,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean startFromParentLocation boolean reverse [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^this.startFromParentLocation =  null;^46^^^^^38^48^[REPLACE] this.startFromParentLocation = startFromParentLocation;^[METHOD] <init> [TYPE] NodeTest,boolean,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean startFromParentLocation boolean reverse [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^this.reverse =  true;^47^^^^^38^48^[REPLACE] this.reverse = reverse;^[METHOD] <init> [TYPE] NodeTest,boolean,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean startFromParentLocation boolean reverse [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( position  !=  3 )  {^51^^^^^50^62^[REPLACE] if  ( position == 0 )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( !setPosition ( 1L )  )  {^52^^^^^50^62^[REPLACE] if  ( !setPosition ( 1 )  )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^return false;^53^^^^^50^62^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^return true;^53^^^^^50^62^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( !setPosition ( 0 )  )  {^52^^^^^50^62^[REPLACE] if  ( !setPosition ( 1 )  )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^return this;^53^^^^^50^62^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( iterator == true )  {^56^^^^^50^62^[REPLACE] if  ( iterator != null )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^return true;^60^^^^^50^62^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^return iterator .setPosition ( false )  ;^57^^^^^50^62^[REPLACE] return iterator.getNodePointer (  ) ;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^return this;^60^^^^^50^62^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( iterator != null )  {^75^^^^^71^87^[REPLACE] if  ( iterator == null )  {^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return this;^76^^^^^71^87^[REPLACE] return null;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( pointer == null )  {^80^^^^^71^87^[REPLACE] if  ( pointer != null )  {^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[ADD]^^80^81^82^^^71^87^[ADD] if  ( pointer != null )  { return pointer; }^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return getCurrentNodePointer (  ) ;^81^^^^^71^87^[REPLACE] return pointer;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return true;^76^^^^^71^87^[REPLACE] return null;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^int oldPosition = getCurrentPosition (  ) ;^79^^^^^71^87^[REPLACE] NodePointer pointer = iterator.getNodePointer (  ) ;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[ADD]^^79^^^^^71^87^[ADD] NodePointer pointer = iterator.getNodePointer (  ) ;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( position  != this )  {^72^^^^^71^87^[REPLACE] if  ( position == 0 )  {^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[ADD]^^73^74^^^^71^87^[ADD] while  ( nextSet (  )  )  { prepare (  ) ;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[ADD]^^75^76^77^^^71^87^[ADD] if  ( iterator == null )  { return null; }^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[ADD]^return pointer;^80^81^82^^^71^87^[ADD] if  ( pointer != null )  { return pointer; }^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( iterator != this )  {^75^^^^^71^87^[REPLACE] if  ( iterator == null )  {^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return false;^84^^^^^71^87^[REPLACE] return null;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[ADD]^return null;^75^76^77^^^71^87^[ADD] if  ( iterator == null )  { return null; }^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return false;^76^^^^^71^87^[REPLACE] return null;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^NodePointer pointer = iterator .setPosition ( this )  ;^79^^^^^71^87^[REPLACE] NodePointer pointer = iterator.getNodePointer (  ) ;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return iterator.getNodePointer (  ) ;^86^^^^^71^87^[REPLACE] return getCurrentNodePointer (  ) ;^[METHOD] getSingleNodePointer [TYPE] Pointer [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return false ;^90^^^^^89^91^[REPLACE] return setPosition ( getCurrentPosition (  )  + 1 ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^super.nextSet (  ) ;^94^^^^^93^96^[REPLACE] super.reset (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^iterator = true;^95^^^^^93^96^[REPLACE] iterator = null;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest 
[REPLACE]^NodePointer pointer = iterator.getNodePointer (  ) ;^99^^^^^98^108^[REPLACE] int oldPosition = getCurrentPosition (  ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^super.setPosition ( oldPosition ) ;^100^^^^^98^108^[REPLACE] super.setPosition ( position ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^if  ( position  &&  0 / 0 )  {^101^^^^^98^108^[REPLACE] if  ( oldPosition == 0 )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[ADD]^prepare (  ) ;^101^102^103^^^98^108^[ADD] if  ( oldPosition == 0 )  { prepare (  ) ; }^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^super.reset (  ) ;^102^^^^^98^108^[REPLACE] prepare (  ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^if  ( iterator != this  )  {^104^^^^^98^108^[REPLACE] if  ( iterator == null )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^return true;^105^^^^^98^108^[REPLACE] return false;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^return iterator.setPosition ( oldPosition ) ;^107^^^^^98^108^[REPLACE] return iterator.setPosition ( position ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodeTest nodeTest  [TYPE]  int oldPosition  position 
[REPLACE]^NodePointer parent = parentContext .ChildContext ( null , nodeTest , reverse , false )  ;^114^^^^^113^125^[REPLACE] NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( parent != this  )  {^115^^^^^113^125^[REPLACE] if  ( parent == null )  {^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[ADD]^return;^115^116^117^^^113^125^[ADD] if  ( parent == null )  { return; }^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^return null;^116^^^^^113^125^[REPLACE] return;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( position == 0 )  {^118^^^^^113^125^[REPLACE] if  ( startFromParentLocation )  {^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[ADD]^NodePointer pointer = parent.getParent (  ) ;iterator = pointer.childIterator ( nodeTest, reverse, parent ) ;^118^119^120^121^^113^125^[ADD] if  ( startFromParentLocation )  { NodePointer pointer = parent.getParent (  ) ; iterator = pointer.childIterator ( nodeTest, reverse, parent ) ; }^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^iterator = parent.childIterator ( nodeTest, reverse, this ) ;^123^^^^^113^125^[REPLACE] iterator = parent.childIterator ( nodeTest, reverse, null ) ;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[ADD]^^123^^^^^113^125^[ADD] iterator = parent.childIterator ( nodeTest, reverse, null ) ;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^iterator = parent.childIterator ( nodeTest, reverse, null ) ; ;^120^^^^^113^125^[REPLACE] iterator = pointer.childIterator ( nodeTest, reverse, parent ) ;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^NodePointer pointer = pointer.getParent (  ) ;^119^^^^^113^125^[REPLACE] NodePointer pointer = parent.getParent (  ) ;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
[REPLACE]^iterator = parent.childIterator ( nodeTest, reverse, true ) ;^123^^^^^113^125^[REPLACE] iterator = parent.childIterator ( nodeTest, reverse, null ) ;^[METHOD] prepare [TYPE] void [PARAMETER] [CLASS] ChildContext   [TYPE]  NodeIterator iterator  [TYPE]  boolean false  reverse  startFromParentLocation  true  [TYPE]  NodePointer parent  pointer  [TYPE]  NodeTest nodeTest 
