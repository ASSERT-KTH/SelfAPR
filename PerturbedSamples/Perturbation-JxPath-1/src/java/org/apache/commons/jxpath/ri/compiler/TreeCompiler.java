[REPLACE]^private static final QName QNAME_NAME ;^28^^^^^^^[REPLACE] private static final QName QNAME_NAME = new QName ( null, "name" ) ;^ [CLASS] TreeCompiler  
[REPLACE]^return  new Constant ( value )   ) ;^31^^^^^30^32^[REPLACE] return new Constant ( new Double ( value )  ) ;^[METHOD] number [TYPE] Object [PARAMETER] String value [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  String value  [TYPE]  boolean false  true 
[REPLACE]^return  new NodeTypeTest ( nodeType )  ;^35^^^^^34^36^[REPLACE] return new Constant ( value ) ;^[METHOD] literal [TYPE] Object [PARAMETER] String value [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  String value  [TYPE]  boolean false  true 
[REPLACE]^return  new Constant ( value )  ;^39^^^^^38^40^[REPLACE] return new QName ( prefix, name ) ;^[METHOD] qname [TYPE] Object [PARAMETER] String prefix String name [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  String name  prefix  [TYPE]  boolean false  true 
[REPLACE]^return new CoreOperationUnion ( toExpressionArray ( arguments )  ) ;^43^^^^^42^44^[REPLACE] return new CoreOperationAdd ( toExpressionArray ( arguments )  ) ;^[METHOD] sum [TYPE] Object [PARAMETER] Object[] arguments [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object[] arguments  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^47^48^49^^^46^50^[REPLACE] return new CoreOperationSubtract ( ( Expression )  left, ( Expression )  right ) ;^[METHOD] minus [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^53^^^^^52^54^[REPLACE] return new CoreOperationMultiply (  ( Expression )  left,  ( Expression )  right ) ;^[METHOD] multiply [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^57^^^^^56^58^[REPLACE] return new CoreOperationDivide (  ( Expression )  left,  ( Expression )  right ) ;^[METHOD] divide [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^61^^^^^60^62^[REPLACE] return new CoreOperationMod (  ( Expression )  left,  ( Expression )  right ) ;^[METHOD] mod [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^65^^^^^64^66^[REPLACE] return new CoreOperationLessThan (  ( Expression )  left,  ( Expression )  right ) ;^[METHOD] lessThan [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^69^70^71^^^68^72^[REPLACE] return new CoreOperationLessThanOrEqual ( ( Expression )  left, ( Expression )  right ) ;^[METHOD] lessThanOrEqual [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^75^76^77^^^74^78^[REPLACE] return new CoreOperationGreaterThan ( ( Expression )  left, ( Expression )  right ) ;^[METHOD] greaterThan [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^81^82^83^^^80^84^[REPLACE] return new CoreOperationGreaterThanOrEqual ( ( Expression )  left, ( Expression )  right ) ;^[METHOD] greaterThanOrEqual [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^if  ( array != null )  {^87^^^^^86^95^[REPLACE] if  ( isNameAttributeTest (  ( Expression )  left )  )  {^[METHOD] equal [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^91^92^93^^^86^95^[REPLACE] return new CoreOperationEqual ( ( Expression )  left, ( Expression )  right ) ;^[METHOD] equal [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return new CoreOperationDivide (  ( Expression )  left,  ( Expression )  right ) ;^88^^^^^86^95^[REPLACE] return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^[METHOD] equal [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^88^^^^^86^95^[REPLACE] return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^[METHOD] equal [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new CoreOperationEqual (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^98^99^100^^^97^101^[REPLACE] return new CoreOperationNotEqual ( ( Expression )  left, ( Expression )  right ) ;^[METHOD] notEqual [TYPE] Object [PARAMETER] Object left Object right [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object left  right  [TYPE]  boolean false  true 
[REPLACE]^return  new VariableReference (  (  ( QName )   ( qName )  )  )   argument ) ;^104^^^^^103^105^[REPLACE] return new CoreOperationNegate (  ( Expression )  argument ) ;^[METHOD] minus [TYPE] Object [PARAMETER] Object argument [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object argument  [TYPE]  boolean false  true 
[REPLACE]^return  new NodeNameTest (  (  ( QName )   ( qname )  )  )   qName ) ;^108^^^^^107^109^[REPLACE] return new VariableReference (  ( QName )  qName ) ;^[METHOD] variableReference [TYPE] Object [PARAMETER] Object qName [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object qName  [TYPE]  boolean false  true 
[REPLACE]^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^112^^^^^111^113^[REPLACE] return new CoreFunction ( code, toExpressionArray ( args )  ) ;^[METHOD] function [TYPE] Object [PARAMETER] int code Object[] args [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  int code  [TYPE]  Object[] args 
[REPLACE]^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^116^^^^^115^117^[REPLACE] return new ExtensionFunction (  ( QName )  name, toExpressionArray ( args )  ) ;^[METHOD] function [TYPE] Object [PARAMETER] Object name Object[] args [CLASS] TreeCompiler   [TYPE]  Object name  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] args 
[REPLACE]^return new CoreOperationUnion ( toExpressionArray ( arguments )  ) ;^120^121^^^^119^122^[REPLACE] return new CoreOperationAnd ( toExpressionArray ( arguments )  ) ;^[METHOD] and [TYPE] Object [PARAMETER] Object[] arguments [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object[] arguments  [TYPE]  boolean false  true 
[REPLACE]^return new CoreOperationUnion ( toExpressionArray ( arguments )  ) ;^125^126^^^^124^127^[REPLACE] return new CoreOperationOr ( toExpressionArray ( arguments )  ) ;^[METHOD] or [TYPE] Object [PARAMETER] Object[] arguments [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object[] arguments  [TYPE]  boolean false  true 
[REPLACE]^return new CoreOperationOr ( toExpressionArray ( arguments )  ) ;^130^131^^^^129^132^[REPLACE] return new CoreOperationUnion ( toExpressionArray ( arguments )  ) ;^[METHOD] union [TYPE] Object [PARAMETER] Object[] arguments [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object[] arguments  [TYPE]  boolean false  true 
[REPLACE]^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^135^^^^^134^136^[REPLACE] return new LocationPath ( absolute, toStepArray ( steps )  ) ;^[METHOD] locationPath [TYPE] Object [PARAMETER] boolean absolute Object[] steps [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object[] steps  [TYPE]  boolean absolute  false  true 
[REPLACE]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( steps ) , toStepArray ( steps )  ) ;^143^144^145^146^^138^147^[REPLACE] return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[METHOD] expressionPath [TYPE] Object [PARAMETER] Object expression Object[] predicates Object[] steps [CLASS] TreeCompiler   [TYPE]  Object expression  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] predicates  steps 
[REPLACE]^return  new VariableReference (  (  ( QName )   ( qName )  )  )   qname ) ;^150^^^^^149^151^[REPLACE] return new NodeNameTest (  ( QName )  qname ) ;^[METHOD] nodeNameTest [TYPE] Object [PARAMETER] Object qname [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  Object qname  [TYPE]  boolean false  true 
[REPLACE]^return  new ProcessingInstructionTest ( instruction )  ;^154^^^^^153^155^[REPLACE] return new NodeTypeTest ( nodeType ) ;^[METHOD] nodeTypeTest [TYPE] Object [PARAMETER] int nodeType [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  int nodeType  [TYPE]  boolean false  true 
[REPLACE]^return  new NodeTypeTest ( nodeType )  ;^158^^^^^157^159^[REPLACE] return new ProcessingInstructionTest ( instruction ) ;^[METHOD] processingInstructionTest [TYPE] Object [PARAMETER] String instruction [CLASS] TreeCompiler   [TYPE]  QName QNAME_NAME  [TYPE]  String instruction  [TYPE]  boolean false  true 
[REPLACE]^Expression expArray[] = false;^169^^^^^168^177^[REPLACE] Expression expArray[] = null;^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^if  ( array == null )  {^170^^^^^168^177^[REPLACE] if  ( array != null )  {^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < expArray.length - 3; i++ )  {^172^^^^^168^177^[REPLACE] for  ( int i = 0; i < expArray.length; i++ )  {^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^expArray[i]  =  expArray[i] ;^173^^^^^168^177^[REPLACE] expArray[i] =  ( Expression )  array[i];^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^expArray =  new Expression[null.length];^171^^^^^168^177^[REPLACE] expArray = new Expression[array.length];^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < expArray.length; i++ )  {^172^^^^^168^177^[REPLACE] for  ( int i = 0; i < expArray.length; i++ )  {^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < expArray.length - 3; i++ )  {^172^^^^^168^177^[REPLACE] for  ( int i = 0; i < expArray.length; i++ )  {^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[ADD]^^173^^^^^168^177^[ADD] expArray[i] =  ( Expression )  array[i];^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[ADD]^^171^^^^^168^177^[ADD] expArray = new Expression[array.length];^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^return stepArray;^176^^^^^168^177^[REPLACE] return expArray;^[METHOD] toExpressionArray [TYPE] Expression[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  Expression[] expArray  [TYPE]  int i 
[REPLACE]^Step stepArray[] = this;^180^^^^^179^188^[REPLACE] Step stepArray[] = null;^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^if  ( array == true )  {^181^^^^^179^188^[REPLACE] if  ( array != null )  {^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[ADD]^^181^182^183^184^185^179^188^[ADD] if  ( array != null )  { stepArray = new Step[array.length]; for  ( int i = 0; i < stepArray.length; i++ )  { stepArray[i] =  ( Step )  array[i]; }^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < stepArray.length /  2; i++ )  {^183^^^^^179^188^[REPLACE] for  ( int i = 0; i < stepArray.length; i++ )  {^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^stepArray[i]  = null ;^184^^^^^179^188^[REPLACE] stepArray[i] =  ( Step )  array[i];^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^stepArray =  new Step[null.length];^182^^^^^179^188^[REPLACE] stepArray = new Step[array.length];^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[ADD]^^182^^^^^179^188^[ADD] stepArray = new Step[array.length];^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^stepArray[i]  =  stepArray[i] ;^184^^^^^179^188^[REPLACE] stepArray[i] =  ( Step )  array[i];^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < stepArray.length; i++ )  {^183^^^^^179^188^[REPLACE] for  ( int i = 0; i < stepArray.length; i++ )  {^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < stepArray.length - 3; i++ )  {^183^^^^^179^188^[REPLACE] for  ( int i = 0; i < stepArray.length; i++ )  {^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[ADD]^^183^184^185^^^179^188^[ADD] for  ( int i = 0; i < stepArray.length; i++ )  { stepArray[i] =  ( Step )  array[i]; }^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[ADD]^^184^^^^^179^188^[ADD] stepArray[i] =  ( Step )  array[i];^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^return expArray;^187^^^^^179^188^[REPLACE] return stepArray;^[METHOD] toStepArray [TYPE] Step[] [PARAMETER] Object[] array [CLASS] TreeCompiler   [TYPE]  Step[] stepArray  [TYPE]  boolean false  true  [TYPE]  QName QNAME_NAME  [TYPE]  Object[] array  [TYPE]  int i 
[REPLACE]^if  ( ! ! ( arg instanceof LocationPath )  )  {^191^^^^^190^210^[REPLACE] if  ( ! ( arg instanceof LocationPath )  )  {^[METHOD] isNameAttributeTest [TYPE] boolean [PARAMETER] Expression arg [CLASS] TreeCompiler   [TYPE]  Step[] steps  [TYPE]  boolean false  true  [TYPE]  Expression arg  [TYPE]  QName QNAME_NAME  [TYPE]  NodeTest test 
[REPLACE]^return true;^192^^^^^190^210^[REPLACE] return false;^[METHOD] isNameAttributeTest [TYPE] boolean [PARAMETER] Expression arg [CLASS] TreeCompiler   [TYPE]  Step[] steps  [TYPE]  boolean false  true  [TYPE]  Expression arg  [TYPE]  QName QNAME_NAME  [TYPE]  NodeTest test 
[REPLACE]^Step[] steps =  (  ( LocationPath )  arg )  .getAxis (  )  ;^195^^^^^190^210^[REPLACE] Step[] steps =  (  ( LocationPath )  arg ) .getSteps (  ) ;^[METHOD] isNameAttributeTest [TYPE] boolean [PARAMETER] Expression arg [CLASS] TreeCompiler   [TYPE]  Step[] steps  [TYPE]  boolean false  true  [TYPE]  Expression arg  [TYPE]  QName QNAME_NAME  [TYPE]  NodeTest test 
[REPLACE]^if  ( steps.length (  )  != 1 )  {^196^^^^^190^210^[REPLACE] if  ( steps.length != 1 )  {^[METHOD] isNameAttributeTest [TYPE] boolean [PARAMETER] Expression arg [CLASS] TreeCompiler   [TYPE]  Step[] steps  [TYPE]  boolean false  true  [TYPE]  Expression arg  [TYPE]  QName QNAME_NAME  [TYPE]  NodeTest test 
[REPLACE]^return true;^197^^^^^190^210^[REPLACE] return false;^[METHOD] isNameAttributeTest [TYPE] boolean [PARAMETER] Expression arg [CLASS] TreeCompiler   [TYPE]  Step[] steps  [TYPE]  boolean false  true  [TYPE]  Expression arg  [TYPE]  QName QNAME_NAME  [TYPE]  NodeTest test 
