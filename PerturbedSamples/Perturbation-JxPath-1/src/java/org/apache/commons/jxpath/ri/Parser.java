[REPLACE]^private  XPathParser parser = new XPathParser ( new StringReader ( "" )  ) ;^34^^^^^^^[REPLACE] private static XPathParser parser = new XPathParser ( new StringReader ( "" )  ) ;^ [CLASS] Parser  
[ADD]^parser.ReInit ( new StringReader ( expression )  ) ;expr = parser.parseExpression (  ) ;^47^48^49^50^^43^71^[ADD] try { parser.ReInit ( new StringReader ( expression )  ) ; expr = parser.parseExpression (  ) ; }^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[REPLACE]^expr ;^49^^^^^43^71^[REPLACE] expr = parser.parseExpression (  ) ;^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[ADD]^^49^^^^^43^71^[ADD] expr = parser.parseExpression (  ) ;^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[REPLACE]^return "- expression incomplete";^69^^^^^43^71^[REPLACE] return expr;^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[REPLACE]^Object expr = this;^46^^^^^43^71^[REPLACE] Object expr = null;^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[REPLACE]^throw new JXPathInvalidSyntaxException ( "Invalid XPath: '" ;^52^53^54^55^^43^71^[REPLACE] throw new JXPathInvalidSyntaxException ( "Invalid XPath: '" + addEscapes ( expression ) + "'. Invalid symbol '"^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[ADD]^^52^53^54^^^43^71^[ADD] throw new JXPathInvalidSyntaxException ( "Invalid XPath: '" + addEscapes ( expression )^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[REPLACE]^throw new JXPathInvalidSyntaxException ( "Invalid XPath: '" ;^61^62^63^64^^43^71^[REPLACE] throw new JXPathInvalidSyntaxException ( "Invalid XPath: '" + addEscapes ( expression ) + "'. Syntax error "^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[ADD]^^61^62^63^^^43^71^[ADD] throw new JXPathInvalidSyntaxException ( "Invalid XPath: '" + addEscapes ( expression )^[METHOD] parseExpression [TYPE] Object [PARAMETER] String expression Compiler compiler [CLASS] Parser   [TYPE]  Compiler compiler  [TYPE]  XPathParser parser  [TYPE]  boolean false  true  [TYPE]  Object expr  [TYPE]  TokenMgrError e  [TYPE]  String expression  [TYPE]  ParseException e 
[REPLACE]^if  ( position  !=  0 )  {^74^^^^^73^84^[REPLACE] if  ( position <= 0 )  {^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^else if  ( position >= expression.size (  )  )  {^77^^^^^73^84^[REPLACE] else if  ( position >= expression.length (  )  )  {^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^return "after: '"  !=  addEscapes ( expression.substring ( 0, position )  )   !=  "'";;^81^82^^^^73^84^[REPLACE] return "after: '" + addEscapes ( expression.substring ( 0, position )  )  + "'";^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^return "at the beginning of the expression";^78^^^^^73^84^[REPLACE] return "- expression incomplete";^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^return "after: '" + addEscapes ( expression .length (  )  - 3  )  + "'";^81^82^^^^73^84^[REPLACE] return "after: '" + addEscapes ( expression.substring ( 0, position )  )  + "'";^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^return "after: '" + addEscapes ( expression.substring ( 0, position )  )  + "'";^75^^^^^73^84^[REPLACE] return "at the beginning of the expression";^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^else {^77^^^^^73^84^[REPLACE] else if  ( position >= expression.length (  )  )  {^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[ADD]^return "- expression incomplete";^77^78^79^^^73^84^[ADD] else if  ( position >= expression.length (  )  )  { return "- expression incomplete"; }^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^return "after: '"  ;^81^82^^^^73^84^[REPLACE] return "after: '" + addEscapes ( expression.substring ( 0, position )  )  + "'";^[METHOD] describePosition [TYPE] String [PARAMETER] String expression int position [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String expression  [TYPE]  boolean false  true  [TYPE]  int position 
[REPLACE]^return   string   ;^88^^^^^86^89^[REPLACE] return TokenMgrError.addEscapes ( string ) ;^[METHOD] addEscapes [TYPE] String [PARAMETER] String string [CLASS] Parser   [TYPE]  XPathParser parser  [TYPE]  String string  [TYPE]  boolean false  true 
