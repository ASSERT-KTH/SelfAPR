[REPLACE]^private  short  axis;^26^^^^^^^[REPLACE] private int axis;^ [CLASS] Step  
[REPLACE]^this.axis =  null;^31^^^^^30^34^[REPLACE] this.axis = axis;^[METHOD] <init> [TYPE] Expression[]) [PARAMETER] int axis NodeTest nodeTest Expression[] predicates [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^this.nodeTest =  null;^32^^^^^30^34^[REPLACE] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] Expression[]) [PARAMETER] int axis NodeTest nodeTest Expression[] predicates [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^this.predicates =  null;^33^^^^^30^34^[REPLACE] this.predicates = predicates;^[METHOD] <init> [TYPE] Expression[]) [PARAMETER] int axis NodeTest nodeTest Expression[] predicates [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return nodeTest;^37^^^^^36^38^[REPLACE] return axis;^[METHOD] getAxis [TYPE] int [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return "ancestor-or-self";^41^^^^^40^42^[REPLACE] return nodeTest;^[METHOD] getNodeTest [TYPE] NodeTest [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return nodeTest;^45^^^^^44^46^[REPLACE] return predicates;^[METHOD] getPredicates [TYPE] Expression[] [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( predicates == null )  {^49^^^^^48^57^[REPLACE] if  ( predicates != null )  {^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[ADD]^^49^50^51^52^53^48^57^[ADD] if  ( predicates != null )  { for  ( int i = 0; i < predicates.length; i++ )  { if  ( predicates[i].isContextDependent (  )  )  { return true; }^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( predicates[i].getNodeType (  )  )  {^51^^^^^48^57^[REPLACE] if  ( predicates[i].isContextDependent (  )  )  {^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[ADD]^^51^52^53^^^48^57^[ADD] if  ( predicates[i].isContextDependent (  )  )  { return true; }^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^return false;^52^^^^^48^57^[REPLACE] return true;^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^for  ( int i = 0; i < predicates.length %  2; i++ )  {^50^^^^^48^57^[REPLACE] for  ( int i = 0; i < predicates.length; i++ )  {^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^for  ( int i = 0 ; i < predicates.length; i++ )  {^50^^^^^48^57^[REPLACE] for  ( int i = 0; i < predicates.length; i++ )  {^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[ADD]^^50^51^52^53^^48^57^[ADD] for  ( int i = 0; i < predicates.length; i++ )  { if  ( predicates[i].isContextDependent (  )  )  { return true; }^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^for  ( int i = 0 ; i < predicates.length - 1; i++ )  {^50^^^^^48^57^[REPLACE] for  ( int i = 0; i < predicates.length; i++ )  {^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^return true;^56^^^^^48^57^[REPLACE] return false;^[METHOD] isContextDependent [TYPE] boolean [PARAMETER] [CLASS] Step   [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^for  ( int i = 0; i < predicates.length; i++ )  { if  ( predicates[i].isContextDependent (  )  )  {^60^^^^^59^102^[REPLACE] StringBuffer buffer = new StringBuffer (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Step   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
[REPLACE]^Expression[] predicates = getPredicates (  ) ;^61^^^^^59^102^[REPLACE] int axis = getAxis (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Step   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  Expression[] predicates  [TYPE]  int axis  i  [TYPE]  NodeTest nodeTest 
