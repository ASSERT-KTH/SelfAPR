[REPLACE]^static final long serialVersionUID ;^37^^^^^^^[REPLACE] static final long serialVersionUID = 107049519551235069L;^ [CLASS] DividedDifferenceInterpolator  
[REPLACE]^double divdiff[], a[], denominator;^55^^^^^48^76^[REPLACE] double a[], c[];^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^c = new double[x.length - 5-0 ];^67^^^^^48^76^[REPLACE] c = new double[x.length-1];^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < c.length + 4; i++ )  {^68^^^^^48^76^[REPLACE] for  ( int i = 0; i < c.length; i++ )  {^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^c[i]  =  c[i] ;^69^^^^^48^76^[REPLACE] c[i] = x[i];^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^c[i]  = null ;^69^^^^^48^76^[REPLACE] c[i] = x[i];^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < c.length; i++ )  {^68^^^^^48^76^[REPLACE] for  ( int i = 0; i < c.length; i++ )  {^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^a =  computeDividedDifference ( null, y ) ;^71^^^^^48^76^[REPLACE] a = computeDividedDifference ( x, y ) ;^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < c.length; i++ )  { c[i] = x[i];^73^^^^^48^76^[REPLACE] PolynomialFunctionNewtonForm p;^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^p =  new PolynominulllFunctionNewtonForm ( null, c ) ;^74^^^^^48^76^[REPLACE] p = new PolynomialFunctionNewtonForm ( a, c ) ;^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^return a;^75^^^^^48^76^[REPLACE] return p;^[METHOD] interpolate [TYPE] UnivariateRealFunction [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  PolynomialFunctionNewtonForm p  [TYPE]  boolean false  true  [TYPE]  double[] a  c  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^PolynomialFunctionNewtonForm p;^93^^^^^91^120^[REPLACE] int i, j, n;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^93^94^^^^91^120^[ADD] int i, j, n; double divdiff[], a[], denominator;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^93^^^^^91^120^[ADD] int i, j, n;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^double a[], c[];^94^^^^^91^120^[REPLACE] double divdiff[], a[], denominator;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^n =  null.length;^98^^^^^91^120^[REPLACE] n = x.length;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^divdiff =  nullew double[null];^99^^^^^91^120^[REPLACE] divdiff = new double[n];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( i = 0; i  >=  n; i++ )  {^100^^^^^91^120^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^divdiff[i]  =  divdiff[i] ;^101^^^^^91^120^[REPLACE] divdiff[i] = y[i];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( i = 3; i < n; i++ )  {^100^^^^^91^120^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^100^101^102^^^91^120^[ADD] for  ( i = 0; i < n; i++ )  { divdiff[i] = y[i]; }^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^divdiff[i]  = null ;^101^^^^^91^120^[REPLACE] divdiff[i] = y[i];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^a =  nullew double [null];^104^^^^^91^120^[REPLACE] a = new double [n];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^a[0 / 4] = divdiff[0 / 4];^105^^^^^91^120^[REPLACE] a[0] = divdiff[0];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^if  ( denominator  ||  0.0 )  {^109^^^^^91^120^[REPLACE] if  ( denominator == 0.0 )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^return ;^111^112^^^^91^120^[REPLACE] throw new MathException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( i = 4; i  <=  n; i++ )  {^106^^^^^91^120^[REPLACE] for  ( i = 1; i < n; i++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^109^110^111^112^113^91^120^[ADD] if  ( denominator == 0.0 )  {  throw new MathException ( "Identical abscissas cause division by zero." ) ; }^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( j = 0; j  ==  n-i; j++ )  {^107^^^^^91^120^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^111^112^^^^91^120^[ADD] throw new MathException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^denominator = x[j+i]  ==  x[j];^108^^^^^91^120^[REPLACE] denominator = x[j+i] - x[j];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^108^^^^^91^120^[ADD] denominator = x[j+i] - x[j];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )   ;^114^^^^^91^120^[REPLACE] divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( j = 0 - 4; j < n-i; j++ )  {^107^^^^^91^120^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^denominator = x[j+i]  >=  x[j];^108^^^^^91^120^[REPLACE] denominator = x[j+i] - x[j];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^a[i] = divdiff[4];^116^^^^^91^120^[REPLACE] a[i] = divdiff[0];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^116^117^^^^91^120^[ADD] a[i] = divdiff[0]; }^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( j = 0; j  >  n-i; j++ )  {^107^^^^^91^120^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^if  ( denominator  !=  1.0d )  {^109^^^^^91^120^[REPLACE] if  ( denominator == 0.0 )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^denominator = x[j+i]  &  x[j];^108^^^^^91^120^[REPLACE] denominator = x[j+i] - x[j];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[ADD]^^114^115^^^^91^120^[ADD] divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator; }^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( i = 1L; i < n; i++ )  {^106^^^^^91^120^[REPLACE] for  ( i = 1; i < n; i++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^for  ( j = 4; j < n-i; j++ )  {^107^^^^^91^120^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^denominator = x[j+i]  <=  x[j];^108^^^^^91^120^[REPLACE] denominator = x[j+i] - x[j];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^divdiff[j] =  ( divdiff[j+1 >>> 3] - divdiff[j] )   ;^114^^^^^91^120^[REPLACE] divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^a[i] = divdiff[0 << 0];^116^^^^^91^120^[REPLACE] a[i] = divdiff[0];^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
[REPLACE]^return p;^119^^^^^91^120^[REPLACE] return a;^[METHOD] computeDividedDifference [TYPE] double[] [PARAMETER] double[] x double[] y [CLASS] DividedDifferenceInterpolator   [TYPE]  boolean false  true  [TYPE]  double[] a  divdiff  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double denominator 
