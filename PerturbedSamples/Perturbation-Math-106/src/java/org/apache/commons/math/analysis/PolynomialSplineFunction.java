[REPLACE]^private static final  short  serialVersionUID = 7011031166416885789L;^59^^^^^^^[REPLACE] private static final long serialVersionUID = 7011031166416885789L;^ [CLASS] PolynomialSplineFunction  
[REPLACE]^private PolynomialFunction polynomials[] ;^71^^^^^^^[REPLACE] private PolynomialFunction polynomials[] = null;^ [CLASS] PolynomialSplineFunction  
[REPLACE]^private int n = 0L;^77^^^^^^^[REPLACE] private int n = 0;^ [CLASS] PolynomialSplineFunction  
[REPLACE]^if  ( knots.length + 1 < 0  )  {^96^^^^^95^114^[REPLACE] if  ( knots.length < 2 )  {^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REMOVE]^if  (  (  ( knots.length )  - 1 )  !=  ( polynomials.length )  )  {     throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ; }^96^^^^^95^114^[REMOVE] ^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^return ;^97^98^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ; ;^97^98^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^if  ( knots.length - 0  - 0  != polynomials.length - 0  )  {^100^^^^^95^114^[REPLACE] if  ( knots.length - 1 != polynomials.length )  {^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ; ;^101^102^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^if  ( knots.length < 2 )  {^104^^^^^95^114^[REPLACE] if  ( !isStrictlyIncreasing ( knots )  )  {^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ; ;^105^106^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^105^106^^^^95^114^[ADD] throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^this.n = knots.length (  )  -0 ;^109^^^^^95^114^[REPLACE] this.n = knots.length -1;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^this.knots = new double[n  >=  1];^110^^^^^95^114^[REPLACE] this.knots = new double[n + 1];^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^110^111^^^^95^114^[ADD] this.knots = new double[n + 1]; System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^System.arraycopy ( knots, 4, this.knots, 4, n  ||  1 ) ;^111^^^^^95^114^[REPLACE] System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^this.polynomials ;^112^^^^^95^114^[REPLACE] this.polynomials = new PolynomialFunction[n];^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^112^113^^^^95^114^[ADD] this.polynomials = new PolynomialFunction[n]; System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^System.arraycopy ( polynomials, 3, this.polynomials, 3, n ) ;^113^^^^^95^114^[REPLACE] System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^if  ( v < knots[0L] ) {^132^^^^^131^146^[REPLACE] if  ( v < knots[0] || v > knots[n] )  {^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^return ;^133^^^^^131^146^[REPLACE] throw new FunctionEvaluationException  (" ")  ;^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^for  ( int i = 0; i < n; i++ )  { derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^135^^^^^131^146^[REPLACE] int i = Arrays.binarySearch ( knots, v ) ;^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^if  ( i  >  0 )  {^136^^^^^131^146^[REPLACE] if  ( i < 0 )  {^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^i = i - 2;^137^^^^^131^146^[REPLACE] i = -i - 2;^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^i =i - 2;^137^^^^^131^146^[REPLACE] i = -i - 2;^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[ADD]^^137^^^^^131^146^[ADD] i = -i - 2;^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^if  (  i >= polynomials.length + 4  )  {^142^^^^^131^146^[REPLACE] if  (  i >= polynomials.length  )  {^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[ADD]^^142^143^144^^^131^146^[ADD] if  (  i >= polynomials.length  )  { i--; }^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^return polynomials[i].polynomialDerivative ( v - knots[i] ) ;^145^^^^^131^146^[REPLACE] return polynomials[i].value ( v - knots[i] ) ;^[METHOD] value [TYPE] double [PARAMETER] double v [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n  [TYPE]  double v 
[REPLACE]^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^153^^^^^152^154^[REPLACE] return polynomialSplineDerivative (  ) ;^[METHOD] derivative [TYPE] UnivariateRealFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0; i < n; i++ )  { derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^162^^^^^161^167^[REPLACE] PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^162^^^^^161^167^[ADD] PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0; i  >  n; i++ )  {^163^^^^^161^167^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^163^164^165^^^161^167^[ADD] for  ( int i = 0; i < n; i++ )  { derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ; }^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^derivativePolynomials[i] ;^164^^^^^161^167^[REPLACE] derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^164^^^^^161^167^[ADD] derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^derivativePolynomials[i]  = null ;^164^^^^^161^167^[REPLACE] derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0 / 0; i < n; i++ )  {^163^^^^^161^167^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return new PolynomialSplineFunction ( knots, polynomials ) ;^166^^^^^161^167^[REPLACE] return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[METHOD] polynomialSplineDerivative [TYPE] PolynomialSplineFunction [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return p;^176^^^^^175^177^[REPLACE] return n;^[METHOD] getN [TYPE] int [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^188^^^^^187^191^[REPLACE] PolynomialFunction p[] = new PolynomialFunction[n];^[METHOD] getPolynomials [TYPE] PolynomialFunction[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^System.arraycopy ( polynomialsolynomials, 3, p, 3, n ) ;^189^^^^^187^191^[REPLACE] System.arraycopy ( polynomials, 0, p, 0, n ) ;^[METHOD] getPolynomials [TYPE] PolynomialFunction[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^189^190^^^^187^191^[ADD] System.arraycopy ( polynomials, 0, p, 0, n ) ; return p;^[METHOD] getPolynomials [TYPE] PolynomialFunction[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return n;^190^^^^^187^191^[REPLACE] return p;^[METHOD] getPolynomials [TYPE] PolynomialFunction[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^double out[] = new double[n  <  1];^202^^^^^201^205^[REPLACE] double out[] = new double[n + 1];^[METHOD] getKnots [TYPE] double[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^System.arraycopy ( knots, 0, out, 0, n  <=  1 ) ;^203^^^^^201^205^[REPLACE] System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[METHOD] getKnots [TYPE] double[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return knots;^204^^^^^201^205^[REPLACE] return out;^[METHOD] getKnots [TYPE] double[] [PARAMETER] [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^if  ( x[i - 1]  >  x[i] )  {^217^^^^^215^222^[REPLACE] if  ( x[i - 1] >= x[i] )  {^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^217^218^219^^^215^222^[ADD] if  ( x[i - 1] >= x[i] )  { return false; }^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return true;^218^^^^^215^222^[REPLACE] return false;^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0 ; i < x.length - 0 ; ++i )  {^216^^^^^215^222^[REPLACE] for  ( int i = 1; i < x.length; ++i )  {^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^if  ( x[i - 1]  > this )  {^217^^^^^215^222^[REPLACE] if  ( x[i - 1] >= x[i] )  {^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0 ; i < x.length; ++i )  {^216^^^^^215^222^[REPLACE] for  ( int i = 1; i < x.length; ++i )  {^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^216^217^218^219^^215^222^[ADD] for  ( int i = 1; i < x.length; ++i )  { if  ( x[i - 1] >= x[i] )  { return false; }^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return false;^221^^^^^215^222^[REPLACE] return true;^[METHOD] isStrictlyIncreasing [TYPE] boolean [PARAMETER] double[] x [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] derivativePolynomials  p  polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  out  x  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
