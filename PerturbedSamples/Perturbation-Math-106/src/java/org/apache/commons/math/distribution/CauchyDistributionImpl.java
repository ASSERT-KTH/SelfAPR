[REPLACE]^private  final long serialVersionUID = 8589540077390120676;^32^^^^^^^[REPLACE] private static final long serialVersionUID = 8589540077390120676L;^ [CLASS] CauchyDistributionImpl  
[REPLACE]^private double median ;^35^^^^^^^[REPLACE] private double median = 0;^ [CLASS] CauchyDistributionImpl  
[REPLACE]^private double scale ;^38^^^^^^^[REPLACE] private double scale = 1;^ [CLASS] CauchyDistributionImpl  
[REPLACE]^this ( 0.0D, 1.0 ) ;^45^^^^^44^46^[REPLACE] this ( 0.0, 1.0 ) ;^[METHOD] <init> [TYPE] CauchyDistributionImpl() [PARAMETER] [CLASS] CauchyDistributionImpl   [TYPE]  double median  scale  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^setScale ( s ) ;^54^^^^^53^57^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] CauchyDistributionImpl(double,double) [PARAMETER] double median double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^54^^^^^53^57^[ADD] super (  ) ;^[METHOD] <init> [TYPE] CauchyDistributionImpl(double,double) [PARAMETER] double median double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^setScale ( s ) ;^55^^^^^53^57^[REPLACE] setMedian ( median ) ;^[METHOD] <init> [TYPE] CauchyDistributionImpl(double,double) [PARAMETER] double median double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^setScale ( scale ) ;^56^^^^^53^57^[REPLACE] setScale ( s ) ;^[METHOD] <init> [TYPE] CauchyDistributionImpl(double,double) [PARAMETER] double median double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return 0.5  &&   ( Math.tan (  ( x - median )  / scale )  / Math.PI ) ;^65^^^^^64^66^[REPLACE] return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return scale;^73^^^^^72^74^[REPLACE] return median;^[METHOD] getMedian [TYPE] double [PARAMETER] [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ret;^81^^^^^80^82^[REPLACE] return scale;^[METHOD] getScale [TYPE] double [PARAMETER] [CLASS] CauchyDistributionImpl   [TYPE]  double median  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^97^^^^^96^109^[ADD] double ret;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  (  p > 1.0 )  {^98^^^^^96^109^[REPLACE] if  ( p < 0.0 || p > 1.0 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^}  else {^101^^^^^96^109^[REPLACE] } else if  ( p == 0 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^}   ret = Double.NEGATIVE_INFINITY;ret = Double.POSITIVE_INFINITY;^101^102^103^104^^96^109^[ADD] else if  ( p == 0 )  { ret = Double.NEGATIVE_INFINITY; } else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^}   if  ( p  ||  1 )  {^103^^^^^96^109^[REPLACE] } else  if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = median  ||  scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^[REPLACE] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = Double.NEGATIVE_INFINITY; ;^104^^^^^96^109^[REPLACE] ret = Double.POSITIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = median  &&  scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^[REPLACE] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = Double.POSITIVE_INFINITY; ;^102^^^^^96^109^[REPLACE] ret = Double.NEGATIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^}  else {^103^^^^^96^109^[REPLACE] } else  if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = median  <=  scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^[REPLACE] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret =ret + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^[REPLACE] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^99^100^^^^96^109^[REPLACE] throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^99^100^^^^96^109^[ADD] throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^}   if  ( p  &&  1 )  {^103^^^^^96^109^[REPLACE] } else  if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^}   ret = Double.POSITIVE_INFINITY;ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^103^104^105^106^107^96^109^[ADD] else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY; } else { ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ; }^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = ret + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^[REPLACE] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^106^^^^^96^109^[ADD] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^}   ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^103^104^105^106^107^96^109^[ADD] else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY; } else { ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ; }^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = median  ^  scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^[REPLACE] ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Scale must be positive." ) ; ;^99^100^^^^96^109^[REPLACE] throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return median;^108^^^^^96^109^[REPLACE] return ret;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^this.median =  ret;^116^^^^^115^117^[REPLACE] this.median = median;^[METHOD] setMedian [TYPE] void [PARAMETER] double median [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( s  <  0.0 )  {^125^^^^^124^130^[REPLACE] if  ( s <= 0.0 )  {^[METHOD] setScale [TYPE] void [PARAMETER] double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^126^127^^^^124^130^[REPLACE] throw new IllegalArgumentException ( "Scale must be positive." ) ;^[METHOD] setScale [TYPE] void [PARAMETER] double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ; ;^126^127^^^^124^130^[REPLACE] throw new IllegalArgumentException ( "Scale must be positive." ) ;^[METHOD] setScale [TYPE] void [PARAMETER] double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^scale =  null;^129^^^^^124^130^[REPLACE] scale = s;^[METHOD] setScale [TYPE] void [PARAMETER] double s [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  ==  .5 )  {^144^^^^^141^151^[REPLACE] if  ( p < .5 )  {^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret ;^147^^^^^141^151^[REPLACE] ret = getMedian (  ) ;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = Double.MAX_VALUE; ;^145^^^^^141^151^[REPLACE] ret = -Double.MAX_VALUE;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^145^^^^^141^151^[ADD] ret = -Double.MAX_VALUE;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret  = null ;^147^^^^^141^151^[REPLACE] ret = getMedian (  ) ;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^147^^^^^141^151^[ADD] ret = getMedian (  ) ;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return median;^150^^^^^141^151^[REPLACE] return ret;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  >=  .5 )  {^165^^^^^162^172^[REPLACE] if  ( p < .5 )  {^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = -Double.MAX_VALUE; ;^168^^^^^162^172^[REPLACE] ret = Double.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret  =  ret ;^166^^^^^162^172^[REPLACE] ret = getMedian (  ) ;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret  = null ;^166^^^^^162^172^[REPLACE] ret = getMedian (  ) ;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return median;^171^^^^^162^172^[REPLACE] return ret;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  ==  .5 )  {^185^^^^^182^194^[REPLACE] if  ( p < .5 )  {^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( p  >=  .5 )  {^187^^^^^182^194^[REPLACE] } else if  ( p > .5 )  {^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^}   ret = getMedian (  )  + getScale (  ) ;ret = getMedian (  ) ;^187^188^189^190^191^182^194^[ADD] else if  ( p > .5 )  { ret = getMedian (  )  + getScale (  ) ; } else { ret = getMedian (  ) ; }^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret  =  ret ;^190^^^^^182^194^[REPLACE] ret = getMedian (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = getMedian (  )  +scale (  ) ;^188^^^^^182^194^[REPLACE] ret = getMedian (  )  + getScale (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret =scale (  )  + getScale (  ) ;^188^^^^^182^194^[REPLACE] ret = getMedian (  )  + getScale (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret ;^190^^^^^182^194^[REPLACE] ret = getMedian (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^190^^^^^182^194^[ADD] ret = getMedian (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret =scale (  )  - getScale (  ) ;^186^^^^^182^194^[REPLACE] ret = getMedian (  )  - getScale (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^186^^^^^182^194^[ADD] ret = getMedian (  )  - getScale (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( p  !=  .5 )  {^187^^^^^182^194^[REPLACE] } else if  ( p > .5 )  {^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = getMedian (  )   ||  getScale (  ) ;^188^^^^^182^194^[REPLACE] ret = getMedian (  )  + getScale (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return median;^193^^^^^182^194^[REPLACE] return ret;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] CauchyDistributionImpl   [TYPE]  double median  p  ret  s  scale  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
