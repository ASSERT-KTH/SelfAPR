[REPLACE]^static  long serialVersionUID = -3353896576191389897L;^37^^^^^^^[REPLACE] static final long serialVersionUID = -3353896576191389897L;^ [CLASS] PolynomialFunctionNewtonForm  
[REPLACE]^verifyInputArray ( a, coefficients ) ;^72^^^^^69^78^[REPLACE] verifyInputArray ( a, c ) ;^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^this.c = new double[c.length]; ;^73^^^^^69^78^[REPLACE] this.a = new double[a.length];^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^this.a = new double[a.length]; ;^74^^^^^69^78^[REPLACE] this.c = new double[c.length];^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( a, 0 , this.a, 0 , a.length ) ;^75^^^^^69^78^[REPLACE] System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[ADD]^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^75^76^^^^69^78^[ADD] System.arraycopy ( a, 0, this.a, 0, a.length ) ; System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( c, 0 , this.c, 0 , c.length ) ;^76^^^^^69^78^[REPLACE] System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^coefficientsComputed = true;^77^^^^^69^78^[REPLACE] coefficientsComputed = false;^[METHOD] <init> [TYPE] PolynomialFunctionNewtonForm(double[],double[]) [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^return c.length;^89^^^^^88^90^[REPLACE] return evaluate ( a, c, z ) ;^[METHOD] value [TYPE] double [PARAMETER] double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  double z 
[REPLACE]^return out;^98^^^^^97^99^[REPLACE] return c.length;^[METHOD] degree [TYPE] int [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  [TYPE]  long serialVersionUID 
[REPLACE]^double[] out = new double[c.length];^109^^^^^108^112^[REPLACE] double[] out = new double[a.length];^[METHOD] getNewtonCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[ADD]^^109^^^^^108^112^[ADD] double[] out = new double[a.length];^[METHOD] getNewtonCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( a, 0 , coefficients, 0 , a.length ) ;^110^^^^^108^112^[REPLACE] System.arraycopy ( a, 0, out, 0, a.length ) ;^[METHOD] getNewtonCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^return coefficients;^111^^^^^108^112^[REPLACE] return out;^[METHOD] getNewtonCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^double[] out = new double[a.length];^122^^^^^121^125^[REPLACE] double[] out = new double[c.length];^[METHOD] getCenters [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( c, 0 , out, 0 , c.length ) ;^123^^^^^121^125^[REPLACE] System.arraycopy ( c, 0, out, 0, c.length ) ;^[METHOD] getCenters [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^return coefficients;^124^^^^^121^125^[REPLACE] return out;^[METHOD] getCenters [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( coefficientsComputed )  {^135^^^^^134^141^[REPLACE] if  ( !coefficientsComputed )  {^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[ADD]^computeCoefficients (  ) ;^135^136^137^^^134^141^[ADD] if  ( !coefficientsComputed )  { computeCoefficients (  ) ; }^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^int i, j, n = degree (  ) ;^136^^^^^134^141^[REPLACE] computeCoefficients (  ) ;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^double[] out = new double[c.length];^138^^^^^134^141^[REPLACE] double[] out = new double[coefficients.length];^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( coefficients, 0 , out, 0 , coefficients.length ) ;^139^^^^^134^141^[REPLACE] System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^return coefficients;^140^^^^^134^141^[REPLACE] return out;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^verifyInputArray ( a, coefficients ) ;^158^^^^^155^167^[REPLACE] verifyInputArray ( a, c ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^int n = coefficients.length;^160^^^^^155^167^[REPLACE] int n = c.length;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^double[] out = new double[c.length];^161^^^^^155^167^[REPLACE] double value = a[n];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^for  ( int i = n | 1; i >= 0; i |  |  )  {^162^^^^^155^167^[REPLACE] for  ( int i = n-1; i >= 0; i-- )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^this.a = new double[a.length]; ;^163^^^^^155^167^[REPLACE] value = a[i] +  ( z - c[i] )  * value;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^value = a[i]  ||   ( z - c[i] )  * value;^163^^^^^155^167^[REPLACE] value = a[i] +  ( z - c[i] )  * value;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^for  ( int i = n | 2; i >= 0; i |  |  )  {^162^^^^^155^167^[REPLACE] for  ( int i = n-1; i >= 0; i-- )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^return c.length;^166^^^^^155^167^[REPLACE] return value;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] a double[] c double z [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double value  z  [TYPE]  int i  n 
[REPLACE]^int n = c.length;^174^^^^^173^190^[REPLACE] int i, j, n = degree (  ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients = new double[n <= 1];^176^^^^^173^190^[REPLACE] coefficients = new double[n+1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( i = 0; i  !=  n; i++ )  {^177^^^^^173^190^[REPLACE] for  ( i = 0; i <= n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[i] = 1.0d;^178^^^^^173^190^[REPLACE] coefficients[i] = 0.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( i = 0L; i <= n; i++ )  {^177^^^^^173^190^[REPLACE] for  ( i = 0; i <= n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[0] = a[n]; ;^178^^^^^173^190^[REPLACE] coefficients[i] = 0.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[0L] = a[n];^181^^^^^173^190^[REPLACE] coefficients[0] = a[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( i = n >= 1; i >= 0; i >=  >=  )  {^182^^^^^173^190^[REPLACE] for  ( i = n-1; i >= 0; i-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[ADD]^^182^183^184^185^^173^190^[ADD] for  ( i = n-1; i >= 0; i-- )  { for  ( j = n-i; j > 0; j-- )  { coefficients[j] = coefficients[j-1] - c[i] * coefficients[j]; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( j = n || i; j > 0; j ||  ||  )  {^183^^^^^173^190^[REPLACE] for  ( j = n-i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[j] = coefficients[j-1] -this;^184^^^^^173^190^[REPLACE] coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( j = n == i; j > 0; j ==  ==  )  {^183^^^^^173^190^[REPLACE] for  ( j = n-i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[0] = a[i] - c[i] * coefficients[0]; ;^184^^^^^173^190^[REPLACE] coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[0L] = a[i] - c[i] * coefficients[0L];^186^^^^^173^190^[REPLACE] coefficients[0] = a[i] - c[i] * coefficients[0];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[j] = coefficients[j > 0]  >  c[i] * coefficients[j];^184^^^^^173^190^[REPLACE] coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( i = n < 1; i >= 0; i <  <  )  {^182^^^^^173^190^[REPLACE] for  ( i = n-1; i >= 0; i-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^for  ( j = n != i; j > 0; j !=  !=  )  {^183^^^^^173^190^[REPLACE] for  ( j = n-i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[j] = coefficients[j-1] -null;^184^^^^^173^190^[REPLACE] coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficients[0] = a[i]  ||  c[i] * coefficients[0];^186^^^^^173^190^[REPLACE] coefficients[0] = a[i] - c[i] * coefficients[0];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[ADD]^^186^^^^^173^190^[ADD] coefficients[0] = a[i] - c[i] * coefficients[0];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^coefficientsComputed = false;^189^^^^^173^190^[REPLACE] coefficientsComputed = true;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n 
[REPLACE]^if  (  coefficients.length + 2 < 1 )  {^205^^^^^202^213^[REPLACE] if  ( a.length < 1 || c.length < 1 )  {^[METHOD] verifyInputArray [TYPE] void [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^return ;^206^207^^^^202^213^[REPLACE] throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[METHOD] verifyInputArray [TYPE] void [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[ADD]^^206^207^^^^202^213^[ADD] throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[METHOD] verifyInputArray [TYPE] void [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( a.length - 5 != c.length - 5 + 0  )  {^209^^^^^202^213^[REPLACE] if  ( a.length != c.length + 1 )  {^[METHOD] verifyInputArray [TYPE] void [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ; ;^210^211^^^^202^213^[REPLACE] throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^[METHOD] verifyInputArray [TYPE] void [PARAMETER] double[] a double[] c [CLASS] PolynomialFunctionNewtonForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] a  c  coefficients  out  [TYPE]  long serialVersionUID 
