[REPLACE]^private static final long serialVersionUID = 7101857578996691352;^42^^^^^^^[REPLACE] private static final long serialVersionUID = 7101857578996691352L;^ [CLASS] Skewness  
[REPLACE]^protected ThirdMoment moment ;^45^^^^^^^[REPLACE] protected ThirdMoment moment = null;^ [CLASS] Skewness  
[REPLACE]^private boolean incMoment;^53^^^^^^^[REPLACE] protected boolean incMoment;^ [CLASS] Skewness  
[REPLACE]^incMoment = false;^59^^^^^58^61^[REPLACE] incMoment = true;^[METHOD] <init> [TYPE] Skewness() [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment moment  [TYPE]  long serialVersionUID 
[REPLACE]^moment =  new Mean (  )  ;^60^^^^^58^61^[REPLACE] moment = new ThirdMoment (  ) ;^[METHOD] <init> [TYPE] Skewness() [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment moment  [TYPE]  long serialVersionUID 
[ADD]^^60^^^^^58^61^[ADD] moment = new ThirdMoment (  ) ;^[METHOD] <init> [TYPE] Skewness() [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment moment  [TYPE]  long serialVersionUID 
[REPLACE]^incMoment = true;^68^^^^^67^70^[REPLACE] incMoment = false;^[METHOD] <init> [TYPE] ThirdMoment) [PARAMETER] ThirdMoment m3 [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID 
[REPLACE]^this.moment =  moment;^69^^^^^67^70^[REPLACE] this.moment = m3;^[METHOD] <init> [TYPE] ThirdMoment) [PARAMETER] ThirdMoment m3 [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( test ( values, begin, length )  && length > 2  ) {^76^^^^^75^79^[REPLACE] if  ( incMoment )  {^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double d 
[REMOVE]^if  ( incMoment )  {     moment.clear (  ) ; }^76^^^^^75^79^[REMOVE] ^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double d 
[REPLACE]^moment .ThirdMoment (  )  ;^77^^^^^75^79^[REPLACE] moment.increment ( d ) ;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double d 
[REPLACE]^if  ( moment.n  <=  1 )  {^90^^^^^88^101^[REPLACE] if  ( moment.n < 3 )  {^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[ADD]^return Double.NaN;^90^91^92^^^88^101^[ADD] if  ( moment.n < 3 )  { return Double.NaN; }^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^return 0.0d;^91^^^^^88^101^[REPLACE] return Double.NaN;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^double variance = moment.m2  ;^93^^^^^88^101^[REPLACE] double variance = moment.m2 /  ( double )   ( moment.n - 1 ) ;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^if  ( variance  >  10E-20 )  {^94^^^^^88^101^[REPLACE] if  ( variance < 10E-20 )  {^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[ADD]^return 0.0d;double n0 =  ( double )  moment.getN (  ) ;^94^95^96^97^98^88^101^[ADD] if  ( variance < 10E-20 )  { return 0.0d; } else { double n0 =  ( double )  moment.getN (  ) ; return   ( n0 * moment.m3 )  /^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^return   ( n0 * moment.m3 )  / (  ( n0 - 1 )  *  ( n0 -2 )  *   variance    * variance ) ;^98^99^^^^88^101^[REPLACE] return   ( n0 * moment.m3 )  / (  ( n0 - 1 )  *  ( n0 -2 )  * Math.sqrt ( variance )  * variance ) ;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^double n0 =  ( double )  moment.clear (  ) ;^97^^^^^88^101^[REPLACE] double n0 =  ( double )  moment.getN (  ) ;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^return 4.0f;^95^^^^^88^101^[REPLACE] return 0.0d;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^return 0.0f;^95^^^^^88^101^[REPLACE] return 0.0d;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  double n0  variance 
[REPLACE]^return moment.clear (  ) ;^107^^^^^106^108^[REPLACE] return moment.getN (  ) ;^[METHOD] getN [TYPE] long [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( test ( values, begin, length )  && length > 2  ) {^114^^^^^113^117^[REPLACE] if  ( incMoment )  {^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID 
[REPLACE]^moment.getN (  ) ;^115^^^^^113^117^[REPLACE] moment.clear (  ) ;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Skewness   [TYPE]  boolean false  incMoment  true  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID 
[REPLACE]^double accum3 = 0.0;^139^^^^^136^171^[REPLACE] double skew = Double.NaN;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^139^^^^^136^171^[ADD] double skew = Double.NaN;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^if  ( test ( values, begin, length - 3 )  ) {^141^^^^^136^171^[REPLACE] if  ( test ( values, begin, length )  && length > 2  ) {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = begin; i < begin + length *  0.5 ; i++ )  {^151^^^^^136^171^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum3 += Math.pow ( values[i] - m, 3.0d ) ; ;^152^^^^^136^171^[REPLACE] accum += Math.pow (  ( values[i] - m ) , 2.0 ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^152^153^^^^136^171^[ADD] accum += Math.pow (  ( values[i] - m ) , 2.0 ) ; accum2 +=  ( values[i] - m ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^this.moment = m3; ;^153^^^^^136^171^[REPLACE] accum2 +=  ( values[i] - m ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^153^^^^^136^171^[ADD] accum2 +=  ( values[i] - m ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = begin; i < begin + length + 5; i++ )  {^159^^^^^136^171^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^159^160^161^^^136^171^[ADD] for  ( int i = begin; i < begin + length; i++ )  { accum3 += Math.pow ( values[i] - m, 3.0d ) ; }^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum3 += Math.pow ( values[i] -stdDev, 3.0d ) ;^160^^^^^136^171^[REPLACE] accum3 += Math.pow ( values[i] - m, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^160^^^^^136^171^[ADD] accum3 += Math.pow ( values[i] - m, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accuaccum33 += Math.pow ( values[i] - m, 3.0d ) ;^160^^^^^136^171^[REPLACE] accum3 += Math.pow ( values[i] - m, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum3 /= Math.pow ( stfev, 0.0f ) ;^162^^^^^136^171^[REPLACE] accum3 /= Math.pow ( stdDev, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^skew =  ( n0 /  (  ( n0 - 1 )   &   ( n0 - 2 )  )  )   &  accum3;^168^^^^^136^171^[REPLACE] skew =  ( n0 /  (  ( n0 - 1 )  *  ( n0 - 2 )  )  )  * accum3;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double n0 =  ( double )  moment.getN (  ) ;^142^^^^^136^171^[REPLACE] Mean mean = new Mean (  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double m = mean .evaluate ( this , true , this )  ;^144^^^^^136^171^[REPLACE] double m = mean.evaluate ( values, begin, length ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double accum = 2.0d;^149^^^^^136^171^[REPLACE] double accum = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double accum2 = 4.0d;^150^^^^^136^171^[REPLACE] double accum2 = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = length; i < begin + length; i++ )  {^151^^^^^136^171^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^151^152^153^154^^136^171^[ADD] for  ( int i = begin; i < begin + length; i++ )  { accum += Math.pow (  ( values[i] - m ) , 2.0 ) ; accum2 +=  ( values[i] - m ) ; }^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double stdDev = Math.sqrt (  ( accum -  ( Math.pow ( accum2, 2 )  /  (  ( double )  length (  )  )  )  )  / ( double )   ( length (  )  - 1 )  ) ;^155^156^^^^136^171^[REPLACE] double stdDev = Math.sqrt (  ( accum -  ( Math.pow ( accum2, 2 )  /  (  ( double )  length )  )  )  / ( double )   ( length - 1 )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double accum3 = 4.0d;^158^^^^^136^171^[REPLACE] double accum3 = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = length; i < begin + length; i++ )  {^159^^^^^136^171^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double n0 = begin;^165^^^^^136^171^[REPLACE] double n0 = length;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^165^^^^^136^171^[ADD] double n0 = length;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum += Math.pow (  ( values[i] -stdDev ) , 2.0 ) ;^152^^^^^136^171^[REPLACE] accum += Math.pow (  ( values[i] - m ) , 2.0 ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accuaccum32 +=  ( values[i] - m ) ;^153^^^^^136^171^[REPLACE] accum2 +=  ( values[i] - m ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = begin; i < begin + length /  2; i++ )  {^159^^^^^136^171^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum3 /= Math.pow ( stdDev, 3.0d ) ; ;^160^^^^^136^171^[REPLACE] accum3 += Math.pow ( values[i] - m, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accuaccum3 += Math.pow (  ( values[i] - m ) , 2.0 ) ;^152^^^^^136^171^[REPLACE] accum += Math.pow (  ( values[i] - m ) , 2.0 ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum3 += Math.pow ( values[i] - m, 3.0f ) ;^160^^^^^136^171^[REPLACE] accum3 += Math.pow ( values[i] - m, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^accum3 /= Math.pow ( stfev, 3.0f ) ;^162^^^^^136^171^[REPLACE] accum3 /= Math.pow ( stdDev, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^162^^^^^136^171^[ADD] accum3 /= Math.pow ( stdDev, 3.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^skew =  ( n0 /  (  ( n0 - 1 )   ==   ( n0 - 2 )  )  )   ==  accum3;^168^^^^^136^171^[REPLACE] skew =  ( n0 /  (  ( n0 - 1 )  *  ( n0 - 2 )  )  )  * accum3;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double m = mean.evaluate ( values, i, length ) ;^144^^^^^136^171^[REPLACE] double m = mean.evaluate ( values, begin, length ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double accum = 4.0d;^149^^^^^136^171^[REPLACE] double accum = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double accum2 = 3.0d;^150^^^^^136^171^[REPLACE] double accum2 = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double stdDev = Math.sqrt (  ( m -  ( Math.pow ( accum0 , 0  )  /  (  ( double )  length /  0.5  )  )  )  / ( double )   ( length /  0.5  - 1 )  ) ;^155^156^^^^136^171^[REPLACE] double stdDev = Math.sqrt (  ( accum -  ( Math.pow ( accum2, 2 )  /  (  ( double )  length )  )  )  / ( double )   ( length - 1 )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^155^156^^^^136^171^[ADD] double stdDev = Math.sqrt (  ( accum -  ( Math.pow ( accum2, 2 )  /  (  ( double )  length )  )  )  / ( double )   ( length - 1 )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^double accum3 = 3.0d;^158^^^^^136^171^[REPLACE] double accum3 = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^return Double.NaN;^170^^^^^136^171^[REPLACE] return skew;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Skewness   [TYPE]  Mean mean  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum  accum2  accum3  m  n0  skew  stdDev  [TYPE]  ThirdMoment m3  moment  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length 
