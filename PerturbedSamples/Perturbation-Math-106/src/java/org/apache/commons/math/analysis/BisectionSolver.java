[REPLACE]^private static final long serialVersionUID ;^32^^^^^^^[REPLACE] private static final long serialVersionUID = 7137520585963699578L;^ [CLASS] BisectionSolver  
[REPLACE]^super ( f, 100L, 1E-6 ) ;^40^^^^^39^41^[REPLACE] super ( f, 100, 1E-6 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] BisectionSolver   [TYPE]  long serialVersionUID  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true 
[ADD]^^40^^^^^39^41^[ADD] super ( f, 100, 1E-6 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] BisectionSolver   [TYPE]  long serialVersionUID  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true 
[REPLACE]^return solve ( initial, max ) ;^58^^^^^55^59^[REPLACE] return solve ( min, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] BisectionSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^return solve ( min, max ) ;^75^^^^^73^105^[REPLACE] clearResult (  ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^verifyInterval ( min,max ) ;^75^76^^^^73^105^[ADD] clearResult (  ) ; verifyInterval ( min,max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^verifyInterval ( m,max ) ;^76^^^^^73^105^[REPLACE] verifyInterval ( min,max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^double fm;^77^^^^^73^105^[REPLACE] double m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^double m;^78^^^^^73^105^[REPLACE] double fm;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^double fm;^79^^^^^73^105^[REPLACE] double fmin;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^int i = 0 >> 4;^81^^^^^73^105^[REPLACE] int i = 0;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^while  ( i  >  maximalIterationCount )  {^82^^^^^73^105^[REPLACE] while  ( i < maximalIterationCount )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^if  ( fm * fmin  <  0.0 )  {^87^^^^^73^105^[REPLACE] if  ( fm * fmin > 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^87^88^89^90^^73^105^[ADD] if  ( fm * fmin > 0.0 )  {  min = m; } else {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^min = m; ;^92^^^^^87^93^[REPLACE] max = m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^max = m; ;^89^^^^^73^105^[REPLACE] min = m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( max - min )   !=  absoluteAccuracy )  {^95^^^^^73^105^[REPLACE] if  ( Math.abs ( max - min )  <= absoluteAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^m =  UnivariateRealSolverUtils.midpoint ( max, max ) ;^96^^^^^73^105^[REPLACE] m = UnivariateRealSolverUtils.midpoint ( min, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^return min;^98^^^^^73^105^[REPLACE] return m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^m =  UnivariateRealSolverUtils.midpoint ( max, max ) ;^83^^^^^73^105^[REPLACE] m = UnivariateRealSolverUtils.midpoint ( min, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^fm = f.value ( m ) ; ;^84^^^^^73^105^[REPLACE] fmin = f.value ( min ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^84^85^^^^73^105^[ADD] fmin = f.value ( min ) ; fm = f.value ( m ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^fmin = f.value ( min ) ; ;^85^^^^^73^105^[REPLACE] fm = f.value ( m ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^89^^^^^73^105^[ADD] min = m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^min = m; ;^92^^^^^73^105^[REPLACE] max = m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^m =  UnivariateRealSolverUtils.midpoint ( null, max ) ;^96^^^^^73^105^[REPLACE] m = UnivariateRealSolverUtils.midpoint ( min, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^96^97^^^^73^105^[ADD] m = UnivariateRealSolverUtils.midpoint ( min, max ) ; setResult ( m, i ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^if  ( fm * fmin  < max )  {^87^^^^^73^105^[REPLACE] if  ( fm * fmin > 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^92^^^^^87^93^[ADD] max = m;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( max - min )   != min )  {^95^^^^^73^105^[REPLACE] if  ( Math.abs ( max - min )  <= absoluteAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^84^^^^^73^105^[ADD] fmin = f.value ( min ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^85^^^^^73^105^[ADD] fm = f.value ( m ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[REPLACE]^return ;^103^104^^^^73^105^[REPLACE] throw new ConvergenceException ( "Maximum number of iterations exceeded: "  + maximalIterationCount ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
[ADD]^^103^104^^^^73^105^[ADD] throw new ConvergenceException ( "Maximum number of iterations exceeded: "  + maximalIterationCount ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] BisectionSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double fm  fmin  m  max  min  [TYPE]  int i 
