[REPLACE]^private  final long serialVersionUID = -3239549463135430361L;^32^^^^^^^[REPLACE] private static final long serialVersionUID = -3239549463135430361L;^ [CLASS] GammaDistributionImpl  
[REPLACE]^private float beta;^38^^^^^^^[REPLACE] private double beta;^ [CLASS] GammaDistributionImpl  
[REPLACE]^setAlpha ( alpha ) ;^46^^^^^45^49^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] GammaDistributionImpl(double,double) [PARAMETER] double alpha double beta [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^setAlpha ( beta ) ;^47^^^^^45^49^[REPLACE] setAlpha ( alpha ) ;^[METHOD] <init> [TYPE] GammaDistributionImpl(double,double) [PARAMETER] double alpha double beta [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^super (  ) ;^48^^^^^45^49^[REPLACE] setBeta ( beta ) ;^[METHOD] <init> [TYPE] GammaDistributionImpl(double,double) [PARAMETER] double alpha double beta [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  ==  1.0d )  {^71^^^^^68^78^[REPLACE] if  ( x <= 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^71^72^73^74^75^68^78^[ADD] if  ( x <= 0.0 )  { ret = 0.0; } else { ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ; }^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x  >  getBeta (  )  ) ;^74^^^^^68^78^[REPLACE] ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0d;^72^^^^^68^78^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 0.0d;^72^^^^^68^78^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x  |  getBeta (  )  ) ;^74^^^^^68^78^[REPLACE] ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return beta;^77^^^^^68^78^[REPLACE] return ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  &&  0 + 4 )  {^95^^^^^93^102^[REPLACE] if  ( p == 0 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return alpha;^96^^^^^93^102^[REPLACE] return 0d;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  && alpha )  {^98^^^^^93^102^[REPLACE] if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^return Double.POSITIVE_INFINITY;^98^99^100^^^93^102^[ADD] if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return alpha;^99^^^^^93^102^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return super .cumulativeProbability ( ret )  ;^101^^^^^93^102^[REPLACE] return super.inverseCumulativeProbability ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  < p )  {^110^^^^^109^114^[REPLACE] if  ( alpha <= 0.0 )  {^[METHOD] setAlpha [TYPE] void [PARAMETER] double alpha [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^111^^^^^109^114^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setAlpha [TYPE] void [PARAMETER] double alpha [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^111^^^^^109^114^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] setAlpha [TYPE] void [PARAMETER] double alpha [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^this.alpha =  p;^113^^^^^109^114^[REPLACE] this.alpha = alpha;^[METHOD] setAlpha [TYPE] void [PARAMETER] double alpha [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Double.POSITIVE_INFINITY;^121^^^^^120^122^[REPLACE] return alpha;^[METHOD] getAlpha [TYPE] double [PARAMETER] [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( beta  <  0.0 )  {^130^^^^^129^134^[REPLACE] if  ( beta <= 0.0 )  {^[METHOD] setBeta [TYPE] void [PARAMETER] double beta [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^131^^^^^129^134^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setBeta [TYPE] void [PARAMETER] double beta [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^this.beta =  ret;^133^^^^^129^134^[REPLACE] this.beta = beta;^[METHOD] setBeta [TYPE] void [PARAMETER] double beta [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ret;^141^^^^^140^142^[REPLACE] return beta;^[METHOD] getBeta [TYPE] double [PARAMETER] [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return alpha;^155^^^^^153^156^[REPLACE] return Double.MIN_VALUE;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^172^^^^^167^183^[ADD] double ret;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  <=  .5 )  {^174^^^^^167^183^[REPLACE] if  ( p < .5 )  {^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret  =  ret ;^179^^^^^167^183^[REPLACE] ret = Double.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = getAlpha (  )   ;^176^^^^^167^183^[REPLACE] ret = getAlpha (  )  * getBeta (  ) ;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^176^^^^^167^183^[ADD] ret = getAlpha (  )  * getBeta (  ) ;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret ;^179^^^^^167^183^[REPLACE] ret = Double.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return beta;^182^^^^^167^183^[REPLACE] return ret;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  (alpha  <=  .5 )  {^199^^^^^193^208^[REPLACE] if  ( p < .5 )  {^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REMOVE]^if  ( p < 0.5 )  {     ret =  ( getAlpha (  )  )  *  ( getBeta (  )  ) ; }else {     ret = MAX_VALUE; }^199^^^^^193^208^[REMOVE] ^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = getAlpha (  )  * getBeta (  )  * .5; ;^204^^^^^193^208^[REPLACE] ret = getAlpha (  )  * getBeta (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = getAlpha (  )   ;^201^^^^^193^208^[REPLACE] ret = getAlpha (  )  * getBeta (  )  * .5;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^201^^^^^193^208^[ADD] ret = getAlpha (  )  * getBeta (  )  * .5;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = getAlpha (  )   ;^204^^^^^193^208^[REPLACE] ret = getAlpha (  )  * getBeta (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return beta;^207^^^^^193^208^[REPLACE] return ret;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] GammaDistributionImpl   [TYPE]  double alpha  beta  p  ret  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
