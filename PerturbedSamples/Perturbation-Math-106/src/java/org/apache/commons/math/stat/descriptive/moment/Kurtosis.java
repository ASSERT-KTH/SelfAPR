[REPLACE]^private static final long serialVersionUID  = null ;^43^^^^^^^[REPLACE] private static final long serialVersionUID = 2784465764798260919L;^ [CLASS] Kurtosis  
[REPLACE]^private FourthMoment moment;^46^^^^^^^[REPLACE] protected FourthMoment moment;^ [CLASS] Kurtosis  
[REPLACE]^private boolean incMoment;^54^^^^^^^[REPLACE] protected boolean incMoment;^ [CLASS] Kurtosis  
[REPLACE]^incMoment = false;^60^^^^^59^62^[REPLACE] incMoment = true;^[METHOD] <init> [TYPE] Kurtosis() [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^moment =  new Variance (  )  ;^61^^^^^59^62^[REPLACE] moment = new FourthMoment (  ) ;^[METHOD] <init> [TYPE] Kurtosis() [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^incMoment = true; ;^70^^^^^69^72^[REPLACE] incMoment = false;^[METHOD] <init> [TYPE] FourthMoment) [PARAMETER] FourthMoment m4 [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^this.moment =  moment;^71^^^^^69^72^[REPLACE] this.moment = m4;^[METHOD] <init> [TYPE] FourthMoment) [PARAMETER] FourthMoment m4 [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( moment.getN (  )  > 3 )  {^78^^^^^77^84^[REPLACE] if  ( incMoment )  {^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double d 
[REPLACE]^throw new IllegalStateException ( "Statistics constructed from external moments cannot be cleared" ) ; ;^81^82^^^^77^84^[REPLACE] throw new IllegalStateException ( "Statistics constructed from external moments cannot be incremented" ) ;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double d 
[ADD]^^81^82^^^^77^84^[ADD] throw new IllegalStateException ( "Statistics constructed from external moments cannot be incremented" ) ;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double d 
[REPLACE]^moment .FourthMoment (  )  ;^79^^^^^77^84^[REPLACE] moment.increment ( d ) ;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double d 
[ADD]^^79^^^^^77^84^[ADD] moment.increment ( d ) ;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double d 
[REPLACE]^double kurt = Double.NaN;^90^^^^^89^104^[REPLACE] double kurtosis = Double.NaN;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[ADD]^^90^^^^^89^104^[ADD] double kurtosis = Double.NaN;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^if  ( moment.getN (  )   !=  2 )  {^91^^^^^89^104^[REPLACE] if  ( moment.getN (  )  > 3 )  {^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^if  ( moment.n <= 3 ) {^93^^^^^89^104^[REPLACE] if  ( moment.n <= 3 || variance < 10E-20 )  {^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REMOVE]^if  (  ( moment.getN (  )  )  > 3 )  {     double variance =  ( moment.m2 )  /  (  ( double )   (  ( moment.n )  - 1 )  ) ;     if  (  (  ( moment.n )  <= 3 )  ||  ( variance < 1.0E-19 )  )  {         kurtosis = 0.0;     }else {         double n =  (  ( double )   ( moment.n )  ) ;         kurtosis =  (  (  ( n *  ( n + 1 )  )  *  ( moment.m4 )  )  -  (  (  ( 3 *  ( moment.m2 )  )  *  ( moment.m2 )  )  *  ( n - 1 )  )  )  /  (  (  (  (  ( n - 1 )  *  ( n - 2 )  )  *  ( n - 3 )  )  * variance )  * variance ) ;     } }^93^^^^^89^104^[REMOVE] ^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^kurtosis = ( n *  ( n + 1 )  * moment.m4 - 3 * moment.m2 * moment.m2 *  ( n - 1 )  )   ;^97^98^99^100^^89^104^[REPLACE] kurtosis = ( n *  ( n + 1 )  * moment.m4 - 3 * moment.m2 * moment.m2 *  ( n - 1 )  )  / (  ( n - 1 )  *  ( n -2 )  *  ( n -3 )  * variance * variance ) ;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^double mean = variance.moment.m1;^96^^^^^89^104^[REPLACE] double n =  ( double )  moment.n;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^kurtosis = 0.0d;^94^^^^^89^104^[REPLACE] kurtosis = 0.0;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[ADD]^^94^^^^^89^104^[ADD] kurtosis = 0.0;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^kurtosis = 0.0D;^94^^^^^89^104^[REPLACE] kurtosis = 0.0;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^kurtosis = ( n *  ( n + 2 )  * moment.m4 - 3 * moment.m2 * moment.m2 *  ( n - 2 )  )   ;^97^98^99^100^^89^104^[REPLACE] kurtosis = ( n *  ( n + 1 )  * moment.m4 - 3 * moment.m2 * moment.m2 *  ( n - 1 )  )  / (  ( n - 1 )  *  ( n -2 )  *  ( n -3 )  * variance * variance ) ;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^double variance = moment.m2  ;^92^^^^^89^104^[REPLACE] double variance = moment.m2 /  ( double )   ( moment.n - 1 ) ;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[ADD]^^96^^^^^89^104^[ADD] double n =  ( double )  moment.n;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^if  ( moment.n <= 3 % 4 && variance < 10E-20 )  {^93^^^^^89^104^[REPLACE] if  ( moment.n <= 3 || variance < 10E-20 )  {^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[ADD]^^93^94^95^96^97^89^104^[ADD] if  ( moment.n <= 3 || variance < 10E-20 )  { kurtosis = 0.0; } else { double n =  ( double )  moment.n; kurtosis =^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^kurtosis = 2.0d;^94^^^^^89^104^[REPLACE] kurtosis = 0.0;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^return variance;^103^^^^^89^104^[REPLACE] return kurtosis;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID  [TYPE]  double kurtosis  n  variance 
[REPLACE]^if  ( moment.getN (  )  > 3 )  {^110^^^^^109^116^[REPLACE] if  ( incMoment )  {^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[ADD]^^110^111^112^113^114^109^116^[ADD] if  ( incMoment )  { moment.clear (  ) ; } else  { throw new IllegalStateException ( "Statistics constructed from external moments cannot be cleared" ) ;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^return ;^113^114^^^^109^116^[REPLACE] throw new IllegalStateException ( "Statistics constructed from external moments cannot be cleared" ) ;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^moment.getN (  ) ;^111^^^^^109^116^[REPLACE] moment.clear (  ) ;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalStateException ( "Statistics constructed from external moments cannot be incremented" ) ; ;^113^114^^^^109^116^[REPLACE] throw new IllegalStateException ( "Statistics constructed from external moments cannot be cleared" ) ;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^return moment.clear (  ) ;^122^^^^^121^123^[REPLACE] return moment.getN (  ) ;^[METHOD] getN [TYPE] long [PARAMETER] [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  long serialVersionUID 
[REPLACE]^double kurtosis = Double.NaN;^145^^^^^143^175^[REPLACE] double kurt = Double.NaN;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^145^^^^^143^175^[ADD] double kurt = Double.NaN;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^if  ( test ( values, begin, length - 2 )  ) {^147^^^^^143^175^[REPLACE] if  ( test ( values, begin, length )  && length > 3 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^147^148^^150^151^143^175^[ADD] if  ( test ( values, begin, length )  && length > 3 )  {  Variance variance = new Variance (  ) ; variance.incrementAll ( values, begin, length ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^for  ( int i = begin; i < begin + length *  2; i++ )  {^158^^^^^143^175^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^accum3 += Math.pow (  ( values[i]  >  mean ) , 4.0D ) ;^159^^^^^143^175^[REPLACE] accum3 += Math.pow (  ( values[i] - mean ) , 4.0 ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^accum3 += Math.pow (  ( values[i] -stdDev ) , 4.0 ) ;^159^^^^^143^175^[REPLACE] accum3 += Math.pow (  ( values[i] - mean ) , 4.0 ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^accum3 /= Math.pow ( stfev, 3.0f ) ;^161^^^^^143^175^[REPLACE] accum3 /= Math.pow ( stdDev, 4.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^161^^^^^143^175^[ADD] accum3 /= Math.pow ( stdDev, 4.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^kurt =  ( coefficientOne * accum3 )  -stdDev;^172^^^^^143^175^[REPLACE] kurt =  ( coefficientOne * accum3 )  - termTwo;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double mean = variance.moment.m1;^150^^^^^143^175^[REPLACE] Variance variance = new Variance (  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double n =  ( double )  moment.n;^152^^^^^143^175^[REPLACE] double mean = variance.moment.m1;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^152^^^^^143^175^[ADD] double mean = variance.moment.m1;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double stdDev = Math.sqrt ( variance.Variance (  )  ) ;^153^^^^^143^175^[REPLACE] double stdDev = Math.sqrt ( variance.getResult (  )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^153^^^^^143^175^[ADD] double stdDev = Math.sqrt ( variance.getResult (  )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double accum3 = 4.0d;^157^^^^^143^175^[REPLACE] double accum3 = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^for  ( int i = length; i < begin + length; i++ )  {^158^^^^^143^175^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double n0 = begin;^164^^^^^143^175^[REPLACE] double n0 = length;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double coefficientOne = ( n0 *  ( n0 + 1 )  )   ;^166^167^^^^143^175^[REPLACE] double coefficientOne = ( n0 *  ( n0 + 1 )  )  /  (  ( n0 - 1 )  *  ( n0 - 2 )  *  ( n0 - 3 )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double termTwo = (  ( 0 *   n0 - 1   )   >=   (  ( n0 - 2 )  *  ( n0 - 0 )  )  ) ;^168^169^^^^143^175^[REPLACE] double termTwo = (  ( 3 * Math.pow ( n0 - 1, 2.0 )  )  /  (  ( n0 - 2 )  *  ( n0 - 3 )  )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^for  ( int i = begin; i < begin + length + 3; i++ )  {^158^^^^^143^175^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^kurtosis = 0.0; ;^159^^^^^143^175^[REPLACE] accum3 += Math.pow (  ( values[i] - mean ) , 4.0 ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^accum3 /= Math.pow ( stfev, 0.0f ) ;^161^^^^^143^175^[REPLACE] accum3 /= Math.pow ( stdDev, 4.0d ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^172^^^^^143^175^[ADD] kurt =  ( coefficientOne * accum3 )  - termTwo;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double stdDev =   variance.getResult (  )  ;^153^^^^^143^175^[REPLACE] double stdDev = Math.sqrt ( variance.getResult (  )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double accum3 = 3.0d;^157^^^^^143^175^[REPLACE] double accum3 = 0.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[ADD]^^164^^^^^143^175^[ADD] double n0 = length;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double coefficientOne = ( coefficientOne *  ( n0 + 1 )  )   ;^166^167^^^^143^175^[REPLACE] double coefficientOne = ( n0 *  ( n0 + 1 )  )  /  (  ( n0 - 1 )  *  ( n0 - 2 )  *  ( n0 - 3 )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^double termTwo = (  ( 3 * Math.pow ( n0 - 1, 2.0 )  )   |   (  ( n0 - 2 )  *  ( n0 - 3 )  )  ) ;^168^169^^^^143^175^[REPLACE] double termTwo = (  ( 3 * Math.pow ( n0 - 1, 2.0 )  )  /  (  ( n0 - 2 )  *  ( n0 - 3 )  )  ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
[REPLACE]^return termTwo;^174^^^^^143^175^[REPLACE] return kurt;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Kurtosis   [TYPE]  FourthMoment m4  moment  [TYPE]  boolean false  incMoment  true  [TYPE]  double[] values  [TYPE]  double accum3  coefficientOne  kurt  mean  n0  stdDev  termTwo  [TYPE]  long serialVersionUID  [TYPE]  int begin  i  length  [TYPE]  Variance variance 
