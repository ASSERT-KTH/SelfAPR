[REPLACE]^private static final long serialVersionUID  = null ;^34^^^^^^^[REPLACE] private static final long serialVersionUID = 6751309484392813623L;^ [CLASS] BinomialDistributionImpl  
[REPLACE]^private  long  numberOfTrials;^37^^^^^^^[REPLACE] private int numberOfTrials;^ [CLASS] BinomialDistributionImpl  
[REPLACE]^private float probabilityOfSuccess;^40^^^^^^^[REPLACE] private double probabilityOfSuccess;^ [CLASS] BinomialDistributionImpl  
[REPLACE]^setNumberOfTrials ( trials ) ;^49^^^^^48^52^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] BinomialDistributionImpl(int,double) [PARAMETER] int trials double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^setNumberOfTrials ( numberOfTrials ) ;^50^^^^^48^52^[REPLACE] setNumberOfTrials ( trials ) ;^[METHOD] <init> [TYPE] BinomialDistributionImpl(int,double) [PARAMETER] int trials double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^setProbabilityOfSuccess ( probabilityOfSuccess ) ;^51^^^^^48^52^[REPLACE] setProbabilityOfSuccess ( p ) ;^[METHOD] <init> [TYPE] BinomialDistributionImpl(int,double) [PARAMETER] int trials double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[ADD]^^51^^^^^48^52^[ADD] setProbabilityOfSuccess ( p ) ;^[METHOD] <init> [TYPE] BinomialDistributionImpl(int,double) [PARAMETER] int trials double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^return Integer.MAX_VALUE;^59^^^^^58^60^[REPLACE] return numberOfTrials;^[METHOD] getNumberOfTrials [TYPE] int [PARAMETER] [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^return Integer.MAX_VALUE;^67^^^^^66^68^[REPLACE] return probabilityOfSuccess;^[METHOD] getProbabilityOfSuccess [TYPE] double [PARAMETER] [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^if  (numberOfTrials  !=  0 % 3 )  {^77^^^^^76^81^[REPLACE] if  ( trials < 0 )  {^[METHOD] setNumberOfTrials [TYPE] void [PARAMETER] int trials [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[ADD]^^77^78^79^^^76^81^[ADD] if  ( trials < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] setNumberOfTrials [TYPE] void [PARAMETER] int trials [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^return ;^78^^^^^76^81^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setNumberOfTrials [TYPE] void [PARAMETER] int trials [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[ADD]^^78^^^^^76^81^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] setNumberOfTrials [TYPE] void [PARAMETER] int trials [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^numberOfTrials =  null;^80^^^^^76^81^[REPLACE] numberOfTrials = trials;^[METHOD] setNumberOfTrials [TYPE] void [PARAMETER] int trials [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^if  ( p < 0.0 ) {^90^^^^^89^94^[REPLACE] if  ( p < 0.0 || p > 1.0 )  {^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^return ;^91^^^^^89^94^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^probabilityOfSuccess =  null;^93^^^^^89^94^[REPLACE] probabilityOfSuccess = p;^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[ADD]^^93^^^^^89^94^[ADD] probabilityOfSuccess = p;^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^return -4;^105^^^^^104^106^[REPLACE] return -1;^[METHOD] getDomainLowerBound [TYPE] int [PARAMETER] double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^return Integer.MAX_VALUE;^117^^^^^116^118^[REPLACE] return getNumberOfTrials (  ) ;^[METHOD] getDomainUpperBound [TYPE] int [PARAMETER] double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials 
[REPLACE]^if  ( x  >=  0 )  {^129^^^^^127^141^[REPLACE] if  ( x < 0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^}  else {^131^^^^^127^141^[REPLACE] } else if  ( x >= getNumberOfTrials (  )  )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[ADD]^}^131^132^133^134^135^127^141^[ADD] else if  ( x >= getNumberOfTrials (  )  )  { ret = 1.0; } else { ret = 1.0 - Beta.regularizedBeta (^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 1.0  ^  Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^134^135^136^137^^127^141^[REPLACE] ret = 1.0 - Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 1.0D;^132^^^^^127^141^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 1.0  >=  Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^134^135^136^137^^127^141^[REPLACE] ret = 1.0 - Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[ADD]^^134^135^136^^^127^141^[ADD] ret = 1.0 - Beta.regularizedBeta ( getProbabilityOfSuccess (  ) ,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 1.0d;^130^^^^^127^141^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^}  if  ( x  ==  getNumberOfTrials (  )  )  {^131^^^^^127^141^[REPLACE] } else if  ( x >= getNumberOfTrials (  )  )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 1.0  ==  Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^134^135^136^137^^127^141^[REPLACE] ret = 1.0 - Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 4.0d;^132^^^^^127^141^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[ADD]^^132^^^^^127^141^[ADD] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 3.0d;^130^^^^^127^141^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 3.0d;^132^^^^^127^141^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 1.0  <=  Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^134^135^136^137^^127^141^[REPLACE] ret = 1.0 - Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , x + 1.0,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^return probabilityOfSuccess;^140^^^^^127^141^[REPLACE] return ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^if  ( x < 3 && x > getNumberOfTrials (  )  )  {^151^^^^^149^161^[REPLACE] if  ( x < 0 || x > getNumberOfTrials (  )  )  {^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = MathUtils.binomialCoefficientDouble ( getNumberOfTrials (  ) , x )   <=  Math.pow ( getProbabilityOfSuccess (  ) , x )   <=  Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^154^155^156^157^^149^161^[REPLACE] ret = MathUtils.binomialCoefficientDouble ( getNumberOfTrials (  ) , x )  * Math.pow ( getProbabilityOfSuccess (  ) , x )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 0.0D;^152^^^^^149^161^[REPLACE] ret = 0.0;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^ret = 3.0d;^152^^^^^149^161^[REPLACE] ret = 0.0;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[ADD]^^154^155^156^^^149^161^[ADD] ret = MathUtils.binomialCoefficientDouble ( getNumberOfTrials (  ) , x )  * Math.pow ( getProbabilityOfSuccess (  ) , x )  *^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^return probabilityOfSuccess;^160^^^^^149^161^[REPLACE] return ret;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^if  (probabilityOfSuccess  &&  0 << 3 )  {^178^^^^^176^187^[REPLACE] if  ( p == 0 )  {^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[ADD]^return -1;^178^179^180^^^176^187^[ADD] if  ( p == 0 )  { return -1; }^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^return -4;^179^^^^^176^187^[REPLACE] return -1;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^if  ( p  &&  1 )  {^181^^^^^176^187^[REPLACE] if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^return super.inverseCumulativeProbability ( p ) ;^182^^^^^176^187^[REPLACE] return Integer.MAX_VALUE;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
[REPLACE]^return super .cumulativeProbability ( x )  ;^186^^^^^176^187^[REPLACE] return super.inverseCumulativeProbability ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] BinomialDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfTrials  trials  x 
