[REPLACE]^private static final  short  serialVersionUID = 3322454535052136809L;^31^^^^^^^[REPLACE] private static final long serialVersionUID = 3322454535052136809L;^ [CLASS] PolynomialFunction  
[REPLACE]^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^54^^^^^53^60^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] PolynomialFunction(double[]) [PARAMETER] double[] c [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( c.length + 2 < 1 )  {^55^^^^^53^60^[REPLACE] if  ( c.length < 1 )  {^[METHOD] <init> [TYPE] PolynomialFunction(double[]) [PARAMETER] double[] c [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^56^^^^^53^60^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] PolynomialFunction(double[]) [PARAMETER] double[] c [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^56^^^^^53^60^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] PolynomialFunction(double[]) [PARAMETER] double[] c [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^this.coefficients =  new double[coefficients.length];^58^^^^^53^60^[REPLACE] this.coefficients = new double[c.length];^[METHOD] <init> [TYPE] PolynomialFunction(double[]) [PARAMETER] double[] c [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^System.arraycopy ( c, 0 , this.coefficients, 0 , c.length ) ;^59^^^^^53^60^[REPLACE] System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[METHOD] <init> [TYPE] PolynomialFunction(double[]) [PARAMETER] double[] c [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return new double[]{0};^73^^^^^72^74^[REPLACE] return evaluate ( coefficients, x ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  double x 
[REPLACE]^return coefficients.length /  2 - 1;^83^^^^^82^84^[REPLACE] return coefficients.length - 1;^[METHOD] degree [TYPE] int [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^double[] result = new double[n - 1];^95^^^^^94^98^[REPLACE] double[] out = new double[coefficients.length];^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^95^^^^^94^98^[ADD] double[] out = new double[coefficients.length];^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^System.arraycopy ( coefficients,0 , out, 0 , coefficients.length ) ;^96^^^^^94^98^[REPLACE] System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^96^^^^^94^98^[ADD] System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return coefficients;^97^^^^^94^98^[REPLACE] return out;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^int n = out.length;^111^^^^^110^120^[REPLACE] int n = coefficients.length;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^if  ( n  >=  4 )  {^112^^^^^110^120^[REPLACE] if  ( n < 1 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^return ;^113^^^^^110^120^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^double result = out[n  >=  1];^115^^^^^110^120^[REPLACE] double result = coefficients[n - 1];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^for  ( int j = n  != 2; j >=0; j !=  !=  )  {^116^^^^^110^120^[REPLACE] for  ( int j = n -2; j >=0; j-- )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^result = argument * result +result;^117^^^^^110^120^[REPLACE] result = argument * result + coefficients[j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[ADD]^^117^^^^^110^120^[ADD] result = argument * result + coefficients[j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^result = argument * result  >  coefficients[j];^117^^^^^110^120^[REPLACE] result = argument * result + coefficients[j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[ADD]^^116^117^118^^^110^120^[ADD] for  ( int j = n -2; j >=0; j-- )  { result = argument * result + coefficients[j]; }^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^return argument;^119^^^^^110^120^[REPLACE] return result;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] coefficients double argument [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  [TYPE]  long serialVersionUID  [TYPE]  double argument  result  [TYPE]  int j  n 
[REPLACE]^int n = result.length;^131^^^^^130^143^[REPLACE] int n = coefficients.length;^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^if  ( n  ==  2 )  {^132^^^^^130^143^[REPLACE] if  ( n < 1 )  {^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^132^133^134^^^130^143^[ADD] if  ( n < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return ;^133^^^^^130^143^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^if  ( n  !=  1 )  {^135^^^^^130^143^[REPLACE] if  ( n == 1 )  {^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return new double[]{3};^136^^^^^130^143^[REPLACE] return new double[]{0};^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return new double[]{0 * 2};^136^^^^^130^143^[REPLACE] return new double[]{0};^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^double[] result = new double[n  &  1];^138^^^^^130^143^[REPLACE] double[] result = new double[n - 1];^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = n  |  0; i  > 0; i |  |  )  {^139^^^^^130^143^[REPLACE] for  ( int i = n - 1; i  > 0; i-- )  {^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^result[i  <=  1] =  ( double )  i * coefficients[i];^140^^^^^130^143^[REPLACE] result[i - 1] =  ( double )  i * coefficients[i];^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[ADD]^^140^^^^^130^143^[ADD] result[i - 1] =  ( double )  i * coefficients[i];^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^result[i  ||  1L] =  ( double )  i * coefficients[i];^140^^^^^130^143^[REPLACE] result[i - 1] =  ( double )  i * coefficients[i];^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^for  ( int i = n  ||  1; i  > 0; i ||  ||  )  {^139^^^^^130^143^[REPLACE] for  ( int i = n - 1; i  > 0; i-- )  {^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return out;^142^^^^^130^143^[REPLACE] return result;^[METHOD] differentiate [TYPE] double[] [PARAMETER] double[] coefficients [CLASS] PolynomialFunction   [TYPE]  boolean false  true  [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  int i  n 
[REPLACE]^return evaluate ( coefficients, x ) ;^151^^^^^150^152^[REPLACE] return new PolynomialFunction ( differentiate ( coefficients )  ) ;^[METHOD] polynomialDerivative [TYPE] PolynomialFunction [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return new double[]{0};^160^^^^^159^161^[REPLACE] return polynomialDerivative (  ) ;^[METHOD] derivative [TYPE] UnivariateRealFunction [PARAMETER] [CLASS] PolynomialFunction   [TYPE]  double[] c  coefficients  out  result  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
