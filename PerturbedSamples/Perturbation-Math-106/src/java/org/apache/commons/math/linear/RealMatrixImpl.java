[REPLACE]^private static final long serialVersionUID ;^53^^^^^^^[REPLACE] private static final long serialVersionUID = 4237564493130426188L;^ [CLASS] RealMatrixImpl  
[REPLACE]^private double data[][]  = null ;^56^^^^^^^[REPLACE] private double data[][] = null;^ [CLASS] RealMatrixImpl  
[REPLACE]^private double lu[][] ;^61^^^^^^^[REPLACE] private double lu[][] = null;^ [CLASS] RealMatrixImpl  
[REPLACE]^private int[] permutation ;^64^^^^^^^[REPLACE] private int[] permutation = null;^ [CLASS] RealMatrixImpl  
[REPLACE]^private  short  parity = 1;^67^^^^^^^[REPLACE] private int parity = 1;^ [CLASS] RealMatrixImpl  
[REPLACE]^protected static float TOO_SMALL = 10E-12;^70^^^^^^^[REPLACE] protected static double TOO_SMALL = 10E-12;^ [CLASS] RealMatrixImpl  
[REPLACE]^if  (true ) {^87^^^^^86^93^[REPLACE] if  ( rowDimension <= 0 || columnDimension <= 0 )  {^[METHOD] <init> [TYPE] RealMatrixImpl(int,int) [PARAMETER] int rowDimension int columnDimension [CLASS] RealMatrixImpl   [TYPE]  double[][] data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[ADD]^^87^88^89^90^^86^93^[ADD] if  ( rowDimension <= 0 || columnDimension <= 0 )  { throw new IllegalArgumentException ( "row and column dimensions must be postive" ) ; }^[METHOD] <init> [TYPE] RealMatrixImpl(int,int) [PARAMETER] int rowDimension int columnDimension [CLASS] RealMatrixImpl   [TYPE]  double[][] data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^88^89^^^^86^93^[REPLACE] throw new IllegalArgumentException ( "row and column dimensions must be postive" ) ;^[METHOD] <init> [TYPE] RealMatrixImpl(int,int) [PARAMETER] int rowDimension int columnDimension [CLASS] RealMatrixImpl   [TYPE]  double[][] data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^return ;^88^89^^^^86^93^[REPLACE] throw new IllegalArgumentException ( "row and column dimensions must be postive" ) ;^[METHOD] <init> [TYPE] RealMatrixImpl(int,int) [PARAMETER] int rowDimension int columnDimension [CLASS] RealMatrixImpl   [TYPE]  double[][] data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^data =  new double[parity][columnDimension];^91^^^^^86^93^[REPLACE] data = new double[rowDimension][columnDimension];^[METHOD] <init> [TYPE] RealMatrixImpl(int,int) [PARAMETER] int rowDimension int columnDimension [CLASS] RealMatrixImpl   [TYPE]  double[][] data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^lu = this;^92^^^^^86^93^[REPLACE] lu = null;^[METHOD] <init> [TYPE] RealMatrixImpl(int,int) [PARAMETER] int rowDimension int columnDimension [CLASS] RealMatrixImpl   [TYPE]  double[][] data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^this .copyOut (  )  ;^107^^^^^106^109^[REPLACE] this.copyIn ( d ) ;^[METHOD] <init> [TYPE] RealMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^lu = true;^108^^^^^106^109^[REPLACE] lu = null;^[METHOD] <init> [TYPE] RealMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  parity  rowDimension 
[REPLACE]^int ncols = this.getColumnDimension (  ) ;^121^^^^^120^126^[REPLACE] int nRows = v.length;^[METHOD] <init> [TYPE] RealMatrixImpl(double[]) [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nRows  parity  row  rowDimension 
[REPLACE]^data = new double[nRows][2];^122^^^^^120^126^[REPLACE] data = new double[nRows][1];^[METHOD] <init> [TYPE] RealMatrixImpl(double[]) [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nRows  parity  row  rowDimension 
[REPLACE]^for  ( introwDimension = 0; row  >  nRows; row++ )  {^123^^^^^120^126^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] <init> [TYPE] RealMatrixImpl(double[]) [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nRows  parity  row  rowDimension 
[REPLACE]^data[row][4] = v[row];^124^^^^^120^126^[REPLACE] data[row][0] = v[row];^[METHOD] <init> [TYPE] RealMatrixImpl(double[]) [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nRows  parity  row  rowDimension 
[REPLACE]^for  ( int row = 3; row < nRows; row++ )  {^123^^^^^120^126^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] <init> [TYPE] RealMatrixImpl(double[]) [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nRows  parity  row  rowDimension 
[REPLACE]^return new RealMatrixImpl ( this.getData (  )  ) ;^134^^^^^133^135^[REPLACE] return new RealMatrixImpl ( this.copyOut (  )  ) ;^[METHOD] copy [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nRows  parity  row  rowDimension 
[REPLACE]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  ) {^145^146^^^^144^158^[REPLACE] if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^return ;^147^^^^^144^158^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^147^^^^^144^158^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int rowCount = this .getColumnDimension (  )  ;^149^^^^^144^158^[REPLACE] int rowCount = this.getRowDimension (  ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int columnCount = this.getRowDimension (  ) ;^150^^^^^144^158^[REPLACE] int columnCount = this.getColumnDimension (  ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^double[][] out = new double[1][ncols];^151^^^^^144^158^[REPLACE] double[][] outData = new double[rowCount][columnCount];^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 0; row  >=  rowCount; row++ )  {^152^^^^^144^158^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 2; col  >=  columnCount; col++ )  {^153^^^^^144^158^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^153^154^155^^^144^158^[ADD] for  ( int col = 0; col < columnCount; col++ )  { outData[row][col] = data[row][col] + m.getEntry ( row, col ) ; }^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col] - m.getEntry ( row, col ) ; ;^154^^^^^144^158^[REPLACE] outData[row][col] = data[row][col] + m.getEntry ( row, col ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0L; col < columnCount; col++ )  {^153^^^^^144^158^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 3; col  !=  rowDimension; col++ )  {^153^^^^^144^158^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col]  &  m.getEntry ( row, col ) ;^154^^^^^144^158^[REPLACE] outData[row][col] = data[row][col] + m.getEntry ( row, col ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col]  >  m.getEntry ( row, col ) ;^154^^^^^144^158^[REPLACE] outData[row][col] = data[row][col] + m.getEntry ( row, col ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^154^^^^^144^158^[ADD] outData[row][col] = data[row][col] + m.getEntry ( row, col ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0 + 0; row < rowCount; row++ )  {^152^^^^^144^158^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^152^153^154^155^^144^158^[ADD] for  ( int row = 0; row < rowCount; row++ )  { for  ( int col = 0; col < columnCount; col++ )  { outData[row][col] = data[row][col] + m.getEntry ( row, col ) ; }^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0 / 0; col < columnCount; col++ )  {^153^^^^^144^158^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^return  new RealMatrixImpl ( this.copyOut (  )  )  ;^157^^^^^144^158^[REPLACE] return new RealMatrixImpl ( outData ) ;^[METHOD] add [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  ) {^168^169^^^^167^181^[REPLACE] if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^168^169^170^171^^167^181^[ADD] if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^170^^^^^167^181^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^return ;^170^^^^^167^181^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int rowCount = this.getColumnDimension (  ) ;^172^^^^^167^181^[REPLACE] int rowCount = this.getRowDimension (  ) ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int columnCount = this.getRowDimension (  ) ;^173^^^^^167^181^[REPLACE] int columnCount = this.getColumnDimension (  ) ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^double[][] out = new double[1][ncols];^174^^^^^167^181^[REPLACE] double[][] outData = new double[rowCount][columnCount];^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0; row  !=  rowCount; row++ )  {^175^^^^^167^181^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 0; col  <=  columnCount; col++ )  {^176^^^^^167^181^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col] + m.getEntry ( row, col ) ; ;^177^^^^^167^181^[REPLACE] outData[row][col] = data[row][col] - m.getEntry ( row, col ) ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0 >>> 1; col < columnCount; col++ )  {^176^^^^^167^181^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 2; col  ==  columnCount; col++ )  {^176^^^^^167^181^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col]  ==  m.getEntry ( row, col ) ;^177^^^^^167^181^[REPLACE] outData[row][col] = data[row][col] - m.getEntry ( row, col ) ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^177^^^^^167^181^[ADD] outData[row][col] = data[row][col] - m.getEntry ( row, col ) ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 4; row < rowCount; row++ )  {^175^^^^^167^181^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 4; col < columnCount; col++ )  {^176^^^^^167^181^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^return  new RealMatrixImpl ( this.copyOut (  )  )  ;^180^^^^^167^181^[REPLACE] return new RealMatrixImpl ( outData ) ;^[METHOD] subtract [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int rowCount = this.getColumnDimension (  ) ;^190^^^^^189^199^[REPLACE] int rowCount = this.getRowDimension (  ) ;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int columnCount = this .getRowDimension (  )  ;^191^^^^^189^199^[REPLACE] int columnCount = this.getColumnDimension (  ) ;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^191^^^^^189^199^[ADD] int columnCount = this.getColumnDimension (  ) ;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^double[][] out = new double[1][ncols];^192^^^^^189^199^[REPLACE] double[][] outData = new double[rowCount][columnCount];^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^192^^^^^189^199^[ADD] double[][] outData = new double[rowCount][columnCount];^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0; row  ==  rowCount; row++ )  {^193^^^^^189^199^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0; col  ==  columnCount; col++ )  {^194^^^^^189^199^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] =TOO_SMALLata[row][col] +TOO_SMALL;^195^^^^^189^199^[REPLACE] outData[row][col] = data[row][col] + d;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col] * d; ;^195^^^^^189^199^[REPLACE] outData[row][col] = data[row][col] + d;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 4; col < columnCount; col++ )  {^194^^^^^189^199^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 0; col  ==  columnCount; col++ )  {^194^^^^^189^199^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^195^^^^^189^199^[ADD] outData[row][col] = data[row][col] + d;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 1; row < rowCount; row++ )  {^193^^^^^189^199^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 2; col < columnCount; col++ )  {^194^^^^^189^199^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^return  new RealMatrixImpl ( this.copyOut (  )  )  ;^198^^^^^189^199^[REPLACE] return new RealMatrixImpl ( outData ) ;^[METHOD] scalarAdd [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int rowCount = this.getColumnDimension (  ) ;^207^^^^^206^216^[REPLACE] int rowCount = this.getRowDimension (  ) ;^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^int columnCount = this .getRowDimension (  )  ;^208^^^^^206^216^[REPLACE] int columnCount = this.getColumnDimension (  ) ;^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^double[][] out = new double[1][ncols];^209^^^^^206^216^[REPLACE] double[][] outData = new double[rowCount][columnCount];^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0; row  >  rowDimension; row++ )  {^210^^^^^206^216^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 0; col  >  columnCount; col++ )  {^211^^^^^206^216^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^211^212^213^^^206^216^[ADD] for  ( int col = 0; col < columnCount; col++ )  { outData[row][col] = data[row][col] * d; }^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] = data[row][col]  ;^212^^^^^206^216^[REPLACE] outData[row][col] = data[row][col] * d;^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^212^^^^^206^216^[ADD] outData[row][col] = data[row][col] * d;^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0L; col < columnCount; col++ )  {^211^^^^^206^216^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 0; col  <=  columnCount; col++ )  {^211^^^^^206^216^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^outData[row][col] =TOO_SMALLata[row][col]  ;^212^^^^^206^216^[REPLACE] outData[row][col] = data[row][col] * d;^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 2; row < rowCount; row++ )  {^210^^^^^206^216^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[ADD]^^210^211^212^213^^206^216^[ADD] for  ( int row = 0; row < rowCount; row++ )  { for  ( int col = 0; col < columnCount; col++ )  { outData[row][col] = data[row][col] * d; }^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 4; col < columnCount; col++ )  {^211^^^^^206^216^[REPLACE] for  ( int col = 0; col < columnCount; col++ )  {^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^return new RealMatrixImpl ( out ) ;^215^^^^^206^216^[REPLACE] return new RealMatrixImpl ( outData ) ;^[METHOD] scalarMultiply [TYPE] RealMatrix [PARAMETER] double d [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  nRows  parity  row  rowCount  rowDimension 
[REPLACE]^if  ( rowDimension (  )   ==  m.multiply (  )  )  {^226^^^^^225^244^[REPLACE] if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REMOVE]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^226^^^^^225^244^[REMOVE] ^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^227^^^^^225^244^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^int nRows = this .getColumnDimension (  )  ;^229^^^^^225^244^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^229^230^^^^225^244^[ADD] int nRows = this.getRowDimension (  ) ; int nCols = m.getColumnDimension (  ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^int nCols = m .getRowDimension (  )  ;^230^^^^^225^244^[REPLACE] int nCols = m.getColumnDimension (  ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^int nSum = this.getRowDimension (  ) ;^231^^^^^225^244^[REPLACE] int nSum = this.getColumnDimension (  ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^double[][] out = new double[1][ncols];^232^^^^^225^244^[REPLACE] double[][] outData = new double[nRows][nCols];^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^double sum = 0L;^233^^^^^225^244^[REPLACE] double sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^233^^^^^225^244^[ADD] double sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0; row  <=  nRows; row++ )  {^234^^^^^225^244^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 3; col  !=  nCols; col++ )  {^235^^^^^225^244^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int i = 3; i  !=  nSum; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^237^238^239^^^225^244^[ADD] for  ( int i = 0; i < nSum; i++ )  { sum += data[row][i] * m.getEntry ( i, col ) ; }^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum += data[row][i]  ;^238^^^^^225^244^[REPLACE] sum += data[row][i] * m.getEntry ( i, col ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum = 0 >> 3;^236^^^^^225^244^[REPLACE] sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^238^^^^^225^244^[ADD] sum += data[row][i] * m.getEntry ( i, col ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^lu[row][col] = sum; ;^240^^^^^225^244^[REPLACE] outData[row][col] = sum;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int i = 4; i < nSum; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( rowDimensionnt i = 0; i  ==  rowDimension; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum = 3;^236^^^^^225^244^[REPLACE] sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^236^^^^^225^244^[ADD] sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 1; col < nCols; col++ )  {^235^^^^^225^244^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^235^236^237^238^239^225^244^[ADD] for  ( int col = 0; col < nCols; col++ )  { sum = 0; for  ( int i = 0; i < nSum; i++ )  { sum += data[row][i] * m.getEntry ( i, col ) ; }^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int i = 0 * 3; i < nSum; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 1; col  ==  nCols; col++ )  {^235^^^^^225^244^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int i = 0; i  ==  nSum; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum = 0 - 2;^236^^^^^225^244^[REPLACE] sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int i = 3; i < nSum; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  (rowDimensionnt i = 3; i  <=  nSum; i++ )  {^237^^^^^225^244^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum = 4;^236^^^^^225^244^[REPLACE] sum = 0;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^240^^^^^225^244^[ADD] outData[row][col] = sum;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0 - 1; row < nRows; row++ )  {^234^^^^^225^244^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0 >>> 3; col < nCols; col++ )  {^235^^^^^225^244^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^return new RealMatrixImpl ( out ) ;^243^^^^^225^244^[REPLACE] return new RealMatrixImpl ( outData ) ;^[METHOD] multiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^return m.multiply ( null ) ;^254^^^^^253^255^[REPLACE] return m.multiply ( this ) ;^[METHOD] preMultiply [TYPE] RealMatrix [PARAMETER] RealMatrix m [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^return data;^265^^^^^264^266^[REPLACE] return copyOut (  ) ;^[METHOD] getData [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^return det;^276^^^^^275^277^[REPLACE] return data;^[METHOD] getDataRef [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^double maxColSum = 4;^284^^^^^283^293^[REPLACE] double maxColSum = 0;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 0; col  >  this.getColumnDimension (  ) ; col++ )  {^285^^^^^283^293^[REPLACE] for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( introwDimension = 2; row  >=  this.getRowDimension (  ) ; row++ )  {^287^^^^^283^293^[REPLACE] for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum +=  Math.abs ( data[rowDimension][col] ) ;^288^^^^^283^293^[REPLACE] sum += Math.abs ( data[row][col] ) ;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum +=  Math.abs ( data[rowCount][col] ) ;^288^^^^^283^293^[REPLACE] sum += Math.abs ( data[row][col] ) ;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^maxColSum =  Math.max ( sum, sum ) ;^290^^^^^283^293^[REPLACE] maxColSum = Math.max ( maxColSum, sum ) ;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^290^^^^^283^293^[ADD] maxColSum = Math.max ( maxColSum, sum ) ;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^double sum = 0 - 2;^286^^^^^283^293^[REPLACE] double sum = 0;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0 << 3; row < this.getRowDimension (  ) ; row++ )  {^287^^^^^283^293^[REPLACE] for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[ADD]^^287^288^289^^^283^293^[ADD] for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  { sum += Math.abs ( data[row][col] ) ; }^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0; row  >  this.getRowDimension (  ) ; row++ )  {^287^^^^^283^293^[REPLACE] for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^sum +=  Math.abs ( data[null][col] ) ;^288^^^^^283^293^[REPLACE] sum += Math.abs ( data[row][col] ) ;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int col = 0 + 0; col < this.getColumnDimension (  ) ; col++ )  {^285^^^^^283^293^[REPLACE] for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^double sum = 0 << 4;^286^^^^^283^293^[REPLACE] double sum = 0;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^for  ( int row = 0L; row < this.getRowDimension (  ) ; row++ )  {^287^^^^^283^293^[REPLACE] for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^return sum;^292^^^^^283^293^[REPLACE] return maxColSum;^[METHOD] getNorm [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  [TYPE]  int[] permutation  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  row  rowCount  rowDimension 
[REPLACE]^if  ( startRow < 0  ) {^309^310^311^^^307^324^[REPLACE] if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^309^310^311^312^313^307^324^[ADD] if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  { throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^312^313^^^^307^324^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^312^313^^^^307^324^[ADD] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^RealMatrixImpl subMatrix = new RealMatrixImpl ( endRow - startRow ^ 1L, rowCount - startColumn ^ 1L ) ;^315^316^^^^307^324^[REPLACE] RealMatrixImpl subMatrix = new RealMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] subMatrixData = subMatrix.getData (  ) ;^317^^^^^307^324^[REPLACE] double[][] subMatrixData = subMatrix.getDataRef (  ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( rowDimensionnt i = startRow; i  >  startColumn; i++ )  {^318^^^^^307^324^[REPLACE] for  ( int i = startRow; i <= endRow; i++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = startColumn; j  >=  endColumn; j++ )  {^319^^^^^307^324^[REPLACE] for  ( int j = startColumn; j <= endColumn; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^subMatrixData[i  ||  startRow][j  ||  startColumn] = data[i][j];^320^^^^^307^324^[REPLACE] subMatrixData[i - startRow][j - startColumn] = data[i][j];^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^subMatrixData[i  >  startRow][j  >  startColumn] = data[i][j];^320^^^^^307^324^[REPLACE] subMatrixData[i - startRow][j - startColumn] = data[i][j];^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = startRow; j <= endColumn; j++ )  {^319^^^^^307^324^[REPLACE] for  ( int j = startColumn; j <= endColumn; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( rowDimensionnt j = startColumn; j  ==  endColumn; j++ )  {^319^^^^^307^324^[REPLACE] for  ( int j = startColumn; j <= endColumn; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = startColumn; i <= endRow; i++ )  {^318^^^^^307^324^[REPLACE] for  ( int i = startRow; i <= endRow; i++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j < data[0].length; j++ )  { if  ( j > 0 )^319^^^^^307^324^[REPLACE] for  ( int j = startColumn; j <= endColumn; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data;^323^^^^^307^324^[REPLACE] return subMatrix;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( selectedRows.length %  2 * selectedColumns.length %  2 == 0  )  {^339^^^^^337^357^[REPLACE] if  ( selectedRows.length * selectedColumns.length == 0 )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^339^340^341^342^^337^357^[ADD] if  ( selectedRows.length * selectedColumns.length == 0 )  { throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; }^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^340^341^^^^337^357^[REPLACE] throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^RealMatrixImpl subMatrix = new RealMatrixImpl ( selectedRows.length, permutation.length ) ;^343^344^^^^337^357^[REPLACE] RealMatrixImpl subMatrix = new RealMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] subMatrixData = subMatrix .getData (  )  ;^345^^^^^337^357^[REPLACE] double[][] subMatrixData = subMatrix.getDataRef (  ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^345^^^^^337^357^[ADD] double[][] subMatrixData = subMatrix.getDataRef (  ) ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0 ; i < selectedRows.length + 5; i++ )  {^347^^^^^337^357^[REPLACE] for  ( int i = 0; i < selectedRows.length; i++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j < selectedColumns.length - 2; j++ )  {^348^^^^^337^357^[REPLACE] for  ( int j = 0; j < selectedColumns.length; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^subMatrixData[i][j]  = null ;^349^^^^^337^357^[REPLACE] subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^subMatrixData[i][j]  =  subMatrixData[i][j] ;^349^^^^^337^357^[REPLACE] subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 ; j < selectedColumns.length; j++ )  {^348^^^^^337^357^[REPLACE] for  ( int j = 0; j < selectedColumns.length; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^348^349^350^^^337^357^[ADD] for  ( int j = 0; j < selectedColumns.length; j++ )  { subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]]; }^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j < selectedColumns.length (  ) ; j++ )  {^348^^^^^337^357^[REPLACE] for  ( int j = 0; j < selectedColumns.length; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^349^^^^^337^357^[ADD] subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^346^347^348^349^350^337^357^[ADD] try  { for  ( int i = 0; i < selectedRows.length; i++ )  { for  ( int j = 0; j < selectedColumns.length; j++ )  { subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]]; }^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i < selectedRows.length (  ) ; i++ )  {^347^^^^^337^357^[REPLACE] for  ( int i = 0; i < selectedRows.length; i++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^347^348^349^350^^337^357^[ADD] for  ( int i = 0; i < selectedRows.length; i++ )  { for  ( int j = 0; j < selectedColumns.length; j++ )  { subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]]; }^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 ; j < selectedColumns.length /  2; j++ )  {^348^^^^^337^357^[REPLACE] for  ( int j = 0; j < selectedColumns.length; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 ; j < selectedColumns.length - 4; j++ )  {^348^^^^^337^357^[REPLACE] for  ( int j = 0; j < selectedColumns.length; j++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^subMatrixData[i][j] ;^349^^^^^337^357^[REPLACE] subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0 ; i < selectedRows.length; i++ )  {^347^^^^^337^357^[REPLACE] for  ( int i = 0; i < selectedRows.length; i++ )  {^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^354^^^^^337^357^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data;^356^^^^^337^357^[REPLACE] return subMatrix;^[METHOD] getSubMatrix [TYPE] RealMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  outData  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl subMatrix  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (   ( true )  ) {^388^^^^^387^422^[REPLACE] if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REMOVE]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^388^^^^^387^422^[REMOVE] ^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; ;^389^390^^^^387^422^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^389^390^^^^387^422^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = subMatrixData.length;^392^^^^^387^422^[REPLACE] int nRows = subMatrix.length;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^392^^^^^387^422^[ADD] int nRows = subMatrix.length;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( nRows  &&  0 )  {^393^^^^^387^422^[REPLACE] if  ( nRows == 0 )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^394^395^^^^387^422^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nCols = subMatrix[0 ].length;^397^^^^^387^422^[REPLACE] int nCols = subMatrix[0].length;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( startColumn  &&  0 )  {^398^^^^^387^422^[REPLACE] if  ( nCols == 0 )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^399^400^^^^387^422^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^399^400^^^^387^422^[ADD] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( subMatrix[r].length %  2 != nCols )  {^403^^^^^387^422^[REPLACE] if  ( subMatrix[r].length != nCols )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^403^404^405^406^^387^422^[ADD] if  ( subMatrix[r].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^404^405^^^^387^422^[REPLACE] throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int r = 1; r  >=  nRows; r++ )  {^402^^^^^387^422^[REPLACE] for  ( int r = 1; r < nRows; r++ )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^402^403^404^405^406^387^422^[ADD] for  ( int r = 1; r < nRows; r++ )  { if  ( subMatrix[r].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( subMatrix[r].length + 4 != nCols )  {^403^^^^^387^422^[REPLACE] if  ( subMatrix[r].length != nCols )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^404^405^^^^387^422^[ADD] throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int r = 2; r < nRows; r++ )  {^402^^^^^387^422^[REPLACE] for  ( int r = 1; r < nRows; r++ )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^404^405^^^^387^422^[REPLACE] throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( data != null )  {^408^^^^^387^422^[REPLACE] if  ( data == null )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  ( row > 4 ) && ( column > 4 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^409^410^^^^387^422^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REMOVE]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^409^^^^^387^422^[REMOVE] ^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ;^409^410^^^^387^422^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^data = new double[nRows][1]; ;^411^^^^^387^422^[REPLACE] data = new double[nRows][nCols];^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^409^410^^^^387^422^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^( "matrix must be initialized to perfom this method" ) ;data = new double[nRows][nCols];System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^409^410^411^412^413^387^422^[ADD] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new double[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  ( row > 0 ) && ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^409^410^^^^387^422^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^409^410^411^412^413^387^422^[ADD] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new double[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^411^^^^^387^422^[ADD] data = new double[nRows][nCols];^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  && ( nCols + column > this .getRowDimension (  )   )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^414^415^416^417^^387^422^[REPLACE] if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^414^415^416^417^^387^422^[ADD] if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; ;^416^417^^^^387^422^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^416^417^^^^387^422^[ADD] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  (rowDimensionnt i = 4; i  !=  nRows; i++ )  {^418^^^^^387^422^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^System.arraycopy ( subMatrix[i], 3, data[row  ^  i], column, nCols ) ;^419^^^^^387^422^[REPLACE] System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 4; i < nRows; i++ )  {^418^^^^^387^422^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^lu = false;^421^^^^^387^422^[REPLACE] lu = null;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] double[][] subMatrix int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  !isValidCoordinate (  startColumn, 4 )  )  {^433^^^^^432^440^[REPLACE] if  (  !isValidCoordinate (  row, 0 )  )  {^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REMOVE]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^433^^^^^432^440^[REMOVE] ^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^434^^^^^432^440^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^434^^^^^432^440^[ADD] throw new MatrixIndexException  (" ")  ;^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int ncols = this.getRowDimension (  ) ;^436^^^^^432^440^[REPLACE] int ncols = this.getColumnDimension (  ) ;^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[2][ncols];^437^^^^^432^440^[REPLACE] double[][] out = new double[1][ncols];^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^System.arraycopy ( data[row], 1, out[1], 1, ncols ) ;^438^^^^^432^440^[REPLACE] System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return  new RealMatrixImpl ( this.copyOut (  )  )  ;^439^^^^^432^440^[REPLACE] return new RealMatrixImpl ( out ) ;^[METHOD] getRowMatrix [TYPE] RealMatrix [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  !isValidCoordinate (  3, startColumn )  )  {^451^^^^^450^460^[REPLACE] if  (  !isValidCoordinate (  0, column )  )  {^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^452^^^^^450^460^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^452^^^^^450^460^[ADD] throw new MatrixIndexException  (" ")  ;^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^452^^^^^450^460^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^454^^^^^450^460^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[nRows][2];^455^^^^^450^460^[REPLACE] double[][] out = new double[nRows][1];^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^455^^^^^450^460^[ADD] double[][] out = new double[nRows][1];^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 4; row  >=  startRow; row++ )  {^456^^^^^450^460^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[row][0 % 2] = data[row][column];^457^^^^^450^460^[REPLACE] out[row][0] = data[row][column];^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[row] = data[row][col]; ;^457^^^^^450^460^[REPLACE] out[row][0] = data[row][column];^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 2; row < nRows; row++ )  {^456^^^^^450^460^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return  new RealMatrixImpl ( this.copyOut (  )  )  ;^459^^^^^450^460^[REPLACE] return new RealMatrixImpl ( out ) ;^[METHOD] getColumnMatrix [TYPE] RealMatrix [PARAMETER] int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  !isValidCoordinate (  startRow, 1  )   )  {^473^^^^^472^480^[REPLACE] if  (  !isValidCoordinate (  row, 0  )   )  {^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^473^474^475^^^472^480^[ADD] if  (  !isValidCoordinate (  row, 0  )   )  { throw new MatrixIndexException  (" ")  ; }^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^474^^^^^472^480^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^474^^^^^472^480^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int ncols = this.getRowDimension (  ) ;^476^^^^^472^480^[REPLACE] int ncols = this.getColumnDimension (  ) ;^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[1][ncols];^477^^^^^472^480^[REPLACE] double[] out = new double[ncols];^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^System.arraycopy ( data[row], 4, out, 4, ncols ) ;^478^^^^^472^480^[REPLACE] System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^478^^^^^472^480^[ADD] System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return det;^479^^^^^472^480^[REPLACE] return out;^[METHOD] getRow [TYPE] double[] [PARAMETER] int row [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  (  !isValidCoordinate ( 0 + 4, col )   )  {^493^^^^^492^502^[REPLACE] if  (  !isValidCoordinate ( 0, col )   )  {^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^494^^^^^492^502^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^494^^^^^492^502^[ADD] throw new MatrixIndexException  (" ")  ;^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^494^^^^^492^502^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^496^^^^^492^502^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[nRows][1];^497^^^^^492^502^[REPLACE] double[] out = new double[nRows];^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 0; row  !=  nRows; row++ )  {^498^^^^^492^502^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[row][0] = data[row][column]; ;^499^^^^^492^502^[REPLACE] out[row] = data[row][col];^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 4; row < nRows; row++ )  {^498^^^^^492^502^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return det;^501^^^^^492^502^[REPLACE] return out;^[METHOD] getColumn [TYPE] double[] [PARAMETER] int col [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( !isValidCoordinate ( row,startColumn )  )  {^521^^^^^519^525^[REPLACE] if  ( !isValidCoordinate ( row,column )  )  {^[METHOD] getEntry [TYPE] double [PARAMETER] int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^522^^^^^519^525^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getEntry [TYPE] double [PARAMETER] int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^522^^^^^519^525^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getEntry [TYPE] double [PARAMETER] int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data;^524^^^^^519^525^[REPLACE] return data[row][column];^[METHOD] getEntry [TYPE] double [PARAMETER] int row int column [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this .getColumnDimension (  )  ;^533^^^^^532^543^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nCols = this.getRowDimension (  ) ;^534^^^^^532^543^[REPLACE] int nCols = this.getColumnDimension (  ) ;^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^534^^^^^532^543^[ADD] int nCols = this.getColumnDimension (  ) ;^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^RealMatrixImpl out = new RealMatrixImpl ( startColumn, nRows ) ;^535^^^^^532^543^[REPLACE] RealMatrixImpl out = new RealMatrixImpl ( nCols, nRows ) ;^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] outData = out.getData (  ) ;^536^^^^^532^543^[REPLACE] double[][] outData = out.getDataRef (  ) ;^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 0; row  <=  nRows; row++ )  {^537^^^^^532^543^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^537^538^539^540^^532^543^[ADD] for  ( int row = 0; row < nRows; row++ )  { for  ( int col = 0; col < nCols; col++ )  { outData[col][row] = data[row][col]; }^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( intstartRow = 0; col  ==  rowCount; col++ )  {^538^^^^^532^543^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^538^539^540^^^532^543^[ADD] for  ( int col = 0; col < nCols; col++ )  { outData[col][row] = data[row][col]; }^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^outData[row][col] = data[row][col] * d; ;^539^^^^^532^543^[REPLACE] outData[col][row] = data[row][col];^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^539^^^^^532^543^[ADD] outData[col][row] = data[row][col];^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 2; col < nCols; col++ )  {^538^^^^^532^543^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0; col  ==  nCols; col++ )  {^538^^^^^532^543^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 2; row < nRows; row++ )  {^537^^^^^532^543^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return det;^542^^^^^532^543^[REPLACE] return out;^[METHOD] transpose [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl out  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return new RealMatrixImpl ( out ) ;^552^553^^^^551^554^[REPLACE] return solve ( MatrixUtils.createRealIdentityMatrix ( this.getRowDimension (  )  )  ) ;^[METHOD] inverse [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( !this.isSquare (  )  )  {^561^^^^^560^573^[REPLACE] if  ( !isSquare (  )  )  {^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^561^562^563^^^560^573^[ADD] if  ( !isSquare (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^562^^^^^560^573^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^562^^^^^560^573^[ADD] throw new InvalidMatrixException  (" ")  ;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^rowDimensionf  ( isSingular (  )  )  {^564^^^^^560^573^[REPLACE] if  ( isSingular (  )  )  {^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^564^565^566^567^^560^573^[ADD] if  ( isSingular (  )  )  { return 0d; } else { double det = parity;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i  ==  this.getRow (  ) ; i++ )  {^568^^^^^560^573^[REPLACE] for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^det *=  lu[null][null];^569^^^^^560^573^[REPLACE] det *= lu[i][i];^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^det *=  lu[rowDimension][rowDimension];^569^^^^^560^573^[REPLACE] det *= lu[i][i];^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return d;^571^^^^^560^573^[REPLACE] return det;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double maxColSum = 0;^567^^^^^560^573^[REPLACE] double det = parity;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^567^^^^^560^573^[ADD] double det = parity;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0 - 3; i < this.getRowDimension (  ) ; i++ )  {^568^^^^^560^573^[REPLACE] for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data;^565^^^^^560^573^[REPLACE] return 0d;^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i  >=  this.getRowDimension (  ) ; i++ )  {^568^^^^^560^573^[REPLACE] for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^569^^^^^560^573^[ADD] det *= lu[i][i];^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0 >> 0; i < this.getRowDimension (  ) ; i++ )  {^568^^^^^560^573^[REPLACE] for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[METHOD] getDeterminant [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return  ( this.getColumnDimension (  )  == this .getColumnDimension (  )   ) ;^579^^^^^578^580^[REPLACE] return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[METHOD] isSquare [TYPE] boolean [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( lu != true )  {^586^^^^^585^596^[REPLACE] if  ( lu == null )  {^[METHOD] isSingular [TYPE] boolean [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  InvalidMatrixException ex  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return true;^594^^^^^585^596^[REPLACE] return false;^[METHOD] isSingular [TYPE] boolean [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  InvalidMatrixException ex  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^luDecompose (  ) ;return false;return true;^587^588^589^590^591^585^596^[ADD] try { luDecompose (  ) ; return false; } catch  ( InvalidMatrixException ex )  { return true;^[METHOD] isSingular [TYPE] boolean [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  InvalidMatrixException ex  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return true;^589^^^^^585^596^[REPLACE] return false;^[METHOD] isSingular [TYPE] boolean [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  InvalidMatrixException ex  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return false;^591^^^^^585^596^[REPLACE] return true;^[METHOD] isSingular [TYPE] boolean [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  InvalidMatrixException ex  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data[0].length;^602^^^^^601^603^[REPLACE] return data.length;^[METHOD] getRowDimension [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data[0 ].length;^609^^^^^608^610^[REPLACE] return data[0].length;^[METHOD] getColumnDimension [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( !this.isSquare (  )  )  {^617^^^^^616^625^[REPLACE] if  ( !isSquare (  )  )  {^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^618^^^^^616^625^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^618^^^^^616^625^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double trace = data[3][3];^620^^^^^616^625^[REPLACE] double trace = data[0][0];^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  (rowDimensionnt i = 1; i  ==  this.getRowDimension (  ) ; i++ )  {^621^^^^^616^625^[REPLACE] for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^trace +=  data[rowDimension][rowDimension];^622^^^^^616^625^[REPLACE] trace += data[i][i];^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 2; i < this.getRowDimension (  ) ; i++ )  {^621^^^^^616^625^[REPLACE] for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return maxColSum;^624^^^^^616^625^[REPLACE] return trace;^[METHOD] getTrace [TYPE] double [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( v.length + 5 != this.getColumnDimension (  )  )  {^633^^^^^632^647^[REPLACE] if  ( v.length != this.getColumnDimension (  )  )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^634^^^^^632^647^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^636^^^^^632^647^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nCols = this .getRowDimension (  )  ;^637^^^^^632^647^[REPLACE] int nCols = this.getColumnDimension (  ) ;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[1][ncols];^638^^^^^632^647^[REPLACE] double[] out = new double[v.length];^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^638^^^^^632^647^[ADD] double[] out = new double[v.length];^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( intstartRow = 0; row  ==  nRows; row++ )  {^639^^^^^632^647^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^639^640^641^642^643^632^647^[ADD] for  ( int row = 0; row < nRows; row++ )  { double sum = 0; for  ( int i = 0; i < nCols; i++ )  { sum += data[row][i] * v[i]; }^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i  >  nCols; i++ )  {^641^^^^^632^647^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^sum += data[row][i]  ;^642^^^^^632^647^[REPLACE] sum += data[row][i] * v[i];^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[col] = sum; ;^644^^^^^632^647^[REPLACE] out[row] = sum;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^644^^^^^632^647^[ADD] out[row] = sum;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double sum = 2;^640^^^^^632^647^[REPLACE] double sum = 0;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 4; i < nCols; i++ )  {^641^^^^^632^647^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i  == rowDimension; i++ )  {^641^^^^^632^647^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^641^642^643^^^632^647^[ADD] for  ( int i = 0; i < nCols; i++ )  { sum += data[row][i] * v[i]; }^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^sum += data[i][col] * v[i]; ;^642^^^^^632^647^[REPLACE] sum += data[row][i] * v[i];^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^642^^^^^632^647^[ADD] sum += data[row][i] * v[i];^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 0 << 0; row < nRows; row++ )  {^639^^^^^632^647^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double sum = 1;^640^^^^^632^647^[REPLACE] double sum = 0;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^640^^^^^632^647^[ADD] double sum = 0;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0L; i < nCols; i++ )  {^641^^^^^632^647^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return det;^646^^^^^632^647^[REPLACE] return out;^[METHOD] operate [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^655^^^^^654^669^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( v.length /  0.5  != nRows )  {^656^^^^^654^669^[REPLACE] if  ( v.length != nRows )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^656^657^658^^^654^669^[ADD] if  ( v.length != nRows )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^657^^^^^654^669^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^657^^^^^654^669^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^657^^^^^654^669^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nCols = this.getRowDimension (  ) ;^659^^^^^654^669^[REPLACE] int nCols = this.getColumnDimension (  ) ;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^659^660^^^^654^669^[ADD] int nCols = this.getColumnDimension (  ) ; double[] out = new double[nCols];^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[1][ncols];^660^^^^^654^669^[REPLACE] double[] out = new double[nCols];^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0L; col  > startRow; col++ )  {^661^^^^^654^669^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i  >  nRows; i++ )  {^663^^^^^654^669^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^sum += data[i][col]  ;^664^^^^^654^669^[REPLACE] sum += data[i][col] * v[i];^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[row] = sum; ;^666^^^^^654^669^[REPLACE] out[col] = sum;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double sum = 2;^662^^^^^654^669^[REPLACE] double sum = 0;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 2; i < nRows; i++ )  {^663^^^^^654^669^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( rowDimensionnt i = 0; i  ==  nRows; i++ )  {^663^^^^^654^669^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^663^664^665^^^654^669^[ADD] for  ( int i = 0; i < nRows; i++ )  { sum += data[i][col] * v[i]; }^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^sum += data[row][i] * v[i]; ;^664^^^^^654^669^[REPLACE] sum += data[i][col] * v[i];^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0 / 4; col < nCols; col++ )  {^661^^^^^654^669^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double sum = 3;^662^^^^^654^669^[REPLACE] double sum = 0;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0 + 4; i < nRows; i++ )  {^663^^^^^654^669^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return det;^668^^^^^654^669^[REPLACE] return out;^[METHOD] preMultiply [TYPE] double[] [PARAMETER] double[] v [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] out  v  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^683^^^^^682^694^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^683^^^^^682^694^[ADD] int nRows = this.getRowDimension (  ) ;^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( b.length (  )  != nRows )  {^684^^^^^682^694^[REPLACE] if  ( b.length != nRows )  {^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^685^^^^^682^694^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^RealMatrix m =  ( RealMatrix )  object;^687^^^^^682^694^[REPLACE] RealMatrix bMatrix = new RealMatrixImpl ( b ) ;^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] solution =  (  ( RealMatrixImpl )   ( solve ( bMatrix )  )  ) .getData (  ) ;^688^^^^^682^694^[REPLACE] double[][] solution =  (  ( RealMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[nRows][1];^689^^^^^682^694^[REPLACE] double[] out = new double[nRows];^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 0; row  <=  nRows; row++ )  {^690^^^^^682^694^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[row] = solution[row][3];^691^^^^^682^694^[REPLACE] out[row] = solution[row][0];^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^out[row] = solution[row][0 * 4];^691^^^^^682^694^[REPLACE] out[row] = solution[row][0];^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 2; row < nRows; row++ )  {^690^^^^^682^694^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return det;^693^^^^^682^694^[REPLACE] return out;^[METHOD] solve [TYPE] double[] [PARAMETER] double[] b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[] b  out  [TYPE]  RealMatrix bMatrix  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( b.getRowDimension (  )   ==  this.getRowDimension (  )  )  {^708^^^^^707^753^[REPLACE] if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^709^^^^^707^753^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( !this.getRow (  )  )  {^711^^^^^707^753^[REPLACE] if  ( !this.isSquare (  )  )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return ;^712^^^^^707^753^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^712^^^^^707^753^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^if  ( this.isSquare (  )  )  {^714^^^^^707^753^[REPLACE] if  ( this.isSingular (  )  )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^715^^^^^707^753^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^715^^^^^707^753^[ADD] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nCol = this.getRowDimension (  ) ;^718^^^^^707^753^[REPLACE] int nCol = this.getColumnDimension (  ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nColB = b.getRowDimension (  ) ;^719^^^^^707^753^[REPLACE] int nColB = b.getColumnDimension (  ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^719^^^^^707^753^[ADD] int nColB = b.getColumnDimension (  ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRowB = b.getColumnDimension (  ) ;^720^^^^^707^753^[REPLACE] int nRowB = b.getRowDimension (  ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^double[][] out = new double[1][ncols];^723^^^^^707^753^[REPLACE] double[][] bp = new double[nRowB][nColB];^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( intstartRow = 3; row  <=  nRowB; row++ )  {^724^^^^^707^753^[REPLACE] for  ( int row = 0; row < nRowB; row++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0; col  <= startRow; col++ )  {^725^^^^^707^753^[REPLACE] for  ( int col = 0; col < nColB; col++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^bp[row][col] ;^726^^^^^707^753^[REPLACE] bp[row][col] = b.getEntry ( permutation[row], col ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^bp[row][col]  =  bp[row][col] ;^726^^^^^707^753^[REPLACE] bp[row][col] = b.getEntry ( permutation[row], col ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0 - 4; col < nColB; col++ )  {^725^^^^^707^753^[REPLACE] for  ( int col = 0; col < nColB; col++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0; col  ==  nColB; col++ )  {^725^^^^^707^753^[REPLACE] for  ( int col = 0; col < nColB; col++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^725^726^727^^^707^753^[ADD] for  ( int col = 0; col < nColB; col++ )  { bp[row][col] = b.getEntry ( permutation[row], col ) ; }^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^bp[row][col]  = null ;^726^^^^^707^753^[REPLACE] bp[row][col] = b.getEntry ( permutation[row], col ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int row = 2; row < nRowB; row++ )  {^724^^^^^707^753^[REPLACE] for  ( int row = 0; row < nRowB; row++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 3; col < nColB; col++ )  {^725^^^^^707^753^[REPLACE] for  ( int col = 0; col < nColB; col++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 0; col  >=  nCol; col++ )  {^731^^^^^707^753^[REPLACE] for  ( int col = 0; col < nCol; col++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^731^732^733^734^735^707^753^[ADD] for  ( int col = 0; col < nCol; col++ )  { for  ( int i = col + 1; i < nCol; i++ )  { for  ( int j = 0; j < nColB; j++ )  { bp[i][j] -= bp[col][j] * lu[i][col]; }^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = col +startRow; i < nCol; i++ )  {^732^^^^^707^753^[REPLACE] for  ( int i = col + 1; i < nCol; i++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  >=  nColB; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^bp[i][j] -= bp[col][j]  ;^734^^^^^707^753^[REPLACE] bp[i][j] -= bp[col][j] * lu[i][col];^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 1; j < nColB; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  <=  startColumn; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^734^^^^^707^753^[ADD] bp[i][j] -= bp[col][j] * lu[i][col];^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 4; j < nColB; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^733^734^735^^^707^753^[ADD] for  ( int j = 0; j < nColB; j++ )  { bp[i][j] -= bp[col][j] * lu[i][col]; }^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i =startRow + 1; i < nCol; i++ )  {^732^^^^^707^753^[REPLACE] for  ( int i = col + 1; i < nCol; i++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  !=  nColB; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 - 0; j < nColB; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 >> 1; j  >=  nColB; j++ )  {^733^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col = 1; col < nCol; col++ )  {^731^^^^^707^753^[REPLACE] for  ( int col = 0; col < nCol; col++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col =ncols - 1; col >= 0; col-- )  {^740^^^^^707^753^[REPLACE] for  ( int col = nCol - 1; col >= 0; col-- )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  ==  nColB; j++ )  {^741^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^lu[row][col] /= lu[col][col]; ;^742^^^^^707^753^[REPLACE] bp[col][j] /= lu[col][col];^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 0; i  >=  col; i++ )  {^744^^^^^707^753^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  !=  nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^bp[i][j] -= bp[col][j]  ;^746^^^^^707^753^[REPLACE] bp[i][j] -= bp[col][j] * lu[i][col];^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0L; j < nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^745^746^747^^^707^753^[ADD] for  ( int j = 0; j < nColB; j++ )  { bp[i][j] -= bp[col][j] * lu[i][col]; }^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  <=  nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^746^^^^^707^753^[ADD] bp[i][j] -= bp[col][j] * lu[i][col];^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 << 1; j < nColB; j++ )  {^741^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 3; i < col; i++ )  {^744^^^^^707^753^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 3; j < nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0; j  >  nColB; j++ )  {^741^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^741^742^743^^^707^753^[ADD] for  ( int j = 0; j < nColB; j++ )  { bp[col][j] /= lu[col][col]; }^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( rowDimensionnt i = 0; i  >  startRow; i++ )  {^744^^^^^707^753^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[ADD]^^744^745^746^747^^707^753^[ADD] for  ( int i = 0; i < col; i++ )  { for  ( int j = 0; j < nColB; j++ )  { bp[i][j] -= bp[col][j] * lu[i][col]; }^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 2; j  !=  nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 % 1; j < nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int col =startRow - 1; col >= 0; col-- )  {^740^^^^^707^753^[REPLACE] for  ( int col = nCol - 1; col >= 0; col-- )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 1; j < nColB; j++ )  {^741^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int i = 2; i < col; i++ )  {^744^^^^^707^753^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^for  ( int j = 0 * 3; j < nColB; j++ )  {^745^^^^^707^753^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^RealMatrixImpl outMat = new RealMatrixImpl ( subMatrixData ) ;^751^^^^^707^753^[REPLACE] RealMatrixImpl outMat = new RealMatrixImpl ( bp ) ;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^return data;^752^^^^^707^753^[REPLACE] return outMat;^[METHOD] solve [TYPE] RealMatrix [PARAMETER] RealMatrix b [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix b  [TYPE]  double TOO_SMALL  d  det  maxColSum  sum  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  RealMatrixImpl outMat  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^775^^^^^773^845^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^775^^^^^773^845^[ADD] int nRows = this.getRowDimension (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nCols = this .getRowDimension (  )  ;^776^^^^^773^845^[REPLACE] int nCols = this.getColumnDimension (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( nRows  ==  nCols )  {^777^^^^^773^845^[REPLACE] if  ( nRows != nCols )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^777^778^779^^^773^845^[ADD] if  ( nRows != nCols )  { throw new InvalidMatrixException  (" ")  ; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^778^^^^^773^845^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^778^^^^^773^845^[ADD] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return ;^778^^^^^773^845^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu  =  lu ;^780^^^^^773^845^[REPLACE] lu = this.getData (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^780^^^^^773^845^[ADD] lu = this.getData (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^permutation =  new int[r];^783^^^^^773^845^[REPLACE] permutation = new int[nRows];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 0; row  >=  nRows; row++ )  {^784^^^^^773^845^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^permutation[col] = temp; ;^785^^^^^773^845^[REPLACE] permutation[row] = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^785^^^^^773^845^[ADD] permutation[row] = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 3; row < nRows; row++ )  {^784^^^^^773^845^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^784^785^786^^^773^845^[ADD] for  ( int row = 0; row < nRows; row++ )  { permutation[row] = row; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^parity = 1 / 1;^787^^^^^773^845^[REPLACE] parity = 1;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( Math.abs ( sum )   <  largest )  {^814^^^^^773^845^[REPLACE] if  ( Math.abs ( sum )  > largest )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^largest = Math.abs ( sum ) ;max = row;^814^815^816^817^^773^845^[ADD] if  ( Math.abs ( sum )  > largest )  { largest = Math.abs ( sum ) ; max = row; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^largest =  Math.abs ( maxColSum ) ;^815^^^^^773^845^[REPLACE] largest = Math.abs ( sum ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^max =  r;^816^^^^^773^845^[REPLACE] max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( Math.abs ( lu[max][col] )   ==  TOO_SMALL )  {^821^^^^^773^845^[REPLACE] if  ( Math.abs ( lu[max][col] )  < TOO_SMALL )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu = false;^822^^^^^773^845^[REPLACE] lu = null;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^823^^^^^773^845^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^823^^^^^773^845^[ADD] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( max  ==  col )  {^827^^^^^773^845^[REPLACE] if  ( max != col )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0; i  <=  nCols; i++ )  {^829^^^^^773^845^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^829^830^831^832^833^773^845^[ADD] for  ( int i = 0; i < nCols; i++ )  { tmp = lu[max][i]; lu[max][i] = lu[col][i]; lu[col][i] = tmp; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^tmp =  lu[startRow][i];^830^^^^^773^845^[REPLACE] tmp = lu[max][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu[max][i] ;^831^^^^^773^845^[REPLACE] lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu[col][i]  =  lu[col][i] ;^832^^^^^773^845^[REPLACE] lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu[col][i]  = null ;^832^^^^^773^845^[REPLACE] lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^832^^^^^773^845^[ADD] lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^permutation[max]  =  permutation[max] ;^835^^^^^773^845^[REPLACE] permutation[max] = permutation[col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^permutation[row] = row; ;^836^^^^^773^845^[REPLACE] permutation[col] = temp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^parity  =  parity ;^837^^^^^773^845^[REPLACE] parity = -parity;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double tmp = 2;^828^^^^^773^845^[REPLACE] double tmp = 0;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 1; i < nCols; i++ )  {^829^^^^^773^845^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nCols = getColumnDimension (  ) ;^834^^^^^773^845^[REPLACE] int temp = permutation[max];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int startRow = 0 - 2; col  ==  nCols; col++ )  {^790^^^^^773^845^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  (   sum     < sum )  {^814^^^^^773^845^[REPLACE] if  ( Math.abs ( sum )  > largest )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^largest =  Math.abs ( null ) ;^815^^^^^773^845^[REPLACE] largest = Math.abs ( sum ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^816^^^^^773^845^[ADD] max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( Math.abs ( lu[max][col] )   >=  TOO_SMALL )  {^821^^^^^773^845^[REPLACE] if  ( Math.abs ( lu[max][col] )  < TOO_SMALL )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REMOVE]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^821^^^^^773^845^[REMOVE] ^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu = this;^822^^^^^773^845^[REPLACE] lu = null;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu[max][i]  =  lu[max][i] ;^831^^^^^773^845^[REPLACE] lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu[col][i] ;^832^^^^^773^845^[REPLACE] lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^830^^^^^773^845^[ADD] tmp = lu[max][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double tmp = 0L;^828^^^^^773^845^[REPLACE] double tmp = 0;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^834^^^^^773^845^[ADD] int temp = permutation[max];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( intstartColumn = 0; row  <=  col; row++ )  {^795^^^^^773^845^[REPLACE] for  ( int row = 0; row < col; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^795^796^797^798^799^773^845^[ADD] for  ( int row = 0; row < col; row++ )  { sum = lu[row][col]; for  ( int i = 0; i < row; i++ )  { sum -= lu[row][i] * lu[i][col]; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0; i  ==  row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum -= lu[row][i]  ;^798^^^^^773^845^[REPLACE] sum -= lu[row][i] * lu[i][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[parity][col];^796^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^outData[row][col] = sum; ;^800^^^^^773^845^[REPLACE] lu[row][col] = sum;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 3; i < row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0; i  <=  row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^797^798^799^^^773^845^[ADD] for  ( int i = 0; i < row; i++ )  { sum -= lu[row][i] * lu[i][col]; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^798^^^^^773^845^[ADD] sum -= lu[row][i] * lu[i][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = startRow; row  != startColumn; row++ )  {^806^^^^^773^845^[REPLACE] for  ( int row = col; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( Math.abs ( sum )   >= sum )  {^814^^^^^773^845^[REPLACE] if  ( Math.abs ( sum )  > largest )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^814^815^816^817^^773^845^[ADD] if  ( Math.abs ( sum )  > largest )  { largest = Math.abs ( sum ) ; max = row; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^max = row;^815^816^^^^773^845^[ADD] largest = Math.abs ( sum ) ; max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0; i  >  col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^808^809^810^^^773^845^[ADD] for  ( int i = 0; i < col; i++ )  { sum -= lu[row][i] * lu[i][col]; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum -= lu[row][i]  ;^809^^^^^773^845^[REPLACE] sum -= lu[row][i] * lu[i][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[parity][col];^807^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^807^^^^^773^845^[ADD] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^outData[row][col] = sum; ;^811^^^^^773^845^[REPLACE] lu[row][col] = sum;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^max =  null;^816^^^^^773^845^[REPLACE] max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 1; i < col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 - 1; i  >  nCols; i++ )  {^829^^^^^773^845^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu[max][i]  = null ;^831^^^^^773^845^[REPLACE] lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^831^832^^^^773^845^[ADD] lu[max][i] = lu[col][i]; lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row =startColumn + 1; row < nRows; row++ )  {^841^^^^^773^845^[REPLACE] for  ( int row = col + 1; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^bp[col][j] /= lu[col][col]; ;^842^^^^^773^845^[REPLACE] lu[row][col] /= lu[col][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^842^^^^^773^845^[ADD] lu[row][col] /= lu[col][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[null][col];^796^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[rowDimension][col];^807^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^max =  startRow;^816^^^^^773^845^[REPLACE] max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu = true;^822^^^^^773^845^[REPLACE] lu = null;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^822^^^^^773^845^[ADD] lu = null;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^831^^^^^773^845^[ADD] lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^permutation[max] ;^835^^^^^773^845^[REPLACE] permutation[max] = permutation[col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^parity ;^837^^^^^773^845^[REPLACE] parity = -parity;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^837^^^^^773^845^[ADD] parity = -parity;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double sum = 2;^792^^^^^773^845^[REPLACE] double sum = 0;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 0L; row < col; row++ )  {^795^^^^^773^845^[REPLACE] for  ( int row = 0; row < col; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 % 3; i < row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int max = startRow;^804^^^^^773^845^[REPLACE] int max = col;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double maxColSum = 0;^805^^^^^773^845^[REPLACE] double largest = 0d;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = startRow; row < nRows; row++ )  {^806^^^^^773^845^[REPLACE] for  ( int row = col; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 >>> 2; i < col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double tmp = 3;^828^^^^^773^845^[REPLACE] double tmp = 0;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row =startRow + 1; row < nRows; row++ )  {^841^^^^^773^845^[REPLACE] for  ( int row = col + 1; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^841^842^843^^^773^845^[ADD] for  ( int row = col + 1; row < nRows; row++ )  { lu[row][col] /= lu[col][col]; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 0; row  !=  col; row++ )  {^795^^^^^773^845^[REPLACE] for  ( int row = 0; row < col; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( startRowDimensionnt i = 0; i  >  row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[r][col];^796^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^800^^^^^773^845^[ADD] lu[row][col] = sum;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 2; i < row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = rowDimension; row  <=  nRows; row++ )  {^806^^^^^773^845^[REPLACE] for  ( int row = col; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( Math.abs ( maxColSum )   <=  trace )  {^814^^^^^773^845^[REPLACE] if  ( Math.abs ( sum )  > largest )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  (rowDimensionnt i = 0; i  ==  col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0L; i < col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0; i  ==  col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( rowDimensionnt i = 0; i  !=  nCols; i++ )  {^829^^^^^773^845^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^tmp =  lu[null][i];^830^^^^^773^845^[REPLACE] tmp = lu[max][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row =startRow + 1; row < rowCount; row++ )  {^841^^^^^773^845^[REPLACE] for  ( int row = col + 1; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[startRow][col];^796^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^796^^^^^773^845^[ADD] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^sum =  lu[null][col];^807^^^^^773^845^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^830^831^^^^773^845^[ADD] tmp = lu[max][i]; lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 0L; col < nCols; col++ )  {^790^^^^^773^845^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double sum = 4;^792^^^^^773^845^[REPLACE] double sum = 0;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 3; row < col; row++ )  {^795^^^^^773^845^[REPLACE] for  ( int row = 0; row < col; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 - 2; i < row; i++ )  {^797^^^^^773^845^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int max = rowCount;^804^^^^^773^845^[REPLACE] int max = col;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 2; i < col; i++ )  {^808^^^^^773^845^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^828^^^^^773^845^[ADD] double tmp = 0;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 2; i < nCols; i++ )  {^829^^^^^773^845^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = col +startColumn; row < nRows; row++ )  {^841^^^^^773^845^[REPLACE] for  ( int row = col + 1; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nRows = getRowDimension (  ) ;^852^^^^^851^869^[REPLACE] StringBuffer res = new StringBuffer (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res .toString (  )  ;^853^^^^^851^869^[REPLACE] res.append ( "RealMatrixImpl{" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( data == null )  {^854^^^^^851^869^[REPLACE] if  ( data != null )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^rowDimensionf  ( i  <=  1 ) res.append ( "," ) ;^856^857^^^^851^869^[REPLACE] if  ( i > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res.append ( "}" ) ;^857^^^^^851^869^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  <  0 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res.append ( "}" ) ;^861^^^^^851^869^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 ; i < data.length - 2; i++ )  {^855^^^^^851^869^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( i  ==  0 ) res .append ( this )  ;^856^857^^^^851^869^[REPLACE] if  ( i > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  <=  0 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int j = 0; j < data[0].length /  2; j++ )  {^859^^^^^851^869^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  !=  1 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int j = 0 ; j < data[0 ].length; j++ )  {^859^^^^^851^869^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^859^860^861^862^863^851^869^[ADD] for  ( int j = 0; j < data[0].length; j++ )  { if  ( j > 0 ) res.append ( "," ) ; res.append ( data[i][j] ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( rowDimensionnt j = 0; j < data[0].length %  2; j++ )  {^859^^^^^851^869^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  !=  0 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^861^^^^^851^869^[ADD] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^855^^^^^851^869^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^855^856^857^858^^851^869^[ADD] for  ( int i = 0; i < data.length; i++ )  { if  ( i > 0 ) res.append ( "," ) ; res.append ( "{" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( rowDimension  >=  0 ) res.append ( "," ) ;^856^857^^^^851^869^[REPLACE] if  ( i > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^856^857^858^859^860^851^869^[ADD] if  ( i > 0 ) res.append ( "," ) ; res.append ( "{" ) ; for  ( int j = 0; j < data[0].length; j++ )  { if  ( j > 0 )^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  ==  0 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^res.append ( "," ) ;res.append ( data[i][j] ) ;^860^861^862^863^^851^869^[ADD] if  ( j > 0 ) res.append ( "," ) ; res.append ( data[i][j] ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 ; i < data.length *  0 .5 ; i++ )  {^855^^^^^851^869^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( i  >=  0 ) res.append ( "," ) ;^856^857^^^^851^869^[REPLACE] if  ( i > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^res.append ( "," ) ;res.append ( "{" ) ;^856^857^858^859^860^851^869^[ADD] if  ( i > 0 ) res.append ( "," ) ; res.append ( "{" ) ; for  ( int j = 0; j < data[0].length; j++ )  { if  ( j > 0 )^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res .append ( true )  ;^857^^^^^851^869^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  >=  0 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res .append ( this )  ;^861^^^^^851^869^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int j = 0 ; j < data[0 ].length /  0 .5 ; j++ )  {^859^^^^^851^869^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( j  <  3 ) res.append ( "," ) ;^860^861^^^^851^869^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res .append ( null )  ;^861^^^^^851^869^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int j = 0; j < data[0].length %  2; j++ )  {^859^^^^^851^869^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REMOVE]^( this.getRowDimension (  )  )  ) ;^861^^^^^851^869^[REMOVE] ^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^res.append ( "," ) ;^867^^^^^851^869^[REPLACE] res.append ( "}" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^867^^^^^851^869^[ADD] res.append ( "}" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return res.StringBuffer (  ) ;^868^^^^^851^869^[REPLACE] return res.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( object  &&  this  )  {^881^^^^^880^902^[REPLACE] if  ( object == this  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return false;^882^^^^^880^902^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( ! object instanceof RealMatrixImpl == false )  {^884^^^^^880^902^[REPLACE] if  ( object instanceof RealMatrixImpl == false )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^884^885^886^^^880^902^[ADD] if  ( object instanceof RealMatrixImpl == false )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return true;^885^^^^^880^902^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^RealMatrix bMatrix = new RealMatrixImpl ( b ) ;^887^^^^^880^902^[REPLACE] RealMatrix m =  ( RealMatrix )  object;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nRowB = b.getRowDimension (  ) ;^888^^^^^880^902^[REPLACE] int nRows = getRowDimension (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int ncols = this.getColumnDimension (  ) ;^889^^^^^880^902^[REPLACE] int nCols = getColumnDimension (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( m.multiply (  )  != nCols ) {^890^^^^^880^902^[REPLACE] if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return true;^891^^^^^880^902^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( Double.doubleToLongBits ( data[row][col] )   ==  Double.doubleToLongBits ( m.getEntry ( row, col )  )  )  {^895^896^^^^880^902^[REPLACE] if  ( Double.doubleToLongBits ( data[row][col] )  != Double.doubleToLongBits ( m.getEntry ( row, col )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return true;^897^^^^^880^902^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( introwDimension = 2; row  ==  nRows; row++ )  {^893^^^^^880^902^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 0; col  >=  nCols; col++ )  {^894^^^^^880^902^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 0L; col < nCols; col++ )  {^894^^^^^880^902^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^894^895^896^897^898^880^902^[ADD] for  ( int col = 0; col < nCols; col++ )  { if  ( Double.doubleToLongBits ( data[row][col] )  != Double.doubleToLongBits ( m.getEntry ( row, col )  )  )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 0; col  <=  nCols; col++ )  {^894^^^^^880^902^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^895^896^897^898^^880^902^[ADD] if  ( Double.doubleToLongBits ( data[row][col] )  != Double.doubleToLongBits ( m.getEntry ( row, col )  )  )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 0 - 3; row < nRows; row++ )  {^893^^^^^880^902^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 2; col < nCols; col++ )  {^894^^^^^880^902^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return false;^901^^^^^880^902^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] RealMatrixImpl   [TYPE]  boolean false  true  [TYPE]  RealMatrix m  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int ret = 0;^910^^^^^909^922^[REPLACE] int ret = 7;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nRowB = b.getRowDimension (  ) ;^911^^^^^909^922^[REPLACE] int nRows = getRowDimension (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int ncols = this.getColumnDimension (  ) ;^912^^^^^909^922^[REPLACE] int nCols = getColumnDimension (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^ret = ret * 31 + row;^913^^^^^909^922^[REPLACE] ret = ret * 31 + nRows;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^ret = ret * 31 + nRows; ;^914^^^^^909^922^[REPLACE] ret = ret * 31 + nCols;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 0; row  !=  nRows; row++ )  {^915^^^^^909^922^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( intstartRow = 0; col  !=  nCols; col++ )  {^916^^^^^909^922^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^916^917^918^919^^909^922^[ADD] for  ( int col = 0; col < nCols; col++ )  { ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ; }^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^ret = ret * 31  |   ( 11 *  ( row | 1 )   |  17 *  ( col | 1 )  )  * MathUtils.hash ( data[row][col] ) ;^917^918^^^^909^922^[REPLACE] ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^ret = ret * 3  >=   ( 11 *  ( row >= 1 )   >=  17 *  ( col >= 1 )  )  * MathUtils.hash ( data[row][col] ) ;^917^918^^^^909^922^[REPLACE] ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^917^918^^^^909^922^[ADD] ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 1; col < nCols; col++ )  {^916^^^^^909^922^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 0; col  >  nCols; col++ )  {^916^^^^^909^922^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^ret = ret * 3  <=   ( 11 *  ( row <= 1 )   <=  17 *  ( col <= 1 )  )  * MathUtils.hash ( data[row][col] ) ;^917^918^^^^909^922^[REPLACE] ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^ret = ret * 31 >>> 3 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ;^917^918^^^^909^922^[REPLACE] ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int row = 4; row < nRows; row++ )  {^915^^^^^909^922^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^915^916^917^918^919^909^922^[ADD] for  ( int row = 0; row < nRows; row++ )  { for  ( int col = 0; col < nCols; col++ )  { ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * MathUtils.hash ( data[row][col] ) ; }^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int col = 0 * 4; col < nCols; col++ )  {^916^^^^^909^922^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return temp;^921^^^^^909^922^[REPLACE] return ret;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return   dimension   ;^935^^^^^934^936^[REPLACE] return MatrixUtils.createRealIdentityMatrix ( dimension ) ;^[METHOD] getIdentity [TYPE] RealMatrix [PARAMETER] int dimension [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^if  ( lu != null )  {^966^^^^^965^970^[REPLACE] if  ( lu == null )  {^[METHOD] getLUMatrix [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^lu = this.getData (  ) ;^967^^^^^965^970^[REPLACE] luDecompose (  ) ;^[METHOD] getLUMatrix [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return  new RealMatrixImpl ( this.copyOut (  )  )  ;^969^^^^^965^970^[REPLACE] return new RealMatrixImpl ( lu ) ;^[METHOD] getLUMatrix [TYPE] RealMatrix [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nRows = subMatrix.length;^985^^^^^984^988^[REPLACE] int[] out = new int[permutation.length];^[METHOD] getPermutation [TYPE] int[] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^System.arraycopy ( permutation, 0 , out, 0 , permutation.length ) ;^986^^^^^984^988^[REPLACE] System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[METHOD] getPermutation [TYPE] int[] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REMOVE]^bp[row][col] = b.getEntry ( permutation[row], col ) ;^986^^^^^984^988^[REMOVE] ^[METHOD] getPermutation [TYPE] int[] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return det;^987^^^^^984^988^[REPLACE] return out;^[METHOD] getPermutation [TYPE] int[] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^998^^^^^997^1005^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^998^^^^^997^1005^[ADD] int nRows = this.getRowDimension (  ) ;^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^double[][] out = new double[nRows][this.getRowDimension (  ) ];^999^^^^^997^1005^[REPLACE] double[][] out = new double[nRows][this.getColumnDimension (  ) ];^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0; i  >=  nRows; i++ )  {^1001^^^^^997^1005^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^System.arraycopy ( data[i], 0 , out[i], 0 , data[i].length ) ;^1002^^^^^997^1005^[REPLACE] System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[ADD]^^1002^^^^^997^1005^[ADD] System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^for  ( int i = 0 >>> 4; i < nRows; i++ )  {^1001^^^^^997^1005^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return subMatrixData;^1004^^^^^997^1005^[REPLACE] return out;^[METHOD] copyOut [TYPE] double[][] [PARAMETER] [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^setSubMatrix ( in,2,2 ) ;^1018^^^^^1017^1019^[REPLACE] setSubMatrix ( in,0,0 ) ;^[METHOD] copyIn [TYPE] void [PARAMETER] double[][] in [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nRows = this .getColumnDimension (  )  ;^1029^^^^^1028^1033^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] isValidCoordinate [TYPE] boolean [PARAMETER] int row int col [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^int nCols = this.getRowDimension (  ) ;^1030^^^^^1028^1033^[REPLACE] int nCols = this.getColumnDimension (  ) ;^[METHOD] isValidCoordinate [TYPE] boolean [PARAMETER] int row int col [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
[REPLACE]^return   startRow > nRows - 1 || col ;^1032^^^^^1028^1033^[REPLACE] return ! ( row < 0 || row > nRows - 1 || col < 0 || col > nCols -1 ) ;^[METHOD] isValidCoordinate [TYPE] boolean [PARAMETER] int row int col [CLASS] RealMatrixImpl   [TYPE]  double[][] bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  [TYPE]  int[] out  permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  double TOO_SMALL  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  parity  r  ret  row  rowCount  rowDimension  startColumn  startRow  temp 
