[REPLACE]^return new TDistributionImpl ( degreesOfFreedom ) ;^42^^^^^39^43^[REPLACE] return new ChiSquaredDistributionImpl ( degreesOfFreedom ) ;^[METHOD] createChiSquareDistribution [TYPE] ChiSquaredDistribution [PARAMETER] final double degreesOfFreedom [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom 
[REPLACE]^return  new NormalDistributionImpl (  )  ;^55^^^^^52^56^[REPLACE] return new GammaDistributionImpl ( alpha, beta ) ;^[METHOD] createGammaDistribution [TYPE] GammaDistribution [PARAMETER] double alpha double beta [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double alpha  beta 
[REPLACE]^return  new NormalDistributionImpl (  )  ;^65^^^^^64^66^[REPLACE] return new TDistributionImpl ( degreesOfFreedom ) ;^[METHOD] createTDistribution [TYPE] TDistribution [PARAMETER] double degreesOfFreedom [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom 
[REPLACE]^return  new TDistributionImpl ( degreesOfFreedom )  ;^78^79^^^^75^80^[REPLACE] return new FDistributionImpl ( numeratorDegreesOfFreedom, denominatorDegreesOfFreedom ) ;^[METHOD] createFDistribution [TYPE] FDistribution [PARAMETER] double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double denominatorDegreesOfFreedom  numeratorDegreesOfFreedom 
[REPLACE]^return  new NormalDistributionImpl (  )  ;^89^^^^^88^90^[REPLACE] return new ExponentialDistributionImpl ( mean ) ;^[METHOD] createExponentialDistribution [TYPE] ExponentialDistribution [PARAMETER] double mean [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double mean 
[REPLACE]^return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^102^103^^^^100^104^[REPLACE] return new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess ) ;^[METHOD] createBinomialDistribution [TYPE] BinomialDistribution [PARAMETER] int numberOfTrials double probabilityOfSuccess [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double probabilityOfSuccess  [TYPE]  int numberOfTrials 
[REPLACE]^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, numberOfSuccesses ) ;^117^118^^^^115^119^[REPLACE] return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[METHOD] createHypergeometricDistribution [TYPE] HypergeometricDistribution [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  int numberOfSuccesses  populationSize  sampleSize 
[REPLACE]^return  new NormalDistributionImpl (  )  ;^130^^^^^129^131^[REPLACE] return new NormalDistributionImpl ( mean, sd ) ;^[METHOD] createNormalDistribution [TYPE] NormalDistribution [PARAMETER] double mean double sd [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double mean  sd 
[REPLACE]^return  new TDistributionImpl ( degreesOfFreedom )  ;^140^^^^^139^141^[REPLACE] return new NormalDistributionImpl (  ) ;^[METHOD] createNormalDistribution [TYPE] NormalDistribution [PARAMETER] [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true 
[REPLACE]^return  new NormalDistributionImpl (  )  ;^154^^^^^153^155^[REPLACE] return new PoissonDistributionImpl ( lambda ) ;^[METHOD] createPoissonDistribution [TYPE] PoissonDistribution [PARAMETER] double lambda [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double lambda 
[REPLACE]^return  new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess )  ;^166^^^^^165^167^[REPLACE] return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^[METHOD] createPascalDistribution [TYPE] PascalDistribution [PARAMETER] int numberOfSuccesses double probabilityOfSuccess [CLASS] DistributionFactoryImpl   [TYPE]  boolean false  true  [TYPE]  double probabilityOfSuccess  [TYPE]  int numberOfSuccesses 
