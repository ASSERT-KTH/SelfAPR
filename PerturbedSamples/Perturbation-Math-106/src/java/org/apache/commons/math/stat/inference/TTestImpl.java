[REPLACE]^private DistributionFactory distributionFactory ;^35^^^^^^^[REPLACE] private DistributionFactory distributionFactory = null;^ [CLASS] TTestImpl  
[REPLACE]^sampleStats.getN (  )  ) ;^41^^^^^40^42^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] TTestImpl() [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[ADD]^^41^^^^^40^42^[ADD] super (  ) ;^[METHOD] <init> [TYPE] TTestImpl() [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( sample1 == this )  ) {^66^67^^^^64^74^[REPLACE] if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[METHOD] pairedT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[REPLACE]^return ;^68^^^^^64^74^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] pairedT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[REPLACE]^double meanDifference = StatUtils .varianceDifference ( sample2 , sample1 , meanDifference )  ;^70^^^^^64^74^[REPLACE] double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[METHOD] pairedT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[REPLACE]^return t ( meanDifference, 0 , StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^[REPLACE] return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[METHOD] pairedT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[REPLACE]^double meanDifference = StatUtils .varianceDifference ( sample2 , sample2 , meanDifference )  ;^111^^^^^109^115^[REPLACE] double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[METHOD] pairedTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[ADD]^^111^112^113^114^115^109^115^[ADD] double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ; return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[METHOD] pairedTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[REPLACE]^return tTest ( meanDifference, 0 , StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^[REPLACE] return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[METHOD] pairedTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double meanDifference 
[REPLACE]^if  (  ( alpha <= 0 )  ) {^151^^^^^149^155^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] pairedTTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^return ;^152^^^^^149^155^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] pairedTTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^return  ( pairedTTest ( sample1, sample2 )   ;^154^^^^^149^155^[REPLACE] return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[METHOD] pairedTTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^if  (  ( observed == null )  ) {^174^^^^^172^179^[REPLACE] if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[METHOD] t [TYPE] double [PARAMETER] double mu double[] observed [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] observed  [TYPE]  double mu 
[REPLACE]^return ;^175^^^^^172^179^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] t [TYPE] double [PARAMETER] double mu double[] observed [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] observed  [TYPE]  double mu 
[REPLACE]^return t ( StatUtils.mean ( observed ) , mu, StatUtils.mean ( observed ) , observed.length ) ;^177^178^^^^172^179^[REPLACE] return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[METHOD] t [TYPE] double [PARAMETER] double mu double[] observed [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] observed  [TYPE]  double mu 
[REPLACE]^if  (  ( sampleStats != null )  ) {^199^^^^^197^204^[REPLACE] if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[METHOD] t [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[REPLACE]^return ;^200^^^^^197^204^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] t [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[REPLACE]^return t ( sampleStats.getMean (  ) , mu, sampleStats.getMean (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^[REPLACE] return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[METHOD] t [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[REPLACE]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.abs ( sample1.length + 3, sample2.length + 3 )  < 2 )  )  {^241^242^^^^239^248^[REPLACE] if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return ;^243^^^^^239^248^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[ADD]^^243^^^^^239^248^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^[REPLACE] return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( sample1 == false )  ) {^280^281^^^^278^287^[REPLACE] if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[METHOD] t [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^280^^^^^278^287^[REMOVE] ^[METHOD] t [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return ;^282^^^^^278^287^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] t [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return t ( StatUtils.variance ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^[REPLACE] return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[METHOD] t [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( sampleStats1 != true )  || ( sampleStats2 == true || Math.min ( sampleStats1.getMean (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^[REPLACE] if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[METHOD] t [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[ADD]^^323^324^325^326^327^320^331^[ADD] if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] t [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return ;^326^^^^^320^331^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] t [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getMean (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^[REPLACE] return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[METHOD] t [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^[REPLACE] if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[METHOD] homoscedasticT [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[ADD]^^371^372^373^374^375^368^379^[ADD] if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] homoscedasticT [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return ;^374^^^^^368^379^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[ADD]^^374^^^^^368^379^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return homoscedasticT ( sampleStats1.getN (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^[REPLACE] return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^if  (   ( sample.length - 4 < 2 )  )  {^409^^^^^407^414^[REPLACE] if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[METHOD] tTest [TYPE] double [PARAMETER] double mu double[] sample [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample  [TYPE]  double mu 
[REPLACE]^return ;^410^^^^^407^414^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] double [PARAMETER] double mu double[] sample [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample  [TYPE]  double mu 
[REPLACE]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.mean ( sample ) , sample.length ) ;^412^413^^^^407^414^[REPLACE] return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double mu double[] sample [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample  [TYPE]  double mu 
[REPLACE]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^453^^^^^451^457^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu double[] sample double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample  [TYPE]  double alpha  mu 
[REPLACE]^return ;^454^^^^^451^457^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu double[] sample double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample  [TYPE]  double alpha  mu 
[REPLACE]^return  ( tTest ( sample1, sample2 )  < alpha ) ;^456^^^^^451^457^[REPLACE] return  ( tTest ( mu, sample )  < alpha ) ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu double[] sample double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample  [TYPE]  double alpha  mu 
[REPLACE]^if  (  ( sampleStats != null )  ) {^489^^^^^487^494^[REPLACE] if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[METHOD] tTest [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[ADD]^^489^490^491^^^487^494^[ADD] if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] tTest [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[REPLACE]^return ;^490^^^^^487^494^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[ADD]^^490^^^^^487^494^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[REPLACE]^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getMean (  )  ) ;^492^493^^^^487^494^[REPLACE] return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double mu StatisticalSummary sampleStats [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double mu 
[REPLACE]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^535^^^^^532^539^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu StatisticalSummary sampleStats double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double alpha  mu 
[REPLACE]^return ;^536^^^^^532^539^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu StatisticalSummary sampleStats double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double alpha  mu 
[ADD]^^536^^^^^532^539^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu StatisticalSummary sampleStats double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double alpha  mu 
[REPLACE]^return false ;^538^^^^^532^539^[REPLACE] return  ( tTest ( mu, sampleStats )  < alpha ) ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double mu StatisticalSummary sampleStats double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats  [TYPE]  boolean false  true  [TYPE]  double alpha  mu 
[REPLACE]^if  (   ( sample2 == null ||   sample1.length (  )   )  < 2 )  )  {^579^580^^^^577^586^[REPLACE] if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[METHOD] tTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return ;^581^^^^^577^586^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return tTest (   sample1   , StatUtils.^583^584^585^^^577^586^[REPLACE] return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^if  (   ( sample2 == this || Math.min ( sample1.length (  ) , sample2.length (  )  )  < 2 )  )  {^623^624^^^^621^631^[REPLACE] if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return ;^625^^^^^621^631^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[ADD]^^625^^^^^621^631^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^return homoscedasticTTest (   sample1   , StatUtils.^627^628^629^630^^621^631^[REPLACE] return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double[] sample1 double[] sample2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double[] sample1  sample2  [TYPE]  boolean false  true 
[REPLACE]^if  (  (false )  &&  ( alpha > 0.5 )  )  {^688^^^^^685^692^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] tTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^return ;^689^^^^^685^692^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^return  ( tTest ( sample1, sample2 )   ;^691^^^^^685^692^[REPLACE] return  ( tTest ( sample1, sample2 )  < alpha ) ;^[METHOD] tTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^if  (   ( alpha > 0.5 )  )  {^748^^^^^745^752^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] homoscedasticTTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^return ;^749^^^^^745^752^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticTTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^return  ( homoscedasticTTest ( sample1, sample2 )   ;^751^^^^^745^752^[REPLACE] return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[METHOD] homoscedasticTTest [TYPE] boolean [PARAMETER] double[] sample1 double[] sample2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] sample1  sample2  [TYPE]  double alpha 
[REPLACE]^if  (  ( sampleStats1 != false )  ||  ( sampleStats2 == false || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^[REPLACE] if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[METHOD] tTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[ADD]^^790^791^792^793^^788^797^[ADD] if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] tTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return ;^792^^^^^788^797^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[ADD]^^792^^^^^788^797^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return tTest ( sampleStats1.getN (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^[REPLACE] return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[METHOD] tTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( sampleStats1 != null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^[REPLACE] if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return ;^837^^^^^832^843^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[ADD]^^837^^^^^832^843^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^[REPLACE] return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true 
[REPLACE]^if  (  (false )  ) {^901^^^^^898^905^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] tTest [TYPE] boolean [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true  [TYPE]  double alpha 
[REPLACE]^return ;^902^^^^^898^905^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] boolean [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true  [TYPE]  double alpha 
[ADD]^^902^^^^^898^905^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] tTest [TYPE] boolean [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true  [TYPE]  double alpha 
[REPLACE]^return  ( tTest ( sampleStats1, sampleStats2 )   ;^904^^^^^898^905^[REPLACE] return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[METHOD] tTest [TYPE] boolean [PARAMETER] StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  StatisticalSummary sampleStats1  sampleStats2  [TYPE]  boolean false  true  [TYPE]  double alpha 
[REPLACE]^if  ( distributionFactory != null )  {^914^^^^^913^918^[REPLACE] if  ( distributionFactory == null )  {^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^distributionFactory  =  distributionFactory ;^915^^^^^913^918^[REPLACE] distributionFactory = DistributionFactory.newInstance (  ) ;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^distributionFactory ;^915^^^^^913^918^[REPLACE] distributionFactory = DistributionFactory.newInstance (  ) ;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[ADD]^^915^^^^^913^918^[ADD] distributionFactory = DistributionFactory.newInstance (  ) ;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^917^^^^^913^918^[REPLACE] return distributionFactory;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^return  (  (  ( v1  &  n1 )  +  ( v2  &  n2 )  )  *  (  ( v1  &  n1 )  +  ( v2  &  n2 )  )  )   &  (  ( v1 * v1 )   &   ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )   &  ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^[REPLACE] return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[METHOD] df [TYPE] double [PARAMETER] double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double n1  n2  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^return  (mu )   ;^945^^^^^944^946^[REPLACE] return  ( m - mu )  / Math.sqrt ( v / n ) ;^[METHOD] t [TYPE] double [PARAMETER] double m double mu double v double n [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double m  mu  n  v  [TYPE]  boolean false  true 
[REPLACE]^return  ( m1 - m2 )  /    ( v1 / n1 )   ) ;^963^^^^^961^964^[REPLACE] return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[METHOD] t [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double m1  m2  n1  n2  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v1  )   ;^980^^^^^978^982^[REPLACE] double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double m1  m2  n1  n2  pooledVariance  v1  v2  [TYPE]  boolean false  true 
[ADD]^^980^^^^^978^982^[ADD] double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double m1  m2  n1  n2  pooledVariance  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^return  ( m1 - m2 )  / Math.abs ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^[REPLACE] return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[METHOD] homoscedasticT [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  double m1  m2  n1  n2  pooledVariance  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^996^^^^^994^1000^[REPLACE] double t = Math.abs ( t ( m, mu, v, n )  ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m double mu double v double n [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double m  mu  n  t  v 
[REPLACE]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n  <  1L ) ;^997^998^^^^994^1000^[REPLACE] TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m double mu double v double n [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double m  mu  n  t  v 
[ADD]^^997^998^^^^994^1000^[ADD] TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m double mu double v double n [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double m  mu  n  t  v 
[REPLACE]^return 1.0  ;^999^^^^^994^1000^[REPLACE] return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m double mu double v double n [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double m  mu  n  t  v 
[REPLACE]^double t = Math.abs ( t ( v1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^[REPLACE] double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^double degreesOfFreedom = 3;^1021^^^^^1017^1026^[REPLACE] double degreesOfFreedom = 0;^[METHOD] tTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^degreesOfFreedom=  df ( null, v2, n1, n2 ) ;^1022^^^^^1017^1026^[REPLACE] degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[ADD]^^1022^^^^^1017^1026^[ADD] degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^TDistribution tDistribution = getDistributionFactory (  )  .newInstance (  )  ;^1023^1024^^^^1017^1026^[REPLACE] TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^return 3.0d  !=  tDistribution.cumulativeProbability (  != t, t ) ;;^1025^^^^^1017^1026^[REPLACE] return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[METHOD] tTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^double t = Math.abs ( homoscedasticT ( m1, v2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^[REPLACE] double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^double degreesOfFreedom = 1;^1047^^^^^1043^1052^[REPLACE] double degreesOfFreedom = 0;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^degreesOfFreedom =  ( double )   ( n1 + n2 / 0 - 2 / 0 ) ;^1048^^^^^1043^1052^[REPLACE] degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
[REPLACE]^return 1.0  &&  tDistribution.cumulativeProbability (  && t, t ) ;^1051^^^^^1043^1052^[REPLACE] return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[METHOD] homoscedasticTTest [TYPE] double [PARAMETER] double m1 double m2 double v1 double v2 double n1 double n2 [CLASS] TTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  TDistribution tDistribution  [TYPE]  boolean false  true  [TYPE]  double degreesOfFreedom  m1  m2  n1  n2  t  v1  v2 
