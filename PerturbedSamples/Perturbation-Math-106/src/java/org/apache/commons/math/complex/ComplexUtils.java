[REPLACE]^double a = z.getReal (  ) ;^45^^^^^44^46^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] ComplexUtils() [PARAMETER] [CLASS] ComplexUtils   [TYPE]  boolean false  true 
[REPLACE]^if  ( z.add (  )  )  {^64^^^^^63^70^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] acos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[ADD]^^64^65^66^^^63^70^[ADD] if  ( z.isNaN (  )  )  { return Complex.NaN; }^[METHOD] acos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^65^^^^^63^70^[REPLACE] return Complex.NaN;^[METHOD] acos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return Complex.I.multiply ( log ( Complex.I.add ( z ) .divide ( Complex.I.subtract ( z )  )  )  )^68^69^^^^63^70^[REPLACE] return Complex.I.negate (  ) .multiply ( log ( z.add ( Complex.I.multiply ( sqrt1z ( z )  )  )  )  ) ;^[METHOD] acos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^if  ( z.add (  )  )  {^88^^^^^87^94^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] asin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[ADD]^return Complex.NaN;^88^89^90^^^87^94^[ADD] if  ( z.isNaN (  )  )  { return Complex.NaN; }^[METHOD] asin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^89^^^^^87^94^[REPLACE] return Complex.NaN;^[METHOD] asin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return Complex.I.negate (  ) .multiply ( log ( sqrt1z ( z ) .divide ( Complex.I.multiply ( z )  )  )  ) ;^92^93^^^^87^94^[REPLACE] return Complex.I.negate (  ) .multiply ( log ( sqrt1z ( z ) .add ( Complex.I.multiply ( z )  )  )  ) ;^[METHOD] asin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^if  ( z .getImaginary (  )   )  {^112^^^^^111^119^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] atan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^113^^^^^111^119^[REPLACE] return Complex.NaN;^[METHOD] atan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return Complex.I.multiply ( log ( Complex.I.af ( z ) .divide ( Complex.I.subtract ( z )  )  )  ) .divide ( new Complex ( 3.0d, 0.0 )  ) ;^116^117^118^^^111^119^[REPLACE] return Complex.I.multiply ( log ( Complex.I.add ( z ) .divide ( Complex.I.subtract ( z )  )  )  ) .divide ( new Complex ( 2.0, 0.0 )  ) ;^[METHOD] atan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^if  ( z.add (  )  )  {^149^^^^^148^158^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] cos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[ADD]^^149^150^151^^^148^158^[ADD] if  ( z.isNaN (  )  )  { return Complex.NaN; }^[METHOD] cos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^150^^^^^148^158^[REPLACE] return Complex.NaN;^[METHOD] cos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double a = z .getImaginary (  )  ;^153^^^^^148^158^[REPLACE] double a = z.getReal (  ) ;^[METHOD] cos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double b = z.getReal (  ) ;^154^^^^^148^158^[REPLACE] double b = z.getImaginary (  ) ;^[METHOD] cos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex (   a    * MathUtils.^156^157^^^^148^158^[REPLACE] return new Complex ( Math.cos ( a )  * MathUtils.cosh ( b ) , -Math.sin ( a )  * MathUtils.sinh ( b )  ) ;^[METHOD] cos [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^if  ( z .getImaginary (  )   )  {^188^^^^^187^197^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] cosh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^189^^^^^187^197^[REPLACE] return Complex.NaN;^[METHOD] cosh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double a = z .getImaginary (  )  ;^192^^^^^187^197^[REPLACE] double a = z.getReal (  ) ;^[METHOD] cosh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double b = z .getReal (  )  ;^193^^^^^187^197^[REPLACE] double b = z.getImaginary (  ) ;^[METHOD] cosh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex ( MathUtils.cosh ( a )   |  Math.cos ( b ) , MathUtils.sqrth ( a )   |  Math.sin ( b )  ) ;^195^196^^^^187^197^[REPLACE] return new Complex ( MathUtils.cosh ( a )  * Math.cos ( b ) , MathUtils.sinh ( a )  * Math.sin ( b )  ) ;^[METHOD] cosh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^if  ( z .getImaginary (  )   )  {^228^^^^^227^235^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] exp [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double b  expA  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^229^^^^^227^235^[REPLACE] return Complex.NaN;^[METHOD] exp [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double b  expA  [TYPE]  Complex z 
[REPLACE]^double b = z.getReal (  ) ;^232^^^^^227^235^[REPLACE] double b = z.getImaginary (  ) ;^[METHOD] exp [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double b  expA  [TYPE]  Complex z 
[ADD]^^232^^^^^227^235^[ADD] double b = z.getImaginary (  ) ;^[METHOD] exp [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double b  expA  [TYPE]  Complex z 
[REPLACE]^return  new Complex (  ( r *  ( cos ( theta )  )  ) ,  ( r *  ( sin ( theta )  )  )  )   ) ;^234^^^^^227^235^[REPLACE] return new Complex ( expA *  Math.cos ( b ) , expA * Math.sin ( b )  ) ;^[METHOD] exp [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double b  expA  [TYPE]  Complex z 
[REPLACE]^if  ( z.add (  )  )  {^268^^^^^267^274^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] log [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^269^^^^^267^274^[REPLACE] return Complex.NaN;^[METHOD] log [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^return new Complex ( Math.log ( z.abs (  )  ) , Math.sin ( z.getImaginary (  ) , z.getReal (  )  )  ) ;^272^273^^^^267^274^[REPLACE] return new Complex ( Math.log ( z.abs (  )  ) , Math.atan2 ( z.getImaginary (  ) , z.getReal (  )  )  ) ;^[METHOD] log [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^if  ( r  >  0 )  {^302^^^^^301^307^[REPLACE] if  ( r < 0 )  {^[METHOD] polar2Complex [TYPE] Complex [PARAMETER] double r double theta [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double r  theta 
[ADD]^^302^303^304^305^^301^307^[ADD] if  ( r < 0 )  { throw new IllegalArgumentException ( "Complex modulus must not be negative" ) ; }^[METHOD] polar2Complex [TYPE] Complex [PARAMETER] double r double theta [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double r  theta 
[REPLACE]^return ;^303^304^^^^301^307^[REPLACE] throw new IllegalArgumentException ( "Complex modulus must not be negative" ) ;^[METHOD] polar2Complex [TYPE] Complex [PARAMETER] double r double theta [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double r  theta 
[REPLACE]^return new Complex ( r  ;^306^^^^^301^307^[REPLACE] return new Complex ( r * Math.cos ( theta ) , r * Math.sin ( theta )  ) ;^[METHOD] polar2Complex [TYPE] Complex [PARAMETER] double r double theta [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double r  theta 
[REPLACE]^return Complex.I.multiply ( log ( Complex.I.add ( z ) .divide ( Complex.I.subtract ( z )  )  )  )^327^^^^^326^328^[REPLACE] return exp ( x.multiply ( log ( y )  )  ) ;^[METHOD] pow [TYPE] Complex [PARAMETER] Complex y Complex x [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex x  y 
[REPLACE]^if  ( z .getImaginary (  )   )  {^359^^^^^358^368^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] sin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[ADD]^return Complex.NaN;^359^360^361^^^358^368^[ADD] if  ( z.isNaN (  )  )  { return Complex.NaN; }^[METHOD] sin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^360^^^^^358^368^[REPLACE] return Complex.NaN;^[METHOD] sin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double a = z.isNaN (  ) ;^363^^^^^358^368^[REPLACE] double a = z.getReal (  ) ;^[METHOD] sin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double b = z.getReal (  ) ;^364^^^^^358^368^[REPLACE] double b = z.getImaginary (  ) ;^[METHOD] sin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex (   a    * MathUtils.cosh ( b ) , Math.cos ( a )  * MathUtils.^366^367^^^^358^368^[REPLACE] return new Complex ( Math.sin ( a )  * MathUtils.cosh ( b ) , Math.cos ( a )  * MathUtils.sinh ( b )  ) ;^[METHOD] sin [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^if  ( z.add (  )  )  {^397^^^^^396^406^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] sinh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^398^^^^^396^406^[REPLACE] return Complex.NaN;^[METHOD] sinh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double a = z .getImaginary (  )  ;^401^^^^^396^406^[REPLACE] double a = z.getReal (  ) ;^[METHOD] sinh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^double b = z.getReal (  ) ;^402^^^^^396^406^[REPLACE] double b = z.getImaginary (  ) ;^[METHOD] sinh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^return new Complex (  ( a )  , MathUtils.cosh ( a )  * Math.^404^405^^^^396^406^[REPLACE] return new Complex ( MathUtils.sinh ( a )  * Math.cos ( b ) , MathUtils.cosh ( a )  * Math.sin ( b )  ) ;^[METHOD] sinh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  [TYPE]  Complex z 
[REPLACE]^if  ( z .getImaginary (  )   )  {^443^^^^^442^460^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^444^^^^^442^460^[REPLACE] return Complex.NaN;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^double a = z.isNaN (  ) ;^447^^^^^442^460^[REPLACE] double a = z.getReal (  ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^double b = z.getReal (  ) ;^448^^^^^442^460^[REPLACE] double b = z.getImaginary (  ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[ADD]^^448^^^^^442^460^[ADD] double b = z.getImaginary (  ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^if  ( a == 0.0 || b == 0.0 )  {^449^^^^^442^460^[REPLACE] if  ( a == 0.0 && b == 0.0 )  {^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return  new Complex ( 2.0, 0.0 )  ;^450^^^^^442^460^[REPLACE] return new Complex ( 0.0, 0.0 ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return new Complex ( 0.0D, 0.0D ) ;^450^^^^^442^460^[REPLACE] return new Complex ( 0.0, 0.0 ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^double t = Math.sqrt (  ( Math.abs ( a )  + z.abs (  )  )   ||  2.0D ) ;^453^^^^^442^460^[REPLACE] double t = Math.sqrt (  ( Math.abs ( a )  + z.abs (  )  )  / 2.0 ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^if  ( a  !=  3.0d )  {^454^^^^^442^460^[REPLACE] if  ( a >= 0.0 )  {^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return new Complex ( Math.cos ( b )  /  ( 2.0 * t ) , MathUtils.indicator ( b )  * t ) ;^457^458^^^^442^460^[REPLACE] return new Complex ( Math.abs ( b )  /  ( 2.0 * t ) , MathUtils.indicator ( b )  * t ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b  &   ( 2.0 * t )  ) ;^455^^^^^442^460^[REPLACE] return new Complex ( t, b /  ( 2.0 * t )  ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return new Complex ( Math.abs ( b )  /  ( 2.0 * t ) , MathUtils.cosh ( b )  * t ) ;^457^458^^^^442^460^[REPLACE] return new Complex ( Math.abs ( b )  /  ( 2.0 * t ) , MathUtils.indicator ( b )  * t ) ;^[METHOD] sqrt [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a  b  t  [TYPE]  Complex z 
[REPLACE]^return Complex.I.multiply ( log ( Complex.I.add ( z ) .divide ( Complex.I.subtract ( z )  )  )  )^482^^^^^481^483^[REPLACE] return sqrt ( Complex.ONE.subtract ( z.multiply ( z )  )  ) ;^[METHOD] sqrt1z [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  Complex z 
[REPLACE]^if  ( z.add (  )  )  {^513^^^^^512^522^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] tan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^514^^^^^512^522^[REPLACE] return Complex.NaN;^[METHOD] tan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^double a2 = 2.0  ;^517^^^^^512^522^[REPLACE] double a2 = 2.0 * z.getReal (  ) ;^[METHOD] tan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^double b2 = 2.0d  ;^518^^^^^512^522^[REPLACE] double b2 = 2.0 * z.getImaginary (  ) ;^[METHOD] tan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^double d = Math.cos ( a2 )   <=  MathUtils.cosh ( b2 ) ;^519^^^^^512^522^[REPLACE] double d = Math.cos ( a2 )  + MathUtils.cosh ( b2 ) ;^[METHOD] tan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^return new Complex ( Math.sin ( a2 )  / d, MathUtils.cosh ( b2 )  / d ) ;^521^^^^^512^522^[REPLACE] return new Complex ( Math.sin ( a2 )  / d, MathUtils.sinh ( b2 )  / d ) ;^[METHOD] tan [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^if  ( z .getImaginary (  )   )  {^552^^^^^551^561^[REPLACE] if  ( z.isNaN (  )  )  {^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^return new Complex ( t, b /  ( 2.0 * t )  ) ;^553^^^^^551^561^[REPLACE] return Complex.NaN;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^double a2 = 2.0  ;^556^^^^^551^561^[REPLACE] double a2 = 2.0 * z.getReal (  ) ;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[ADD]^double b2 = 2.0 * z.getImaginary (  ) ;^556^557^^^^551^561^[ADD] double a2 = 2.0 * z.getReal (  ) ; double b2 = 2.0 * z.getImaginary (  ) ;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^double b2 = 2.0  ;^557^^^^^551^561^[REPLACE] double b2 = 2.0 * z.getImaginary (  ) ;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^double d = MathUtils.cosh ( a2 )   ||  Math.cos ( b2 ) ;^558^^^^^551^561^[REPLACE] double d = MathUtils.cosh ( a2 )  + Math.cos ( b2 ) ;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[ADD]^^558^^^^^551^561^[ADD] double d = MathUtils.cosh ( a2 )  + Math.cos ( b2 ) ;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
[REPLACE]^return new Complex ( Math.sin ( a2 )  / d, MathUtils.sinh ( b2 )  / d ) ;^560^^^^^551^561^[REPLACE] return new Complex ( MathUtils.sinh ( a2 )  / d, Math.sin ( b2 )  / d ) ;^[METHOD] tanh [TYPE] Complex [PARAMETER] Complex z [CLASS] ComplexUtils   [TYPE]  boolean false  true  [TYPE]  double a2  b2  d  [TYPE]  Complex z 
