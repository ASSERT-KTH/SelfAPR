[REPLACE]^private static  long serialVersionUID = 6751309484392813623L;^34^^^^^^^[REPLACE] private static final long serialVersionUID = 6751309484392813623L;^ [CLASS] PascalDistributionImpl  
[REPLACE]^private float probabilityOfSuccess;^40^^^^^^^[REPLACE] private double probabilityOfSuccess;^ [CLASS] PascalDistributionImpl  
[REPLACE]^setNumberOfSuccesses ( r ) ;^50^^^^^49^53^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] PascalDistributionImpl(int,double) [PARAMETER] int r double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r 
[REPLACE]^setNumberOfSuccesses ( numberOfSuccesses ) ;^51^^^^^49^53^[REPLACE] setNumberOfSuccesses ( r ) ;^[METHOD] <init> [TYPE] PascalDistributionImpl(int,double) [PARAMETER] int r double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r 
[REPLACE]^setProbabilityOfSuccess ( probabilityOfSuccess ) ;^52^^^^^49^53^[REPLACE] setProbabilityOfSuccess ( p ) ;^[METHOD] <init> [TYPE] PascalDistributionImpl(int,double) [PARAMETER] int r double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r 
[REPLACE]^return Integer.MAX_VALUE;^61^^^^^60^62^[REPLACE] return numberOfSuccesses;^[METHOD] getNumberOfSuccesses [TYPE] int [PARAMETER] [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r 
[REPLACE]^return Integer.MAX_VALUE;^70^^^^^69^71^[REPLACE] return probabilityOfSuccess;^[METHOD] getProbabilityOfSuccess [TYPE] double [PARAMETER] [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r 
[REPLACE]^if  ( successes  <= numberOfSuccesses )  {^80^^^^^79^84^[REPLACE] if  ( successes < 0 )  {^[METHOD] setNumberOfSuccesses [TYPE] void [PARAMETER] int successes [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^return ;^81^^^^^79^84^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setNumberOfSuccesses [TYPE] void [PARAMETER] int successes [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^numberOfSuccesses =  null;^83^^^^^79^84^[REPLACE] numberOfSuccesses = successes;^[METHOD] setNumberOfSuccesses [TYPE] void [PARAMETER] int successes [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^if  (  p > 1.0 )  {^94^^^^^93^98^[REPLACE] if  ( p < 0.0 || p > 1.0 )  {^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[ADD]^^94^95^96^^^93^98^[ADD] if  ( p < 0.0 || p > 1.0 )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^return ;^95^^^^^93^98^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^probabilityOfSuccess =  null;^97^^^^^93^98^[REPLACE] probabilityOfSuccess = p;^[METHOD] setProbabilityOfSuccess [TYPE] void [PARAMETER] double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^return -0;^109^^^^^108^110^[REPLACE] return -1;^[METHOD] getDomainLowerBound [TYPE] int [PARAMETER] double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^return Integer.MAX_VALUE  ;^122^^^^^120^123^[REPLACE] return Integer.MAX_VALUE - 1;^[METHOD] getDomainUpperBound [TYPE] int [PARAMETER] double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes 
[REPLACE]^if  ( x  >  0 + 2 )  {^135^^^^^133^144^[REPLACE] if  ( x < 0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  >  1 ) ;^138^139^140^141^^133^144^[REPLACE] ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = 0.0D;^136^^^^^133^144^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = 1.0d;^136^^^^^133^144^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[ADD]^^136^^^^^133^144^[ADD] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  &  1 ) ;^138^139^140^141^^133^144^[REPLACE] ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^return probabilityOfSuccess;^143^^^^^133^144^[REPLACE] return ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^if  ( x  ==  2 )  {^154^^^^^152^164^[REPLACE] if  ( x < 0 )  {^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )   <=  Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )   <=  Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^[REPLACE] ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = 0.0D;^155^^^^^152^164^[REPLACE] ret = 0.0;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )   ==  Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )   ==  Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^[REPLACE] ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^return probabilityOfSuccess;^163^^^^^152^164^[REPLACE] return ret;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^if  ( p  !=  3 )  {^181^^^^^179^190^[REPLACE] if  ( p == 0 )  {^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[ADD]^^181^182^183^^^179^190^[ADD] if  ( p == 0 )  { return -1; }^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^return -1 / 0;^182^^^^^179^190^[REPLACE] return -1;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^return -1 * 1;^182^^^^^179^190^[REPLACE] return -1;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^if  ( probabilityOfSuccess  ||  1 )  {^184^^^^^179^190^[REPLACE] if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^return Integer.MAX_VALUE - 1;^185^^^^^179^190^[REPLACE] return Integer.MAX_VALUE;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
[REPLACE]^return super.inverseCumulativeProbability ( probabilityOfSuccess ) ;^189^^^^^179^190^[REPLACE] return super.inverseCumulativeProbability ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] int [PARAMETER] final double p [CLASS] PascalDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double p  probabilityOfSuccess  ret  [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  r  successes  x 
