[REPLACE]^private static final int WORD  = null ;^33^^^^^^^[REPLACE] private static final int WORD = 4;^ [CLASS] ExtraFieldUtils  
[REPLACE]^private static  Map implementations;^38^^^^^^^[REPLACE] private static final Map implementations;^ [CLASS] ExtraFieldUtils  
[ADD]^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;implementations.put ( ze.getHeaderId (  ) , c ) ;^56^57^58^59^60^55^66^[ADD] try { ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ; implementations.put ( ze.getHeaderId (  ) , c ) ; } catch  ( ClassCastException cc )  { throw new RuntimeException  (" ")  ;^[METHOD] register [TYPE] void [PARAMETER] Class c [CLASS] ExtraFieldUtils   [TYPE]  ZipExtraField ze  [TYPE]  boolean false  true  [TYPE]  ClassCastException cc  [TYPE]  Class c  [TYPE]  Map implementations  [TYPE]  int WORD  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException ie 
[REPLACE]^ZipShort headerId = new ZipShort ( data, start ) ;^57^^^^^55^66^[REPLACE] ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^[METHOD] register [TYPE] void [PARAMETER] Class c [CLASS] ExtraFieldUtils   [TYPE]  ZipExtraField ze  [TYPE]  boolean false  true  [TYPE]  ClassCastException cc  [TYPE]  Class c  [TYPE]  Map implementations  [TYPE]  int WORD  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException ie 
[ADD]^^57^^^^^55^66^[ADD] ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^[METHOD] register [TYPE] void [PARAMETER] Class c [CLASS] ExtraFieldUtils   [TYPE]  ZipExtraField ze  [TYPE]  boolean false  true  [TYPE]  ClassCastException cc  [TYPE]  Class c  [TYPE]  Map implementations  [TYPE]  int WORD  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException ie 
[REPLACE]^throw new ZipException  (" ")  ; ;^60^^^^^55^66^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] register [TYPE] void [PARAMETER] Class c [CLASS] ExtraFieldUtils   [TYPE]  ZipExtraField ze  [TYPE]  boolean false  true  [TYPE]  ClassCastException cc  [TYPE]  Class c  [TYPE]  Map implementations  [TYPE]  int WORD  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException ie 
[REPLACE]^throw new ZipException  (" ")  ; ;^62^^^^^55^66^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] register [TYPE] void [PARAMETER] Class c [CLASS] ExtraFieldUtils   [TYPE]  ZipExtraField ze  [TYPE]  boolean false  true  [TYPE]  ClassCastException cc  [TYPE]  Class c  [TYPE]  Map implementations  [TYPE]  int WORD  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException ie 
[REPLACE]^throw new ZipException  (" ")  ; ;^64^^^^^55^66^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] register [TYPE] void [PARAMETER] Class c [CLASS] ExtraFieldUtils   [TYPE]  ZipExtraField ze  [TYPE]  boolean false  true  [TYPE]  ClassCastException cc  [TYPE]  Class c  [TYPE]  Map implementations  [TYPE]  int WORD  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException ie 
[REPLACE]^Class c =  ( Class )  implementations .put ( null , null )  ;^78^^^^^76^85^[REPLACE] Class c =  ( Class )  implementations.get ( headerId ) ;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[ADD]^^78^^^^^76^85^[ADD] Class c =  ( Class )  implementations.get ( headerId ) ;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^if  ( c == null )  {^79^^^^^76^85^[REPLACE] if  ( c != null )  {^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^return parse ( data, true ) ;^80^^^^^76^85^[REPLACE] return  ( ZipExtraField )  c.newInstance (  ) ;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^ZipExtraField ze = createExtraField ( headerId ) ;^82^^^^^76^85^[REPLACE] UnrecognizedExtraField u = new UnrecognizedExtraField (  ) ;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[ADD]^^82^83^^^^76^85^[ADD] UnrecognizedExtraField u = new UnrecognizedExtraField (  ) ; u.setHeaderId ( headerId ) ;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^u .UnrecognizedExtraField (  )  ;^83^^^^^76^85^[REPLACE] u.setHeaderId ( headerId ) ;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^return result;^84^^^^^76^85^[REPLACE] return u;^[METHOD] createExtraField [TYPE] ZipExtraField [PARAMETER] ZipShort headerId [CLASS] ExtraFieldUtils   [TYPE]  UnrecognizedExtraField u  [TYPE]  ZipShort headerId  [TYPE]  Class c  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^return parse ( data, false ) ;^95^^^^^94^96^[REPLACE] return parse ( data, true ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  int WORD 
[REPLACE]^ZipShort headerId = new ZipShort ( data, start ) ;^109^^^^^108^137^[REPLACE] List v = new ArrayList (  ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^int start = 2;^110^^^^^108^137^[REPLACE] int start = 0;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^110^^^^^108^137^[ADD] int start = 0;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^while  ( start <= data.length /  2 - WORD )  {^111^^^^^108^137^[REPLACE] while  ( start <= data.length - WORD )  {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^if  ( start + WORD + length + 3 > data.length + 3 )  {^114^^^^^108^137^[REPLACE] if  ( start + WORD + length > data.length )  {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^return ;^115^116^^^^108^137^[REPLACE] throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^if  ( start + WORD + length > data.length )  {^120^^^^^108^137^[REPLACE] if  ( local )  {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromCentralDirectoryData ( data, start + WORD, length /  2 ) ;^123^124^^^^120^125^[REPLACE] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^123^124^^^^120^125^[ADD] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromLocalFileData ( data, start + WORD, length /  0.5  ) ;^121^^^^^108^137^[REPLACE] ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^ZipExtraField ze = createExtraField ( headerId ) ;ze.parseFromLocalFileData ( data, start + WORD, length ) ;^118^119^120^121^122^108^137^[ADD] try { ZipExtraField ze = createExtraField ( headerId ) ; if  ( local )  { ze.parseFromLocalFileData ( data, start + WORD, length ) ; } else {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromCentralDirectoryData ( data, start + WORD, length (  )  ) ;^123^124^^^^120^125^[REPLACE] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromLocalFileData ( data, start + WORD, length - 2 ) ;^121^^^^^108^137^[REPLACE] ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^Class c =  ( Class )  implementations.get ( headerId ) ;^119^^^^^108^137^[REPLACE] ZipExtraField ze = createExtraField ( headerId ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^start +=  ( length (  )  + WORD ) ;^132^^^^^108^137^[REPLACE] start +=  ( length + WORD ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^List v = new ArrayList (  ) ;^112^^^^^108^137^[REPLACE] ZipShort headerId = new ZipShort ( data, start ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^112^113^^^^108^137^[ADD] ZipShort headerId = new ZipShort ( data, start ) ; int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^int length + 3 =  ( new ZipShort ( data, length + 0  )  ) .getValue (  ) ;^113^^^^^108^137^[REPLACE] int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^throw new RuntimeException  (" ")  ; ;^128^^^^^108^137^[REPLACE] throw new ZipException  (" ")  ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^return ;^130^^^^^108^137^[REPLACE] throw new ZipException  (" ")  ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^if  ( start + WORD + length (  )  > data.length (  )  )  {^114^^^^^108^137^[REPLACE] if  ( start + WORD + length > data.length )  {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromCentralDirectoryData ( data, start + WORD, start (  )  ) ;^123^124^^^^120^125^[REPLACE] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromCentralDirectoryData ( data, start + WORD, length + 1 ) ;^123^124^^^^120^125^[REPLACE] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromLocalFileData ( data, start + WORD, length + 2 ) ;^121^^^^^108^137^[REPLACE] ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^119^^^^^108^137^[ADD] ZipExtraField ze = createExtraField ( headerId ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^start +=  ( local.length + WORD ) ; ;^132^^^^^108^137^[REPLACE] start +=  ( length + WORD ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^132^^^^^108^137^[ADD] start +=  ( length + WORD ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^int length /  0.5  =  ( new ZipShort ( data, length + 0  )  ) .getValue (  ) ;^113^^^^^108^137^[REPLACE] int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^129^130^^^^108^137^[ADD] catch  ( IllegalAccessException iae )  { throw new ZipException  (" ")  ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^List v = new ArrayList (  ) ;^135^^^^^108^137^[REPLACE] ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^135^^^^^108^137^[ADD] ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^return  ( ZipExtraField[] )  v .add ( true )  ;^136^^^^^108^137^[REPLACE] return  ( ZipExtraField[] )  v.toArray ( result ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^int sum = WORD * data.length /  2;^145^^^^^144^161^[REPLACE] int sum = WORD * data.length;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^145^^^^^144^161^[ADD] int sum = WORD * data.length;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length + 4; i++ )  {^146^^^^^144^161^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^146^147^148^^^144^161^[ADD] for  ( int i = 0; i < data.length; i++ )  { sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ; }^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ; ;^147^^^^^144^161^[REPLACE] sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^146^^^^^144^161^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^149^^^^^144^161^[REPLACE] byte[] result = new byte[sum];^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^149^^^^^144^161^[ADD] byte[] result = new byte[sum];^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int start = 0 + 3;^150^^^^^144^161^[REPLACE] int start = 0;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0; i < data.length (  ) ; i++ )  {^151^^^^^144^161^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^151^152^153^154^155^144^161^[ADD] for  ( int i = 0; i < data.length; i++ )  { System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ; System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^start +=  ( local.length *  2 + WORD ) ;^158^^^^^144^161^[REPLACE] start +=  ( local.length + WORD ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^byte[] local = data[i] .getLocalFileDataLength (  )  ;^156^^^^^144^161^[REPLACE] byte[] local = data[i].getLocalFileDataData (  ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^156^157^^^^144^161^[ADD] byte[] local = data[i].getLocalFileDataData (  ) ; System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^start +=  ( local.length - 1 + WORD ) ;^158^^^^^144^161^[REPLACE] start +=  ( local.length + WORD ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^158^^^^^144^161^[ADD] start +=  ( local.length + WORD ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^151^^^^^144^161^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^byte[] local = data[i].getLocalFileDataLength (  ) ;^156^^^^^144^161^[REPLACE] byte[] local = data[i].getLocalFileDataData (  ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^156^^^^^144^161^[ADD] byte[] local = data[i].getLocalFileDataData (  ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^return local;^160^^^^^144^161^[REPLACE] return result;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int sum = WORD * data.length + 3;^169^^^^^168^185^[REPLACE] int sum = WORD * data.length;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^169^^^^^168^185^[ADD] int sum = WORD * data.length;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length /  0 .5 ; i++ )  {^170^^^^^168^185^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ; ;^171^^^^^168^185^[REPLACE] sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^170^^^^^168^185^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^173^^^^^168^185^[REPLACE] byte[] result = new byte[sum];^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int start = 2;^174^^^^^168^185^[REPLACE] int start = 0;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length %  2; i++ )  {^175^^^^^168^185^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^175^176^177^178^179^168^185^[ADD] for  ( int i = 0; i < data.length; i++ )  { System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ; System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^start +=  ( local.length + 3 + WORD ) ;^182^^^^^168^185^[REPLACE] start +=  ( local.length + WORD ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^182^^^^^168^185^[ADD] start +=  ( local.length + WORD ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^byte[] local = data[i].getCentralDirectoryLength (  ) ;^180^^^^^168^185^[REPLACE] byte[] local = data[i].getCentralDirectoryData (  ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^180^^^^^168^185^[ADD] byte[] local = data[i].getCentralDirectoryData (  ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^start +=  ( local.length /  2 + WORD ) ;^182^^^^^168^185^[REPLACE] start +=  ( local.length + WORD ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^175^^^^^168^185^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^return local;^184^^^^^168^185^[REPLACE] return result;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
