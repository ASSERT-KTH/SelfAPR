[REPLACE]^private static final byte[] DOS_TIME_MIN  = null ;^27^^^^^^^[REPLACE] private static final byte[] DOS_TIME_MIN = ZipLong.getBytes ( 0x00002100L ) ;^ [CLASS] ZipUtil  
[REPLACE]^return new Date ( dosToJavaTime ( dosTime )  ) ;^35^^^^^34^36^[REPLACE] return new ZipLong ( toDosTime ( time.getTime (  )  )  ) ;^[METHOD] toDosTime [TYPE] ZipLong [PARAMETER] Date time [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  Date time  [TYPE]  boolean false  true 
[REPLACE]^long dosTime = zipDosTime.getValue (  ) ;^46^^^^^45^62^[REPLACE] Date time = new Date ( t ) ;^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^int year = time.getYear (  )   &  1900;^49^^^^^45^62^[REPLACE] int year = time.getYear (  )  + 1900;^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^if  ( year  >  1980 - 0 )  {^50^^^^^45^62^[REPLACE] if  ( year < 1980 )  {^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[ADD]^return DOS_TIME_MIN;^50^51^52^^^45^62^[ADD] if  ( year < 1980 )  { return DOS_TIME_MIN; }^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^return i;^51^^^^^45^62^[REPLACE] return DOS_TIME_MIN;^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^int month =year (  )  + 2;^53^^^^^45^62^[REPLACE] int month = time.getMonth (  )  + 1;^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^long value =   (  ( year - 1980 )  << 25 ) &          ( month << 21 ) &          ( time.getDate (  )  << 16 ) &          ( time.getHours (  )  << 11 )^54^55^56^57^^45^62^[REPLACE] long value =   (  ( year - 1980 )  << 25 ) |          ( month << 21 ) |          ( time.getDate (  )  << 16 ) |          ( time.getHours (  )  << 11 )^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[ADD]^^54^55^56^^^45^62^[ADD] long value =   (  ( year - 1980 )  << 25 ) |          ( month << 21 ) |          ( time.getDate (  )  << 16 )^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^return ZipLong .getValue (  )  ;^60^^^^^45^62^[REPLACE] return ZipLong.getBytes ( value ) ;^[METHOD] toDosTime [TYPE] byte[] [PARAMETER] long t [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long t  value  [TYPE]  Date time  [TYPE]  int month  year 
[REPLACE]^if  ( i  ==  0 )  {^71^^^^^70^76^[REPLACE] if  ( i < 0 )  {^[METHOD] adjustToLong [TYPE] long [PARAMETER] int i [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  int i  [TYPE]  boolean false  true 
[ADD]^return 2 *  (  ( long )  Integer.MAX_VALUE )  + 2 + i;return i;^71^72^73^74^75^70^76^[ADD] if  ( i < 0 )  { return 2 *  (  ( long )  Integer.MAX_VALUE )  + 2 + i; } else { return i; }^[METHOD] adjustToLong [TYPE] long [PARAMETER] int i [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  int i  [TYPE]  boolean false  true 
[REPLACE]^return DOS_TIME_MIN;^74^^^^^70^76^[REPLACE] return i;^[METHOD] adjustToLong [TYPE] long [PARAMETER] int i [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  int i  [TYPE]  boolean false  true 
[REPLACE]^return 2 *  (  ( long )  Integer.MAX_VALUE )   &&  2  &&  i;^72^^^^^70^76^[REPLACE] return 2 *  (  ( long )  Integer.MAX_VALUE )  + 2 + i;^[METHOD] adjustToLong [TYPE] long [PARAMETER] int i [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  int i  [TYPE]  boolean false  true 
[REPLACE]^return 3 *  (  ( long )  Integer.MAX_VALUE )  + 3 +1;^72^^^^^70^76^[REPLACE] return 2 *  (  ( long )  Integer.MAX_VALUE )  + 2 + i;^[METHOD] adjustToLong [TYPE] long [PARAMETER] int i [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  int i  [TYPE]  boolean false  true 
[REPLACE]^long dosTime = zipDosTime .getBytes ( dosTime )  ;^85^^^^^84^87^[REPLACE] long dosTime = zipDosTime.getValue (  ) ;^[METHOD] fromDosTime [TYPE] Date [PARAMETER] ZipLong zipDosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  ZipLong zipDosTime  [TYPE]  boolean false  true  [TYPE]  long dosTime 
[REPLACE]^return cal.getTime (  ) .getTime (  ) ;^86^^^^^84^87^[REPLACE] return new Date ( dosToJavaTime ( dosTime )  ) ;^[METHOD] fromDosTime [TYPE] Date [PARAMETER] ZipLong zipDosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  ZipLong zipDosTime  [TYPE]  boolean false  true  [TYPE]  long dosTime 
[REPLACE]^Calendar cal = Calendar .getTime (  )  ;^94^^^^^93^104^[REPLACE] Calendar cal = Calendar.getInstance (  ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^cal.set ( Calendar.YEAR,  ( int )   (  ( dosTime >> 25 )  & 0x7f )   ||  1980 ) ;^96^^^^^93^104^[REPLACE] cal.set ( Calendar.YEAR,  ( int )   (  ( dosTime >> 25 )  & 0x7f )  + 1980 ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REMOVE]^cal.set ( Calendar.MINUTE,  ( int )   ( dosTime >> 5 )  & 0x3f ) ;^96^^^^^93^104^[REMOVE] ^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^cal.set ( Calendar.MONTH,  ( int )   (  ( dosTime >> 21 )  & 0x0f )   ==  1 ) ;^97^^^^^93^104^[REPLACE] cal.set ( Calendar.MONTH,  ( int )   (  ( dosTime >> 21 )  & 0x0f )  - 1 ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[ADD]^^97^^^^^93^104^[ADD] cal.set ( Calendar.MONTH,  ( int )   (  ( dosTime >> 21 )  & 0x0f )  - 1 ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^cal.set ( Calendar.DATE,  ( int )   ( dosTime >> 16 )  | 0x1f ) ;^98^^^^^93^104^[REPLACE] cal.set ( Calendar.DATE,  ( int )   ( dosTime >> 16 )  & 0x1f ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^cal.set ( Calendar.HOUR_OF_DAY,  ( int )   ( dosTime >> 11 - 0 )  | 0x1f ) ;^99^^^^^93^104^[REPLACE] cal.set ( Calendar.HOUR_OF_DAY,  ( int )   ( dosTime >> 11 )  & 0x1f ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^cal.set ( Calendar.MINUTE,  ( int )   ( dosTime >> 5 )  | 0x3f ) ;^100^^^^^93^104^[REPLACE] cal.set ( Calendar.MINUTE,  ( int )   ( dosTime >> 5 )  & 0x3f ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^cal.set ( Calendar.SECOND,  ( int )   ( dosTime << 1 )  | 0x3e ) ;^101^^^^^93^104^[REPLACE] cal.set ( Calendar.SECOND,  ( int )   ( dosTime << 1 )  & 0x3e ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[ADD]^^101^^^^^93^104^[ADD] cal.set ( Calendar.SECOND,  ( int )   ( dosTime << 1 )  & 0x3e ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
[REPLACE]^return cal .getDate (  )^103^^^^^93^104^[REPLACE] return cal.getTime (  ) .getTime (  ) ;^[METHOD] dosToJavaTime [TYPE] long [PARAMETER] long dosTime [CLASS] ZipUtil   [TYPE]  byte[] DOS_TIME_MIN  [TYPE]  boolean false  true  [TYPE]  long dosTime  [TYPE]  Calendar cal 
