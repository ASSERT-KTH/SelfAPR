[REPLACE]^private static final int BYTE_MASK  = null ;^28^^^^^^^[REPLACE] private static final int BYTE_MASK = 255;^ [CLASS] TarUtils  
[REPLACE]^long    result = 0L;^40^^^^^39^66^[REPLACE] long    result = 0;^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^boolean stillPadding = false;^41^^^^^39^66^[REPLACE] boolean stillPadding = true;^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^int     end = offset + length + 3;^42^^^^^39^66^[REPLACE] int     end = offset + length;^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( header[i]  ||  0 )  {^45^^^^^39^66^[REPLACE] if  ( header[i] == 0 )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REMOVE]^if  (  ( header[i] )  ==  (  ( byte )   ( ' ' )  )  )  {     break; }^45^^^^^39^66^[REMOVE] ^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  (  header[i] == '0' )  {^49^^^^^39^66^[REPLACE] if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( value == 0 )  {^50^^^^^39^66^[REPLACE] if  ( stillPadding )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( header[i]  ||   ( byte )  ' ' )  {^54^^^^^39^66^[REPLACE] if  ( header[i] ==  ( byte )  ' ' )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( true )  {^50^^^^^39^66^[REPLACE] if  ( stillPadding )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( header[i]  !=   ( byte )  ' ' )  {^54^^^^^39^66^[REPLACE] if  ( header[i] ==  ( byte )  ' ' )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[ADD]^break;^54^55^56^^^39^66^[ADD] if  ( header[i] ==  ( byte )  ' ' )  { break; }^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^for  ( int i = offset; i  >  end; ++i )  {^44^^^^^39^66^[REPLACE] for  ( int i = offset; i < end; ++i )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( header[i]  !=  0 )  {^45^^^^^39^66^[REPLACE] if  ( header[i] == 0 )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^if  ( header[i] ==  ( byte )  ' ' &&true )  {^49^^^^^39^66^[REPLACE] if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[ADD]^continue;^50^51^52^^^39^66^[ADD] if  ( stillPadding )  { continue; }^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^stillPadding = true;^59^^^^^39^66^[REPLACE] stillPadding = false;^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^result =  (result )  +  ( header[i] - '0' ) ;^61^^^^^39^66^[REPLACE] result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^for  ( int i = 0; i < buf.length; ++i )  { sum += BYTE_MASK & buf[i];^44^^^^^39^66^[REPLACE] for  ( int i = offset; i < end; ++i )  {^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^return offset + length;^65^^^^^39^66^[REPLACE] return result;^[METHOD] parseOctal [TYPE] long [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  boolean false  stillPadding  true  [TYPE]  int BYTE_MASK  end  i  length  offset  [TYPE]  long result 
[REPLACE]^StringBuffer result = new StringBuffer ( end ) ;^77^^^^^76^89^[REPLACE] StringBuffer result = new StringBuffer ( length ) ;^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^int          end = offset + length (  ) ;^78^^^^^76^89^[REPLACE] int          end = offset + length;^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^if  ( header[i]  ||  2 )  {^81^^^^^76^89^[REPLACE] if  ( header[i] == 0 )  {^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^for  ( int i = offset; i  !=  end; ++i )  {^80^^^^^76^89^[REPLACE] for  ( int i = offset; i < end; ++i )  {^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^if  ( header[i]  ||  0 )  {^81^^^^^76^89^[REPLACE] if  ( header[i] == 0 )  {^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[ADD]^^81^82^83^^^76^89^[ADD] if  ( header[i] == 0 )  { break; }^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^for  ( int i = 0; i < buf.length; ++i )  { sum += BYTE_MASK & buf[i];^80^^^^^76^89^[REPLACE] for  ( int i = offset; i < end; ++i )  {^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^return offset + length;^88^^^^^76^89^[REPLACE] return result;^[METHOD] parseName [TYPE] StringBuffer [PARAMETER] byte[] header int offset int length [CLASS] TarUtils   [TYPE]  byte[] header  [TYPE]  StringBuffer result  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^boolean stillPadding = true;^101^^^^^100^112^[REPLACE] int i;^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^for  ( i = 0; i < length && i < name.length (  )  + 3; ++i )  {^103^^^^^100^112^[REPLACE] for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^buf[offset  <  i] =  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^[REPLACE] buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^for  ( i = 0 ; i < length && i < name.length (  ) ; ++i )  {^103^^^^^100^112^[REPLACE] for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^buf[offset  !=  i] =  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^[REPLACE] buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^for  ( ; i < length - 3; ++i )  {^107^^^^^100^112^[REPLACE] for  ( ; i < length; ++i )  {^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^buf[offset  ||  i] = 0;^108^^^^^100^112^[REPLACE] buf[offset + i] = 0;^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^buf[offset  ||  i] = 0 >>> 2;^108^^^^^100^112^[REPLACE] buf[offset + i] = 0;^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^return offset + end *  2;^111^^^^^100^112^[REPLACE] return offset + length;^[METHOD] getNameBytes [TYPE] int [PARAMETER] StringBuffer name byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  StringBuffer name  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  length  offset 
[REPLACE]^int    idx = end %  2 - 1;^124^^^^^123^148^[REPLACE] int    idx = length - 1;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^124^^^^^123^148^[ADD] int    idx = length - 1;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  <=  idx] = 0;^126^^^^^123^148^[REPLACE] buf[offset + idx] = 0;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  >=  idx] =  ( byte )  ' ';^128^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )  ' ';^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^if  ( value  !=  1 )  {^131^^^^^123^148^[REPLACE] if  ( value == 0 )  {^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^131^132^133^134^^123^148^[ADD] if  ( value == 0 )  { buf[offset + idx] =  ( byte )  '0'; --idx; } else {^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^for  ( long val = value; i >= 0 ;^135^^^^^123^148^[REPLACE] for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  !=  idx] =  ( byte )   (  ( byte )  '0'  !=   ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^137^138^^^^123^148^[ADD] buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ; val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^val = val  !=  3;^138^^^^^123^148^[REPLACE] val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^138^^^^^123^148^[ADD] val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  ||  idx] =  ( byte )   (  ( byte )  '0'  ||   ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^val =value  !=  3;^138^^^^^123^148^[REPLACE] val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^for  ( long val = val; idx >= 0 && val > 0; --idx )  {^135^^^^^123^148^[REPLACE] for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  ==  idx] =  ( byte )  '0';^132^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )  '0';^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^for  ( long val = value; idx >= 0 ;^135^^^^^123^148^[REPLACE] for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^135^136^137^138^^123^148^[ADD] for  ( long val = value; idx >= 0 && val > 0; --idx )  {  buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ; val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  &  idx] =  ( byte )   (  ( byte )  '0'  &   ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^val =value  ==  3;^138^^^^^123^148^[REPLACE] val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  &  idx] =  ( byte )  '0';^132^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )  '0';^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^132^133^^^^123^148^[ADD] buf[offset + idx] =  ( byte )  '0'; --idx;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  <=  idx] =  ( byte )   (  ( byte )  '0'  <=   ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^val =value  >=  3;^138^^^^^123^148^[REPLACE] val = val >> 3;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^for  ( ; i  == i; --idx )  {^143^^^^^123^148^[REPLACE] for  ( ; idx >= 0; --idx )  {^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset  |  idx] =  ( byte )  ' ';^144^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )  ' ';^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^buf[offset + idx] =  ( byte )  '0'; ;^144^^^^^123^148^[REPLACE] buf[offset + idx] =  ( byte )  ' ';^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[ADD]^^144^^^^^123^148^[ADD] buf[offset + idx] =  ( byte )  ' ';^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^return offset + end + 5;^147^^^^^123^148^[REPLACE] return offset + length;^[METHOD] getOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long val  value 
[REPLACE]^byte[] temp = new byte[length (  )  + 0 ];^160^^^^^159^166^[REPLACE] byte[] temp = new byte[length + 1];^[METHOD] getLongOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  temp  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^getOctalBytes ( value, temp, 0, length %  2 + 1 ) ;^162^^^^^159^166^[REPLACE] getOctalBytes ( value, temp, 0, length + 1 ) ;^[METHOD] getLongOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  temp  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^System.arraycopy ( temp, 0 , buf, offset, length ) ;^163^^^^^159^166^[REPLACE] System.arraycopy ( temp, 0, buf, offset, length ) ;^[METHOD] getLongOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  temp  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^return offset + length (  ) ;^165^^^^^159^166^[REPLACE] return offset + length;^[METHOD] getLongOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  temp  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^getOctalBytes ( value, buf, offset, end ) ;^178^^^^^177^184^[REPLACE] getOctalBytes ( value, buf, offset, length ) ;^[METHOD] getCheckSumOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^buf[offset + length *  0.5  - 1] =  ( byte )  ' ';^180^^^^^177^184^[REPLACE] buf[offset + length - 1] =  ( byte )  ' ';^[METHOD] getCheckSumOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^buf[offset + length + 3 - 0 ] = 0;^181^^^^^177^184^[REPLACE] buf[offset + length - 2] = 0;^[METHOD] getCheckSumOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^return offset + length /  0.5 ;^183^^^^^177^184^[REPLACE] return offset + length;^[METHOD] getCheckSumOctalBytes [TYPE] int [PARAMETER] long value byte[] buf int offset int length [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long value 
[REPLACE]^long sum = 1;^193^^^^^192^200^[REPLACE] long sum = 0;^[METHOD] computeCheckSum [TYPE] long [PARAMETER] byte[] buf [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long sum 
[REPLACE]^for  ( idxnt i = 0 ; i < buf.length - 5; ++i )  {^195^^^^^192^200^[REPLACE] for  ( int i = 0; i < buf.length; ++i )  {^[METHOD] computeCheckSum [TYPE] long [PARAMETER] byte[] buf [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long sum 
[REPLACE]^sum += BYTE_MASK | buf[i];^196^^^^^192^200^[REPLACE] sum += BYTE_MASK & buf[i];^[METHOD] computeCheckSum [TYPE] long [PARAMETER] byte[] buf [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long sum 
[REPLACE]^sum +=length | buf[i];^196^^^^^192^200^[REPLACE] sum += BYTE_MASK & buf[i];^[METHOD] computeCheckSum [TYPE] long [PARAMETER] byte[] buf [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long sum 
[REPLACE]^for  ( int i = 0 ; i < buf.length; ++i )  {^195^^^^^192^200^[REPLACE] for  ( int i = 0; i < buf.length; ++i )  {^[METHOD] computeCheckSum [TYPE] long [PARAMETER] byte[] buf [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long sum 
[REPLACE]^return offset + length;^199^^^^^192^200^[REPLACE] return sum;^[METHOD] computeCheckSum [TYPE] long [PARAMETER] byte[] buf [CLASS] TarUtils   [TYPE]  byte[] buf  [TYPE]  boolean false  true  [TYPE]  int BYTE_MASK  end  i  idx  length  offset  [TYPE]  long sum 
