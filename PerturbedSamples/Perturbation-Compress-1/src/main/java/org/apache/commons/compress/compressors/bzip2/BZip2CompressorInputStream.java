[REPLACE]^private  long  last;^42^^^^^^^[REPLACE] private int last;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  long  origPtr;^47^^^^^^^[REPLACE] private int origPtr;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  long  bsBuff;^57^^^^^^^[REPLACE] private int bsBuff;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private final CRC crc  = null ;^59^^^^^^^[REPLACE] private final CRC crc = new CRC (  ) ;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private int currentChar ;^65^^^^^^^[REPLACE] private int currentChar = -1;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int EOF  = null ;^67^^^^^^^[REPLACE] private static final int EOF = 0;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int START_BLOCK_STATE = 1 - 2;^68^^^^^^^[REPLACE] private static final int START_BLOCK_STATE = 1;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int RAND_PART_A_STATE ;^69^^^^^^^[REPLACE] private static final int RAND_PART_A_STATE = 2;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final  short  RAND_PART_B_STATE = 3 - 0;^70^^^^^^^[REPLACE] private static final int RAND_PART_B_STATE = 3;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int RAND_PART_C_STATE ;^71^^^^^^^[REPLACE] private static final int RAND_PART_C_STATE = 4;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int NO_RAND_PART_A_STATE = 7;^72^^^^^^^[REPLACE] private static final int NO_RAND_PART_A_STATE = 5;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static  int NO_RAND_PART_B_STATE = 1;^73^^^^^^^[REPLACE] private static final int NO_RAND_PART_B_STATE = 6;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int NO_RAND_PART_C_STATE ;^74^^^^^^^[REPLACE] private static final int NO_RAND_PART_C_STATE = 7;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  long  currentState = START_BLOCK_STATE;^76^^^^^^^[REPLACE] private int currentState = START_BLOCK_STATE;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  long  computedBlockCRC, computedCombinedCRC;^79^^^^^^^[REPLACE] private int computedBlockCRC, computedCombinedCRC;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  short  su_chPrev;^85^^^^^^^[REPLACE] private int su_chPrev;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  short  su_rTPos;^89^^^^^^^[REPLACE] private int su_rTPos;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final boolean[] inUse = new boolean[256 * 3];^913^^^^^^^[REPLACE] final boolean[] inUse = new boolean[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^byte[] seqToUnseq = new byte[256];^915^^^^^^^[REPLACE] final byte[] seqToUnseq = new byte[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final byte[] selector ;^916^^^^^^^[REPLACE] final byte[] selector = new byte[MAX_SELECTORS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final byte[] selectorMtf  = null ;^917^^^^^^^[REPLACE] final byte[] selectorMtf = new byte[MAX_SELECTORS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[] unzftab  = null ;^923^^^^^^^[REPLACE] final int[] unzftab = new int[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[][] limit  = null ;^925^^^^^^^[REPLACE] final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[][] base ;^926^^^^^^^[REPLACE] final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[][] perm  = null ;^927^^^^^^^[REPLACE] final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[] minLens ;^928^^^^^^^[REPLACE] final int[] minLens = new int[N_GROUPS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[] cftab  = null ;^930^^^^^^^[REPLACE] final int[] cftab = new int[257];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final char[] getAndMoveToFrontDecode_yy  = null ;^931^^^^^^^[REPLACE] final char[] getAndMoveToFrontDecode_yy = new char[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final char[][] temp_charArray2d  = null ;^932^^^^^^^[REPLACE] final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final byte[] recvDecodingTables_pos ;^934^^^^^^^[REPLACE] final byte[] recvDecodingTables_pos = new byte[N_GROUPS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^this.origPtr = bsR ( 24 ) ;^115^^^^^114^119^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] InputStream) [PARAMETER] InputStream in [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.in = null; ;^117^^^^^114^119^[REPLACE] this.in = in;^[METHOD] <init> [TYPE] InputStream) [PARAMETER] InputStream in [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^117^^^^^114^119^[ADD] this.in = in;^[METHOD] <init> [TYPE] InputStream) [PARAMETER] InputStream in [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.origPtr = bsR ( 24 ) ;^118^^^^^114^119^[REPLACE] init (  ) ;^[METHOD] <init> [TYPE] InputStream) [PARAMETER] InputStream in [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.origPtr = bsR ( 24 ) ;^946^^^^^945^949^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] BZip2CompressorInputStream$Data(int) [PARAMETER] int blockSize100k [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.ll8 = new byte[blockSize100k  ;^948^^^^^945^949^[REPLACE] this.ll8 = new byte[blockSize100k * BZip2Constants.baseBlockSize];^[METHOD] <init> [TYPE] BZip2CompressorInputStream$Data(int) [PARAMETER] int blockSize100k [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.in == null )  {^127^^^^^126^132^[REPLACE] if  ( this.in != null )  {^[METHOD] read [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^return read0 (  ) ;^127^128^129^130^131^126^132^[ADD] if  ( this.in != null )  { return read0 (  ) ; } else { throw new IOException  (" ")  ; }^[METHOD] read [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^130^^^^^126^132^[REPLACE] throw new IOException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return;^128^^^^^126^132^[REPLACE] return read0 (  ) ;^[METHOD] read [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^130^^^^^126^132^[REPLACE] throw new IOException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( storedBlockCRC  >  3 )  {^141^^^^^139^162^[REPLACE] if  ( offs < 0 )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^142^^^^^139^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^142^^^^^139^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( len  > su_rNToGo )  {^144^^^^^139^162^[REPLACE] if  ( len < 0 )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^145^^^^^139^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^145^^^^^139^162^[ADD] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( offs + len > dest.length /  2 )  {^147^^^^^139^162^[REPLACE] if  ( offs + len > dest.length )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^148^149^^^^139^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.in != true )  {^151^^^^^139^162^[REPLACE] if  ( this.in == null )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^151^152^153^^^139^162^[ADD] if  ( this.in == null )  { throw new IOException  (" ")  ; }^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^152^^^^^139^162^[REPLACE] throw new IOException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^152^^^^^139^162^[REPLACE] throw new IOException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int hi =su_tPos + len;^155^^^^^139^162^[REPLACE] final int hi = offs + len;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^155^156^^^^139^162^[ADD] final int hi = offs + len; int destOffs = offs;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int destOffs = su_tPos;^156^^^^^139^162^[REPLACE] int destOffs = offs;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int b;  (true )  ;^157^^^^^139^162^[REPLACE] for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^dest[destOffs++] =   ( byte )  b;^158^^^^^139^162^[REPLACE] dest[destOffs++] =  ( byte )  b;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  (  long  b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^[REPLACE] for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i < 16; i++ )  { if  ( bsGetBit (  )  )  {^157^^^^^139^162^[REPLACE] for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return  ( destOffs  &&  offs )  ? -3 :  ( destOffs - offs ) ;^161^^^^^139^162^[REPLACE] return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^165^^^^^164^176^[REPLACE] final boolean[] inUse = this.data.inUse;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = this.nInUse + 2;^166^^^^^164^176^[REPLACE] final byte[] seqToUnseq = this.data.seqToUnseq;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int nInUseShadow = 0L;^168^^^^^164^176^[REPLACE] int nInUseShadow = 0;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inUse[i] ) selectorMtf[nInUseShadow++] =  ( byte )  i;^171^172^^^^164^176^[REPLACE] if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^seqToUnseq[nInUseShadow++] =   ( byte )  i;^172^^^^^164^176^[REPLACE] seqToUnseq[nInUseShadow++] =  ( byte )  i;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i  >  256; i++ )  {^170^^^^^164^176^[REPLACE] for  ( int i = 0; i < 256; i++ )  {^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inShadow != null )  {^171^172^^^^164^176^[REPLACE] if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^seqToUnseq[nInUseShadow++] =  ( byte )  i;^171^172^173^^^164^176^[ADD] if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i; }^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 4; i < 256; i++ )  {^170^^^^^164^176^[REPLACE] for  ( int i = 0; i < 256; i++ )  {^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.nInUse =  len;^175^^^^^164^176^[REPLACE] this.nInUse = nInUseShadow;^[METHOD] makeMaps [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^179^^^^^178^215^[REPLACE] final int retChar = this.currentChar;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^179^^^^^178^215^[ADD] final int retChar = this.currentChar;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return -1 - 3;^183^^^^^178^215^[REPLACE] return -1;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^186^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^186^^^^^178^215^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^189^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^200^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^200^^^^^178^215^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^211^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return su_rNToGo;^214^^^^^178^215^[REPLACE] return retChar;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( null != in )  {^218^^^^^217^238^[REPLACE] if  ( null == in )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REMOVE]^if  ( lastShadow >= limitLast )  {     throw new IOException ( "block overrun" ) ; }^218^^^^^217^238^[REMOVE] ^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^219^^^^^217^238^[REPLACE] throw new IOException  (" ")  ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^219^^^^^217^238^[ADD] throw new IOException  (" ")  ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (origPtr (  )   !=  0 )  {^221^^^^^217^238^[REPLACE] if  ( in.available (  )  == 0 )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^222^^^^^217^238^[REPLACE] throw new IOException  (" ")  ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  ) ;^224^^^^^217^238^[REPLACE] checkMagicChar ( 'B', "first" ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^checkMagicChar ( 'B', "first" ) ;^225^^^^^217^238^[REPLACE] checkMagicChar ( 'Z', "second" ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^checkMagicChar ( 'B', "first" ) ;^226^^^^^217^238^[REPLACE] checkMagicChar ( 'h', "third" ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int blockSize = this.in.close (  ) ;^228^^^^^217^238^[REPLACE] int blockSize = this.in.read (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  (true )  &&  ( blockSize > '9' )  )  {^229^^^^^217^238^[REPLACE] if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^229^230^231^232^^217^238^[ADD] if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  { throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ; }^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" ;^230^231^^^^217^238^[REPLACE] throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^230^231^232^^^217^238^[ADD] throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ; }^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockSize100k =nInUse - '0';^234^^^^^217^238^[REPLACE] this.blockSize100k = blockSize - '0';^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedBlockCRC = bsGetInt (  ) ;^236^^^^^217^238^[REPLACE] initBlock (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedBlockCRC = bsGetInt (  ) ;^237^^^^^217^238^[REPLACE] setupBlock (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REMOVE]^this.storedBlockCRC = bsGetInt (  ) ;^237^^^^^217^238^[REMOVE] ^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int magic = this.in.close (  ) ;^242^^^^^240^248^[REPLACE] int magic = this.in.read (  ) ;^[METHOD] checkMagicChar [TYPE] void [PARAMETER] char expected String position [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  String position  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( magic  ==  expected )  {^243^^^^^240^248^[REPLACE] if  ( magic != expected )  {^[METHOD] checkMagicChar [TYPE] void [PARAMETER] char expected String position [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  String position  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" ;^244^245^246^^^240^248^[REPLACE] throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[METHOD] checkMagicChar [TYPE] void [PARAMETER] char expected String position [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  String position  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^244^245^246^^^240^248^[REPLACE] throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[METHOD] checkMagicChar [TYPE] void [PARAMETER] char expected String position [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  String position  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic1 = bsGetUByte (  ) ;^251^^^^^250^288^[REPLACE] char magic0 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^251^^^^^250^288^[ADD] char magic0 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  ) ;^252^^^^^250^288^[REPLACE] char magic1 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  ) ;^253^^^^^250^288^[REPLACE] char magic2 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  ) ;^254^^^^^250^288^[REPLACE] char magic3 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  ) ;^255^^^^^250^288^[REPLACE] char magic4 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^255^^^^^250^288^[ADD] char magic4 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  ) ;^256^^^^^250^288^[REPLACE] char magic5 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( magic0 == 0x17 || magic1 == 0x72 || magic5 == 0x45 || magic3 == 0x38 || magic4 == 0x50 || magic5 == 0x90 )  {^258^259^^^^250^288^[REPLACE] if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( magic0 != 0x31 && magic1 != 0x41 && magic2 != 0x59 && magic3 != 0x26 &&^261^262^263^264^^250^288^[REPLACE] } else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.data != null )  {^278^^^^^261^287^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data  = null ;^279^^^^^261^287^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedCombinedCRC = bsGetInt (  ) ; ;^271^^^^^261^287^[REPLACE] this.storedBlockCRC = bsGetInt (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^271^^^^^261^287^[ADD] this.storedBlockCRC = bsGetInt (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR ( 1 )   ||  1;^272^^^^^261^287^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data  =  this.data ;^279^^^^^261^287^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^286^^^^^261^287^[REPLACE] this.currentState = START_BLOCK_STATE;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^286^^^^^261^287^[ADD] this.currentState = START_BLOCK_STATE;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState ;^268^^^^^261^287^[REPLACE] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^269^^^^^261^287^[REPLACE] throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.data != this )  {^278^^^^^250^288^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data  =  this.data ;^279^^^^^250^288^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState  = null ;^268^^^^^250^288^[REPLACE] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^268^^^^^250^288^[ADD] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedCombinedCRC = bsGetInt (  ) ; ;^271^^^^^250^288^[REPLACE] this.storedBlockCRC = bsGetInt (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR ( 1 )   &&  1;^272^^^^^250^288^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data  = null ;^279^^^^^250^288^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^286^^^^^250^288^[REPLACE] this.currentState = START_BLOCK_STATE;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^269^^^^^250^288^[REPLACE] throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^getAndMoveToFrontDecode (  ) ;^260^^^^^258^287^[REPLACE] complete (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REMOVE]^this.origPtr = bsR ( 24 ) ;^260^^^^^258^287^[REMOVE] ^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (data != null )  {^278^^^^^261^287^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR ( 1 )   &&  1;^272^^^^^261^287^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^272^^^^^261^287^[ADD] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data ;^279^^^^^261^287^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState  =  this.currentState ;^268^^^^^261^287^[REPLACE] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.data !=data )  {^278^^^^^250^288^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState  =  this.currentState ;^268^^^^^250^288^[REPLACE] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR (su_chPrev )   || su_chPrev;^272^^^^^250^288^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^269^^^^^250^288^[REPLACE] throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedBlockCRC  =  this.computedBlockCRC ;^291^^^^^290^307^[REPLACE] this.computedBlockCRC = this.crc.getFinalCRC (  ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.storedBlockCRC  ==  this.computedBlockCRC )  {^294^^^^^290^307^[REPLACE] if  ( this.storedBlockCRC != this.computedBlockCRC )  {^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC =  (su_tPos ) &  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^[REPLACE] this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^297^298^^^^290^307^[ADD] this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC ^= this.computedBlockCRC; ;^299^^^^^290^307^[REPLACE] this.computedCombinedCRC ^= this.storedBlockCRC;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^301^^^^^290^307^[REPLACE] throw new IOException  (" ")  ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) &  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^[REPLACE] this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^299^^^^^290^307^[ADD] this.computedCombinedCRC ^= this.storedBlockCRC;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^301^^^^^290^307^[REPLACE] throw new IOException  (" ")  ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 * 2 ) &  ( this.computedCombinedCRC >>> 31 * 2 ) ;^304^305^^^^290^307^[REPLACE] this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC ^= this.storedBlockCRC; ;^306^^^^^290^307^[REPLACE] this.computedCombinedCRC ^= this.computedBlockCRC;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedBlockCRC = bsGetInt (  ) ; ;^310^^^^^309^317^[REPLACE] this.storedCombinedCRC = bsGetInt (  ) ;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState  =  this.currentState ;^311^^^^^309^317^[REPLACE] this.currentState = EOF;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data = false;^312^^^^^309^317^[REPLACE] this.data = null;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^312^^^^^309^317^[ADD] this.data = null;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.storedCombinedCRC  ==  this.computedCombinedCRC )  {^314^^^^^309^317^[REPLACE] if  ( this.storedCombinedCRC != this.computedCombinedCRC )  {^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^315^^^^^309^317^[REPLACE] throw new IOException  (" ")  ;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^315^^^^^309^317^[ADD] throw new IOException  (" ")  ;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^315^^^^^309^317^[REPLACE] throw new IOException  (" ")  ;^[METHOD] complete [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^320^^^^^319^331^[REPLACE] InputStream inShadow = this.in;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inShadow ==in )  {^321^^^^^319^331^[REPLACE] if  ( inShadow != null )  {^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inShadow  ==  System.in )  {^323^^^^^319^331^[REPLACE] if  ( inShadow != System.in )  {^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inShadow.read (  ) ;^324^^^^^319^331^[REPLACE] inShadow.close (  ) ;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^inShadow.close (  ) ;^322^323^324^325^^319^331^[ADD] try { if  ( inShadow != System.in )  { inShadow.close (  ) ; }^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^inShadow.close (  ) ;^323^324^325^^^319^331^[ADD] if  ( inShadow != System.in )  { inShadow.close (  ) ; }^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inShadow .available (  )  ;^324^^^^^319^331^[REPLACE] inShadow.close (  ) ;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^324^^^^^319^331^[ADD] inShadow.close (  ) ;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.data = false;^327^^^^^319^331^[REPLACE] this.data = null;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.in = false;^328^^^^^319^331^[REPLACE] this.in = null;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.in = null; ;^327^^^^^319^331^[REPLACE] this.data = null;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.in = this;^328^^^^^319^331^[REPLACE] this.in = null;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^328^^^^^319^331^[ADD] this.in = null;^[METHOD] close [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^334^^^^^333^355^[REPLACE] int bsLiveShadow = this.bsLive;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^335^^^^^333^355^[REPLACE] int bsBuffShadow = this.bsBuff;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_chPrev  >  n )  {^337^^^^^333^355^[REPLACE] if  ( bsLiveShadow < n )  {^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <= su_count )  {^342^^^^^333^355^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^343^^^^^333^355^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (storedBlockCRC )  & thech;^346^^^^^333^355^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 2;^347^^^^^333^355^[REPLACE] bsLiveShadow += 8;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow; ;^350^^^^^333^355^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = this.nInUse + 2;^338^^^^^333^355^[REPLACE] final InputStream inShadow = this.in;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int thech = in.close (  ) ;^340^^^^^333^355^[REPLACE] int thech = inShadow.read (  ) ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^343^^^^^333^355^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^343^^^^^333^355^[ADD] throw new IOException  (" ")  ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_count  >  0 )  {^342^^^^^333^355^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_tPos )  & thech;^346^^^^^333^355^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^347^^^^^333^355^[REPLACE] bsLiveShadow += 8;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^347^348^^^^333^355^[ADD] bsLiveShadow += 8; } while  ( bsLiveShadow < n ) ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive =nInUseShadow - n;^353^^^^^333^355^[REPLACE] this.bsLive = bsLiveShadow - n;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return false ;^354^^^^^333^355^[REPLACE] return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^358^^^^^357^375^[REPLACE] int bsLiveShadow = this.bsLive;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^359^^^^^357^375^[REPLACE] int bsBuffShadow = this.bsBuff;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( bsLiveShadow  >= magic )  {^361^^^^^357^375^[REPLACE] if  ( bsLiveShadow < 1 )  {^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_chPrev  ==  blockSize100k )  {^364^^^^^357^375^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^365^^^^^357^375^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_count )  & thech;^368^^^^^357^375^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^369^^^^^357^375^[REPLACE] bsLiveShadow += 8;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^369^370^^^^357^375^[ADD] bsLiveShadow += 8; this.bsBuff = bsBuffShadow;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow; ;^370^^^^^357^375^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int thech = this.in.close (  ) ;^362^^^^^357^375^[REPLACE] int thech = this.in.read (  ) ;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_count  !=  blockSize111k )  {^364^^^^^357^375^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^364^365^366^^^357^375^[ADD] if  ( thech < 0 )  { throw new IOException  (" ")  ; }^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^365^^^^^357^375^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^368^^^^^357^375^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 4;^369^^^^^357^375^[REPLACE] bsLiveShadow += 8;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive =nInUse - 1L;^373^^^^^357^375^[REPLACE] this.bsLive = bsLiveShadow - 1;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return false ;^374^^^^^357^375^[REPLACE] return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return  ( char )  bsR ( 6 ) ;^378^^^^^377^379^[REPLACE] return  ( char )  bsR ( 8 ) ;^[METHOD] bsGetUByte [TYPE] char [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return true ;^382^^^^^381^383^[REPLACE] return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[METHOD] bsGetInt [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( length - 2[j] == i )  {^393^^^^^390^424^[REPLACE] if  ( length[j] == i )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^perm[pp++] = j;^393^394^395^^^390^424^[ADD] if  ( length[j] == i )  { perm[pp++] = j; }^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^perm[pp++] =  j;^394^^^^^390^424^[REPLACE] perm[pp++] = j;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = minLen, pp = 0 * 1; i  ==  maxLen; i++ )  {^391^^^^^390^424^[REPLACE] for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( length (  ) [j] == i )  {^393^^^^^390^424^[REPLACE] if  ( length[j] == i )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 3; j  <=  alphaSize; j++ )  {^392^^^^^390^424^[REPLACE] for  ( int j = 0; j < alphaSize; j++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( length /  2[j] == i )  {^393^^^^^390^424^[REPLACE] if  ( length[j] == i )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0L; j < alphaSize; j++ )  {^392^^^^^390^424^[REPLACE] for  ( int j = 0; j < alphaSize; j++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0; j  >  alphaSize; j++ )  {^392^^^^^390^424^[REPLACE] for  ( int j = 0; j < alphaSize; j++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( length *  0.5 [j] == i )  {^393^^^^^390^424^[REPLACE] if  ( length[j] == i )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^394^^^^^390^424^[ADD] perm[pp++] = j;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = vec, pp = 0; i <= maxLen; i++ )  {^391^^^^^390^424^[REPLACE] for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^391^392^393^394^395^390^424^[ADD] for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  { for  ( int j = 0; j < alphaSize; j++ )  { if  ( length[j] == i )  { perm[pp++] = j; }^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = minLen, pp = 1; i <= maxLen; i++ )  {^391^^^^^390^424^[REPLACE] for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0 >>> 0; j < alphaSize; j++ )  {^392^^^^^390^424^[REPLACE] for  ( int j = 0; j < alphaSize; j++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = MAX_CODE_LEN; --i  <=  0 % 4; )  {^399^^^^^390^424^[REPLACE] for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^399^400^401^402^^390^424^[ADD] for  ( int i = MAX_CODE_LEN; --i > 0; )  { base[i] = 0; limit[i] = 0; }^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] = 2;^400^^^^^390^424^[REPLACE] base[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^limit[i] = 0 + 1;^401^^^^^390^424^[REPLACE] limit[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] = 1;^400^^^^^390^424^[REPLACE] base[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^limit[i] = 2;^401^^^^^390^424^[REPLACE] limit[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^401^^^^^390^424^[ADD] limit[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i < 16; i++ )  { if  ( bsGetBit (  )  )  {^399^^^^^390^424^[REPLACE] for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 3; i  !=  alphaSize; i++ )  {^404^^^^^390^424^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 2; i < alphaSize; i++ )  {^404^^^^^390^424^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  (su_i2nt i = 1, b = base[0]; i  ==  MAX_CODE_LEN; i++ )  {^408^^^^^390^424^[REPLACE] for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^b +=  null[i];^409^^^^^390^424^[REPLACE] b += base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] = 0; ;^410^^^^^390^424^[REPLACE] base[i] = b;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^b +=  minLens[i];^409^^^^^390^424^[REPLACE] b += base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 4, b = base[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^390^424^[REPLACE] for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 1, b = base[0 / 0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^390^424^[REPLACE] for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  (su_i2nt i = minLen, vec = 0, b = base[i]; i  !=  maxLen; i++ )  {^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^413^414^415^416^417^390^424^[ADD] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  { final int nb = base[i + 1]; vec += nb - b; b = nb; limit[i] = vec - 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^vec += nb  <=  b;^415^^^^^390^424^[REPLACE] vec += nb - b;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^b =  su_rNToGo;^416^^^^^390^424^[REPLACE] b = nb;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^limit[i] = thech - blockSize100k;^417^^^^^390^424^[REPLACE] limit[i] = vec - 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^vec <<= 4;^418^^^^^390^424^[REPLACE] vec <<= 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^finalsu_i2nt nb = base[i + 1];^414^^^^^390^424^[REPLACE] final int nb = base[i + 1];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^vec += nb - b;^414^415^^^^390^424^[ADD] final int nb = base[i + 1]; vec += nb - b;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^vec += nb -su_rNToGo;^415^^^^^390^424^[REPLACE] vec += nb - b;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^416^^^^^390^424^[ADD] b = nb;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^limit[i] = vec  <  1;^417^^^^^390^424^[REPLACE] limit[i] = vec - 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^vec <<= 0;^418^^^^^390^424^[REPLACE] vec <<= 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = storedCombinedCRC, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = minLen, vec = 2, b = base[i]; i <= maxLen; i++ )  {^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( su_i2nt i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^finalsu_i2nt nb = base[i + 1L];^414^^^^^390^424^[REPLACE] final int nb = base[i + 1];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = su_count + blockSize100k; i <= maxLen; i++ )  {^421^^^^^390^424^[REPLACE] for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] =  (  ( limit[i  ||  1 * 3] + 1 * 3 )  << 1 * 3 )   ||  base[i];^422^^^^^390^424^[REPLACE] base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^422^^^^^390^424^[ADD] base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  -thech;^422^^^^^390^424^[REPLACE] base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i =vec + 4; i <= maxLen; i++ )  {^421^^^^^390^424^[REPLACE] for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^421^422^423^^^390^424^[ADD] for  ( int i = minLen + 1; i <= maxLen; i++ )  { base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i]; }^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^427^^^^^426^505^[REPLACE] final Data dataShadow = this.data;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final boolean[] inUse = data.inUse;^428^^^^^426^505^[REPLACE] final boolean[] inUse = dataShadow.inUse;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^428^429^^^^426^505^[ADD] final boolean[] inUse = dataShadow.inUse; final byte[] pos = dataShadow.recvDecodingTables_pos;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] pos = data.recvDecodingTables_pos;^429^^^^^426^505^[REPLACE] final byte[] pos = dataShadow.recvDecodingTables_pos;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selector = data.selector;^430^^^^^426^505^[REPLACE] final byte[] selector = dataShadow.selector;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selectorMtf = data.selectorMtf;^431^^^^^426^505^[REPLACE] final byte[] selectorMtf = dataShadow.selectorMtf;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int inUse16 = 3;^433^^^^^426^505^[REPLACE] int inUse16 = 0;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^433^^^^^426^505^[ADD] int inUse16 = 0;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inShadow != null )  {^437^^^^^426^505^[REPLACE] if  ( bsGetBit (  )  )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse16 |=inUse16  <=  i;^438^^^^^426^505^[REPLACE] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^438^^^^^426^505^[ADD] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( su_i2nt i = 1; i  >  16; i++ )  {^436^^^^^426^505^[REPLACE] for  ( int i = 0; i < 16; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^437^438^439^^^426^505^[ADD] if  ( bsGetBit (  )  )  { inUse16 |= 1 << i; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse36 |= 3  == inUse36;^438^^^^^426^505^[REPLACE] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse16 |= 1  >= inUse16;^438^^^^^426^505^[REPLACE] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse16 |= 1  ==  i;^438^^^^^426^505^[REPLACE] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0 / 1; i < 16; i++ )  {^436^^^^^426^505^[REPLACE] for  ( int i = 0; i < 16; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( su_i2nt i = 256;su_i2  ==  0; )  {^442^^^^^426^505^[REPLACE] for  ( int i = 256; --i >= 0; )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i] = true;^443^^^^^426^505^[REPLACE] inUse[i] = false;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^443^^^^^426^505^[ADD] inUse[i] = false;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 256L; --i >= 0; )  {^442^^^^^426^505^[REPLACE] for  ( int i = 256; --i >= 0; )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^442^443^444^^^426^505^[ADD] for  ( int i = 256; --i >= 0; )  { inUse[i] = false; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( su_i2nUse16 &  ( 1 << i )  )   ==  0 )  {^447^^^^^426^505^[REPLACE] if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inShadow != null )  {^450^^^^^426^505^[REPLACE] if  ( bsGetBit (  )  )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^inUse[i16 + j] = true;^450^451^452^^^426^505^[ADD] if  ( bsGetBit (  )  )  { inUse[i16 + j] = true; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  <=  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0; j  > su_j2; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16 +storedCombinedCRC] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^451^^^^^426^505^[ADD] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  &  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int i16 = i  <=  3;^448^^^^^426^505^[REPLACE] final int i16 = i << 4;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0L; j < 16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^449^450^451^452^^426^505^[ADD] for  ( int j = 0; j < 16; j++ )  { if  ( bsGetBit (  )  )  { inUse[i16 + j] = true; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  ^  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( su_i2nt i = 0; i  <=  inUse16; i++ )  {^446^^^^^426^505^[REPLACE] for  ( int i = 0; i < 16; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( inUse16 &  ( 1 << i )  )   ==  0 )  {^447^^^^^426^505^[REPLACE] if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0; j  ==  16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  >  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final su_i2nt i16 = i  !=  4;^448^^^^^426^505^[REPLACE] final int i16 = i << 4;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0 << 0; j < 16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0; j  >  16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^450^451^452^^^426^505^[ADD] if  ( bsGetBit (  )  )  { inUse[i16 + j] = true; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  ==  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^finalsu_i2nt i16 = i  ==  0;^448^^^^^426^505^[REPLACE] final int i16 = i << 4;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 4; j < 16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( intsu_j2 = 0 >>> 3; j  <=  16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  !=  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 1; i < 16; i++ )  {^446^^^^^426^505^[REPLACE] for  ( int i = 0; i < 16; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int i16 = i  >  1;^448^^^^^426^505^[REPLACE] final int i16 = i << 4;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^complete (  ) ;^457^^^^^426^505^[REPLACE] makeMaps (  ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = nInUse + su_j2;^458^^^^^426^505^[REPLACE] final int alphaSize = this.nInUse + 2;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int nGroups = bsR ( 3 % 3 ) ;^461^^^^^426^505^[REPLACE] final int nGroups = bsR ( 3 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int nSelectors = bsR ( 2 ) ;^462^^^^^426^505^[REPLACE] final int nSelectors = bsR ( 15 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^466^467^^^^426^505^[ADD] while  ( bsGetBit (  )  )  { j++;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i  == su_i2; i++ )  {^464^^^^^426^505^[REPLACE] for  ( int i = 0; i < nSelectors; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^selectorMtf[i] ;^469^^^^^426^505^[REPLACE] selectorMtf[i] =  ( byte )  j;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int j = 4;^465^^^^^426^505^[REPLACE] int j = 0;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^selectorMtf[i]  =  selectorMtf[i] ;^469^^^^^426^505^[REPLACE] selectorMtf[i] =  ( byte )  j;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^469^^^^^426^505^[ADD] selectorMtf[i] =  ( byte )  j;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 1; i < nSelectors; i++ )  {^464^^^^^426^505^[REPLACE] for  ( int i = 0; i < nSelectors; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^464^465^466^467^468^426^505^[ADD] for  ( int i = 0; i < nSelectors; i++ )  { int j = 0; while  ( bsGetBit (  )  )  { j++; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int j = 0L;^465^^^^^426^505^[REPLACE] int j = 0;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int v = nGroups; --v  !=  0; )  {^473^^^^^426^505^[REPLACE] for  ( int v = nGroups; --v >= 0; )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^473^474^475^^^426^505^[ADD] for  ( int v = nGroups; --v >= 0; )  { pos[v] =  ( byte )  v; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[v] =  (  short  )  v;^474^^^^^426^505^[REPLACE] pos[v] =  ( byte )  v;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[v] =  (  long  )  v;^474^^^^^426^505^[REPLACE] pos[v] =  ( byte )  v;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int v = su_rTPos; --v >= 0; )  {^473^^^^^426^505^[REPLACE] for  ( int v = nGroups; --v >= 0; )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( vec  !=  0 )  {^480^^^^^426^505^[REPLACE] while  ( v > 0 )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[v] = pos[v -vec];^482^^^^^426^505^[REPLACE] pos[v] = pos[v - 1];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i  ==  nSelectors; i++ )  {^477^^^^^426^505^[REPLACE] for  ( int i = 0; i < nSelectors; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^while  (vec  !=  0 )  {^480^^^^^426^505^[REPLACE] while  ( v > 0 )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^482^483^^^^426^505^[ADD] pos[v] = pos[v - 1]; v--;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[v] = pos[v  >=  1];^482^^^^^426^505^[REPLACE] pos[v] = pos[v - 1];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[0 / 1] = tmp;^485^^^^^426^505^[REPLACE] pos[0] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^selector[i] = tmp;^485^486^^^^426^505^[ADD] pos[0] = tmp; selector[i] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^selector[i]  =  selector[i] ;^486^^^^^426^505^[REPLACE] selector[i] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int v = seqToUnseq[i] | 0xff;^478^^^^^426^505^[REPLACE] int v = selectorMtf[i] & 0xff;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^final byte tmp = pos[v];^478^479^^^^426^505^[ADD] int v = selectorMtf[i] & 0xff; final byte tmp = pos[v];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte tmp = seqToUnseq[v];^479^^^^^426^505^[REPLACE] final byte tmp = pos[v];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[1] = tmp;^485^^^^^426^505^[REPLACE] pos[0] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^selector[i]  = null ;^486^^^^^426^505^[REPLACE] selector[i] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0L; i < nSelectors; i++ )  {^477^^^^^426^505^[REPLACE] for  ( int i = 0; i < nSelectors; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int v = selectorMtf[i] | 0xff;^478^^^^^426^505^[REPLACE] int v = selectorMtf[i] & 0xff;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte tmp = selectorMtf[v];^479^^^^^426^505^[REPLACE] final byte tmp = pos[v];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[][] len = data.temp_charArray2d;^489^^^^^426^505^[REPLACE] final char[][] len = dataShadow.temp_charArray2d;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^489^^^^^426^505^[ADD] final char[][] len = dataShadow.temp_charArray2d;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^496^497^^^^426^505^[ADD] while  ( bsGetBit (  )  )  { curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^curr += bsGetBit (  )  ? -3 : 3;^497^^^^^426^505^[REPLACE] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( intthech = 1; t  >  nGroups; t++ )  {^492^^^^^426^505^[REPLACE] for  ( int t = 0; t < nGroups; t++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^curr += bsGetBit (  )  ? -0 : 0;^497^^^^^426^505^[REPLACE] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 4; i  >=  alphaSize; i++ )  {^495^^^^^426^505^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^curr += bsGetBit (  )  ? -4 : 4;^497^^^^^426^505^[REPLACE] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^497^^^^^426^505^[ADD] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^curr += bsGetBit (  )  ? -2 : 2;^497^^^^^426^505^[REPLACE] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^len_t[i] =  ( String )  curr;^499^^^^^426^505^[REPLACE] len_t[i] =  ( char )  curr;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^curr += bsGetBit (  )  ? -1 + 1 : 1 + 1;^497^^^^^426^505^[REPLACE] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^len_t[i] ;^499^^^^^426^505^[REPLACE] len_t[i] =  ( char )  curr;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int curr = bsR ( 1 ) ;^493^^^^^426^505^[REPLACE] int curr = bsR ( 5 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] temp_charArray2d_t = len[t];^494^^^^^426^505^[REPLACE] final char[] len_t = len[t];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0 - 0; i < alphaSize; i++ )  {^495^^^^^426^505^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i  <=  alphaSize; i++ )  {^495^^^^^426^505^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^495^496^497^498^^426^505^[ADD] for  ( int i = 0; i < alphaSize; i++ )  { while  ( bsGetBit (  )  )  { curr += bsGetBit (  )  ? -1 : 1; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int t = 0 - 3; t < nGroups; t++ )  {^492^^^^^426^505^[REPLACE] for  ( int t = 0; t < nGroups; t++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int curr = bsR ( 5 + 2 ) ;^493^^^^^426^505^[REPLACE] int curr = bsR ( 5 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0 / 4; i < alphaSize; i++ )  {^495^^^^^426^505^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^createHuffmanDecodingTables ( su_i2, nGroups ) ;^504^^^^^426^505^[REPLACE] createHuffmanDecodingTables ( alphaSize, nGroups ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^512^^^^^511^536^[REPLACE] final Data dataShadow = this.data;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[][] len = data.temp_charArray2d;^513^^^^^511^536^[REPLACE] final char[][] len = dataShadow.temp_charArray2d;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] minLens = data.minLens;^514^^^^^511^536^[REPLACE] final int[] minLens = dataShadow.minLens;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^514^^^^^511^536^[ADD] final int[] minLens = dataShadow.minLens;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] limit = data.limit;^515^^^^^511^536^[REPLACE] final int[][] limit = dataShadow.limit;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] base = data.base;^516^^^^^511^536^[REPLACE] final int[][] base = dataShadow.base;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = data.perm;^517^^^^^511^536^[REPLACE] final int[][] perm = dataShadow.perm;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  <= expected )  {^525^^^^^511^536^[REPLACE] if  ( lent > maxLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^minLen = lent; ;^526^^^^^511^536^[REPLACE] maxLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (expected  ==  minLen )  {^528^^^^^511^536^[REPLACE] if  ( lent < minLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^maxLen = lent; ;^529^^^^^511^536^[REPLACE] minLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( intthech = 0; t  ==  nGroups; t++ )  {^519^^^^^511^536^[REPLACE] for  ( int t = 0; t < nGroups; t++ )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  !=  vec )  {^525^^^^^511^536^[REPLACE] if  ( lent > maxLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  >  minLen )  {^528^^^^^511^536^[REPLACE] if  ( lent < minLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = alphaSize; --i  < su_i2; )  {^523^^^^^511^536^[REPLACE] for  ( int i = alphaSize; --i >= 0; )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  >=  maxLen )  {^525^^^^^511^536^[REPLACE] if  ( lent > maxLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  !=  minLen )  {^528^^^^^511^536^[REPLACE] if  ( lent < minLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^528^529^530^^^511^536^[ADD] if  ( lent < minLen )  { minLen = lent; }^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^529^^^^^511^536^[ADD] minLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char lent = length[i];^524^^^^^511^536^[REPLACE] final char lent = len_t[i];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^524^^^^^511^536^[ADD] final char lent = len_t[i];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^minLens[t]  =  minLens[t] ;^534^^^^^511^536^[REPLACE] minLens[t] = minLen;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int minLen = 27;^520^^^^^511^536^[REPLACE] int minLen = 32;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int maxLen = 0L;^521^^^^^511^536^[REPLACE] int maxLen = 0;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] len_thech = len[t];^522^^^^^511^536^[REPLACE] final char[] len_t = len[t];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = thech; --i >= 0; )  {^523^^^^^511^536^[REPLACE] for  ( int i = alphaSize; --i >= 0; )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int hi = offs + len;^524^^^^^511^536^[REPLACE] final char lent = len_t[i];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = alphaSize; --i  <=  0 / 4; )  {^523^^^^^511^536^[REPLACE] for  ( int i = alphaSize; --i >= 0; )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^523^524^525^526^527^511^536^[ADD] for  ( int i = alphaSize; --i >= 0; )  { final char lent = len_t[i]; if  ( lent > maxLen )  { maxLen = lent; }^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  ==  vec )  {^528^^^^^511^536^[REPLACE] if  ( lent < minLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^526^^^^^511^536^[ADD] maxLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int t = 1; t < nGroups; t++ )  {^519^^^^^511^536^[REPLACE] for  ( int t = 0; t < nGroups; t++ )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^519^520^521^522^^511^536^[ADD] for  ( int t = 0; t < nGroups; t++ )  { int minLen = 32; int maxLen = 0; final char[] len_t = len[t];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int minLen = 1;^520^^^^^511^536^[REPLACE] int minLen = 32;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^520^521^^^^511^536^[ADD] int minLen = 32; int maxLen = 0;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int maxLen = 1;^521^^^^^511^536^[REPLACE] int maxLen = 0;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] temp_charArray2d_t = len[t];^522^^^^^511^536^[REPLACE] final char[] len_t = len[t];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^522^^^^^511^536^[ADD] final char[] len_t = len[t];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.origPtr = bsR ( 14 ) ;^539^^^^^538^725^[REPLACE] this.origPtr = bsR ( 24 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^complete (  ) ;^540^^^^^538^725^[REPLACE] recvDecodingTables (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = this.nInUse + 2;^542^^^^^538^725^[REPLACE] final InputStream inShadow = this.in;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^543^^^^^538^725^[REPLACE] final Data dataShadow = this.data;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] ll8 = data.ll8;^544^^^^^538^725^[REPLACE] final byte[] ll8 = dataShadow.ll8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] unzftab = data.unzftab;^545^^^^^538^725^[REPLACE] final int[] unzftab = dataShadow.unzftab;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selector = data.selector;^546^^^^^538^725^[REPLACE] final byte[] selector = dataShadow.selector;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] seqToUnseq = data.seqToUnseq;^547^^^^^538^725^[REPLACE] final byte[] seqToUnseq = dataShadow.seqToUnseq;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^547^548^^^^538^725^[ADD] final byte[] seqToUnseq = dataShadow.seqToUnseq; final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] yy = data.getAndMoveToFrontDecode_yy;^548^^^^^538^725^[REPLACE] final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] minLens = data.minLens;^549^^^^^538^725^[REPLACE] final int[] minLens = dataShadow.minLens;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] limit = data.limit;^550^^^^^538^725^[REPLACE] final int[][] limit = dataShadow.limit;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^550^551^^^^538^725^[ADD] final int[][] limit = dataShadow.limit; final int[][] base = dataShadow.base;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] base = data.base;^551^^^^^538^725^[REPLACE] final int[][] base = dataShadow.base;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = data.perm;^552^^^^^538^725^[REPLACE] final int[][] perm = dataShadow.perm;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^552^553^^^^538^725^[ADD] final int[][] perm = dataShadow.perm; final int limitLast = this.blockSize100k * 100000;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int limitLast = this.blockSize100k  ;^553^^^^^538^725^[REPLACE] final int limitLast = this.blockSize100k * 100000;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 256; --i  >  0; )  {^560^^^^^538^725^[REPLACE] for  ( int i = 256; --i >= 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^560^561^562^563^^538^725^[ADD] for  ( int i = 256; --i >= 0; )  { yy[i] =  ( char )  i; unzftab[i] = 0; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[i] =  ( String )  i;^561^^^^^538^725^[REPLACE] yy[i] =  ( char )  i;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^561^562^^^^538^725^[ADD] yy[i] =  ( char )  i; unzftab[i] = 0;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^unzftab[i] = 0L;^562^^^^^538^725^[REPLACE] unzftab[i] = 0;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^unzftab[i] = 0 << 1;^562^^^^^538^725^[REPLACE] unzftab[i] = 0;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 162; --i >= 0; )  {^560^^^^^538^725^[REPLACE] for  ( int i = 256; --i >= 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int groupNo = 4;^565^^^^^538^725^[REPLACE] int groupNo = 0;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int groupPos =0 - 1;^566^^^^^538^725^[REPLACE] int groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^566^567^^^^538^725^[ADD] int groupPos = G_SIZE - 1; final int eob = this.nInUse + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int eob = this.nInUse  ^  1;^567^^^^^538^725^[REPLACE] final int eob = this.nInUse + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int nextSym = getAndMoveToFrontDecode0L ( 0L ) ;^568^^^^^538^725^[REPLACE] int nextSym = getAndMoveToFrontDecode0 ( 0 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^568^569^^^^538^725^[ADD] int nextSym = getAndMoveToFrontDecode0 ( 0 ) ; int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^569^^^^^538^725^[REPLACE] int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^570^^^^^538^725^[REPLACE] int bsLiveShadow = this.bsLive;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int lastShadow = -1L;^571^^^^^538^725^[REPLACE] int lastShadow = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^571^572^^^^538^725^[ADD] int lastShadow = -1; int zt = selector[groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zt = selector[groupNo] | 0xff;^572^^^^^538^725^[REPLACE] int zt = selector[groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[] base_zvec = base[zt];^573^^^^^538^725^[REPLACE] int[] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[] limit_zvec = limit[zt];^574^^^^^538^725^[REPLACE] int[] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = minLens_zt;^575^^^^^538^725^[REPLACE] int[] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int minLens_zvec = minLens[zt];^576^^^^^538^725^[REPLACE] int minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( nextSym  ==  eob )  {^578^^^^^538^725^[REPLACE] while  ( nextSym != eob )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  >=  zn )  {^606^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  >  3 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^613^^^^^608^614^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( su_chPrev )  & zvec;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 2 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 6;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^607^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^613^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (zt  <  limit_zt[zn] )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( nInUseShadow  >=  inUse06 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^622^623^^^^538^725^[ADD] while  ( bsLiveShadow < 1 )  { final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  !=  1 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^629^630^^^^624^631^[REPLACE] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^629^630^^^^624^631^[ADD] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 3 )  &nb;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 4;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 9;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^629^630^^^^538^725^[REPLACE] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <  0 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 0;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^continue;^626^627^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 3;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  (zvec ) &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^538^725^[REPLACE] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.close (  ) ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  >=  1L )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (s )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 0;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8L;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (su_tPos  >  0 )  {^643^^^^^538^725^[REPLACE] while  ( s-- >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^ll8[++lastShadow] =  ch;^644^^^^^538^725^[REPLACE] ll8[++lastShadow] = ch;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^644^^^^^538^725^[ADD] ll8[++lastShadow] = ch;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  == nInUse )  {^689^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  >  0 )  {^691^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^691^692^693^694^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^696^^^^^691^697^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^692^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^692^^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 4;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^693^694^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_tPos )  & thech;^692^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^692^693^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 4;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^690^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^690^^^^^538^725^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^696^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  != zt )  {^703^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^703^704^^^^538^725^[ADD] while  ( zvec > limit_zt[zn] )  { zn++;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (nInUse  <=  1 )  {^705^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  <=  0 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^712^^^^^707^713^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^712^^^^^707^713^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 << 1;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nb )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 >>> 4;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^continue;^709^710^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.close (  ) ;^706^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^706^^^^^538^725^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^712^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (vec  >  0 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^712^^^^^707^713^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8L;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 4 )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 1;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^709^710^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec << 3 )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 3 ) ;^716^^^^^538^725^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^716^^^^^538^725^[ADD] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.close (  ) ;^706^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^712^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^712^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  ==  1 - 4 )  {^705^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  < zvec )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nextSym )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^708^^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 1;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( su_tPos )  & t;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 5;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^706^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( nextSym == RUNA )  &&  ( nextSym == RUNB )  )  {^579^^^^^538^725^[REPLACE] if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( minLen  <=  zn )  {^689^^^^^579^719^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 << 3 )  {^691^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^696^^^^^691^697^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^696^^^^^691^697^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( nb )  & zvec;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 1;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 2;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.close (  ) ;^690^^^^^579^719^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^690^^^^^579^719^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^696^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  <  limit_zt[zn] )  {^703^^^^^579^719^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  <=  1 )  {^705^^^^^579^719^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  0 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 / 4 )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 0;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 >>> 1;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^706^^^^^579^719^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^712^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  >  0 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 3 )  &nextSym;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 % 0 )  &storedBlockCRC;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 7;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  (zvec )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^579^719^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^712^^^^^579^719^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  !=  1 )  {^705^^^^^579^719^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^705^706^^^^579^719^[ADD] while  ( bsLiveShadow < 1 )  { final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  ==  1 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 1 )  &su_j2;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 4;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^709^^^^^579^719^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^708^709^^^^579^719^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 6;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^706^^^^^579^719^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^652^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nextSym  >  16 )  {^664^^^^^579^719^[REPLACE] if  ( nextSym <= 16 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( yy, 0, yy,storedBlockCRC, nextSym -storedBlockCRC ) ;^669^^^^^664^670^[REPLACE] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =su_rTPos - 1L; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[j] =  getAndMoveToFrontDecode_yy[--j];^666^^^^^579^719^[REPLACE] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =s - 0; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  ||  3 )  {^674^^^^^579^719^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =false - 1;^675^^^^^579^719^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zt = selector[++groupNo] | 0xff;^676^^^^^579^719^[REPLACE] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^base_zt =  null[zt];^677^^^^^579^719^[REPLACE] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^limit_zt =  null[zt];^678^^^^^579^719^[REPLACE] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^perm_zt =  null[zt];^679^^^^^579^719^[REPLACE] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  perm[zt];^680^^^^^579^719^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  0 )  {^691^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8L )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 >>> 1;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^693^694^^^^579^719^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  ==  0 * 2 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 1;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =zt - 1; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^665^666^667^^^579^719^[ADD] for  ( int j = nextSym - 1; j > 0; )  { yy[j] = yy[--j]; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^ll8[lastShadow]  =  ll8[lastShadow] ;^657^^^^^579^719^[REPLACE] ll8[lastShadow] = seqToUnseq[tmp];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^657^^^^^579^719^[ADD] ll8[lastShadow] = seqToUnseq[tmp];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^666^^^^^579^719^[ADD] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[4] = tmp;^672^^^^^579^719^[REPLACE] yy[0] = tmp;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^672^^^^^579^719^[ADD] yy[0] = tmp;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  <  1;^675^^^^^579^719^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^676^^^^^579^719^[ADD] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 * 0 )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8; ;^701^^^^^579^719^[REPLACE] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8L;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  (zvec )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 0 ) ;^716^^^^^579^719^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  |  base_zt[zn]];^718^^^^^579^719^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char tmp = yy[storedBlockCRC  |  1];^655^^^^^579^719^[REPLACE] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^655^656^^^^579^719^[ADD] final char tmp = yy[nextSym - 1]; unzftab[seqToUnseq[tmp] & 0xff]++;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =su_tPos - 1; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = su_j2;^685^^^^^579^719^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^690^^^^^579^719^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 1 << zn )  - 1 ) ;^699^700^^^^579^719^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^696^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  <=  zn )  {^606^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  >  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^613^^^^^608^614^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 1;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 - 0 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsLiveShadow += 8;^609^610^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 9;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^607^^^^^538^725^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^613^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^613^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  >=  limit_zt[zn] )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  >=  1 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  ==  0 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &nextSym;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 / 3;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nb )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^625^626^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 7;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  <  2 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( nb )  & vec;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^625^^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 3;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec << 1 ) &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^538^725^[REPLACE] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.close (  ) ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( storedBlockCRC  <=  inUse16 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  >  1 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^624^625^626^627^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 2;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( recvDecodingTables_pos , nInUseShadow , su_ch2 )  ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( s--  <=  0 )  {^643^^^^^538^725^[REPLACE] while  ( s-- >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zt  !=  RUNA )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( nextSym  ||  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  <=  2;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^586^^^^^538^725^[ADD] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  !=  1L;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=  zn;^584^^^^^538^725^[REPLACE] s += n;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  else {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  >=  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  &&  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^groupPos = G_SIZE - 1;zt = selector[++groupNo] & 0xff;base_zt = base[zt];limit_zt = limit[zt];^591^592^593^594^595^538^725^[ADD] if  ( groupPos == 0 )  { groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff; base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  ==  1 - 0;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zt = selector[++groupNo] | 0xff;^593^^^^^538^725^[REPLACE] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^593^594^^^^538^725^[ADD] zt = selector[++groupNo] & 0xff; base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^base_zt =  null[zt];^594^^^^^538^725^[REPLACE] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^594^^^^^538^725^[ADD] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^limit_zt =  null[zt];^595^^^^^538^725^[REPLACE] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^perm_zt =  null[zt];^596^^^^^538^725^[REPLACE] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^596^^^^^538^725^[ADD] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  perm[zt];^597^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 1;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( vec  ==  1 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 3 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsLiveShadow += 8;^625^626^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( storedBlockCRC  <  limitLast )  {^647^^^^^538^725^[REPLACE] if  ( lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^648^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int n = 2; true; n <<= 2 )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  >  2 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_j2 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^609^^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 2;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^continue;^610^611^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^609^610^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  == zt )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^620^621^^^^538^725^[ADD] while  ( zvec > limit_zt[zn] )  { zn++;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  != s )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  blockSize100k )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (origPtr )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^626^627^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &offs;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 1;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^623^^^^^538^725^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 / 0;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec ) &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^538^725^[REPLACE] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (storedBlockCRC  <=  1 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 6 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 6;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 1;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( recvDecodingTables_pos , nb , inUse16 )  ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_rNToGo  &&  RUNA )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( nextSym  !=  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += zn  >=  inUse46;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  ==  0;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^584^^^^^538^725^[ADD] s += n;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( storedBlockCRC  &&  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^}   s += n << 1;break;^585^586^587^588^589^538^725^[ADD] else if  ( nextSym == RUNB )  { s += n << 1; } else { break; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=zn  !=  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (storedBlockCRC  ||  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = true - inUse16;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^592^^^^^538^725^[ADD] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  <=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^608^609^610^611^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 % 2;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <= zvec )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 4 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=zn  >  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  &  1 + 2;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^perm_zt = perm[zt];^595^596^^^^538^725^[ADD] limit_zt = limit[zt]; perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 1;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8; ;^618^^^^^538^725^[REPLACE] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^618^^^^^538^725^[ADD] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^634^635^^^^538^725^[ADD] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  |  base_zt[zn]];^637^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = nSelectors;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 1 << zn )  - 1 ) ;^616^617^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^616^617^^^^538^725^[ADD] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int n = 3; true; n <<= 3 )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^582^583^584^585^586^538^725^[ADD] for  ( int n = 1; true; n <<= 1 )  { if  ( nextSym == RUNA )  { s += n; } else if  ( nextSym == RUNB )  { s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  == zn;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =false - 1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^595^596^^^^538^725^[ADD] limit_zt = limit[zt]; perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^597^^^^^538^725^[ADD] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nextSym )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8L;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^610^^^^^538^725^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 3 )  &retChar;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  !=  base_zt[zn]];^637^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^unzftab[ch | 0xff] += s + 1;^641^^^^^538^725^[REPLACE] unzftab[ch & 0xff] += s + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int s = -4;^580^^^^^538^725^[REPLACE] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int n = 0; true; n <<= 0 )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = su_j2;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte ch = seqToUnseq[yy[4]];^640^^^^^538^725^[REPLACE] final byte ch = seqToUnseq[yy[0]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^648^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nextSym  !=  RUNA )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^s += n;s += n << 1;^583^584^585^586^^538^725^[ADD] if  ( nextSym == RUNA )  { s += n; } else if  ( nextSym == RUNB )  { s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( nextSym  && su_tPos )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  ==  inUse16;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=zn  >=  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^}   break;^585^586^587^588^589^538^725^[ADD] else if  ( nextSym == RUNB )  { s += n << 1; } else { break; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (su_chPrev  !=  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =this - 1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  !=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^613^^^^^608^614^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 4 )  &su_i2;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lastShadow  ==  limitLast )  {^647^^^^^538^725^[REPLACE] if  ( lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^648^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++lastShadow  <  limitLast )  {^651^^^^^538^725^[REPLACE] if  ( ++lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^652^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^652^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nextSym  <  16L )  {^664^^^^^538^725^[REPLACE] if  ( nextSym <= 16 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( getAndMoveToFrontDecode_yy, 0L, yy,zt, nextSym -zt ) ;^669^^^^^664^670^[REPLACE] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =s - 1; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[j] =  getAndMoveToFrontDecode_yy[--j];^666^^^^^538^725^[REPLACE] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^666^^^^^538^725^[ADD] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =storedCombinedCRC - 1; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^665^666^667^^^538^725^[ADD] for  ( int j = nextSym - 1; j > 0; )  { yy[j] = yy[--j]; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  !=  0 )  {^674^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE -null;^675^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zt = selector[++groupNo] | 0xff;^676^^^^^538^725^[REPLACE] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^base_zt =  null[zt];^677^^^^^538^725^[REPLACE] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^limit_zt =  null[zt];^678^^^^^538^725^[REPLACE] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^perm_zt =  null[zt];^679^^^^^538^725^[REPLACE] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  perm[zt];^680^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  ==  0 )  {^691^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^691^692^693^694^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 + 2 )  & thech;^692^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 1;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  2 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 1 )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsLiveShadow += 8;^708^709^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  >  zn )  {^606^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <= vec )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^608^609^610^611^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 4 )  &nextSym;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8L )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.close (  ) ;^607^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  ==  limit_zt[zn] )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  <=  1 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nextSym )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 1;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 4;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  blockSize100k )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_tPos )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 << 1;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^626^^^^^538^725^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &su_ch2;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  >= minLen )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  !=  4 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( origPtr )  & zvec;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nextSym  != zt )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( znextSym  ||  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  <=  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^} else if  ( nextSym  && t )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_tPos  ||  blockSize10L0Lk )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = inUse16 - 1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 >> 3 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( su_rTPos )  & zvec;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  |  1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  null[zt];^597^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nb )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( retChar )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^602^^^^^538^725^[ADD] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( ll8 , bsBuffShadow , computedBlockCRC )  ;^607^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int su_j2 = nextSym -su_tPos; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[j] =  null[--j];^666^^^^^538^725^[REPLACE] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = null - inUse26;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 0 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^ll8[lastShadow]  =  ll8[lastShadow] ;^657^^^^^538^725^[REPLACE] ll8[lastShadow] = seqToUnseq[tmp];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[1] = tmp;^672^^^^^538^725^[REPLACE] yy[0] = tmp;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =false - 0;^675^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^limit_zt = limit[zt];^677^678^^^^538^725^[ADD] base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  null[zt];^680^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 / 0;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8; ;^701^^^^^538^725^[REPLACE] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^708^709^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec << 1 )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^538^725^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  !=  base_zt[zn]];^718^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int s = -3;^580^^^^^538^725^[REPLACE] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^580^^^^^538^725^[ADD] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = retChar;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte ch = seqToUnseq[yy[3]];^640^^^^^538^725^[REPLACE] final byte ch = seqToUnseq[yy[0]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char tmp = yy[nextSym  ||  0];^655^^^^^538^725^[REPLACE] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j =su_rTPos - 1; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = su_count;^685^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 3 << zn )  - 3 ) ;^699^700^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^652^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^696^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (vec  !=  2 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_chPrev )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 0;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &nb;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 0;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  <  limit_zt[zn] )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  <= nInUse )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  blockSize10L0Lk )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^624^625^626^627^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( su_ch2 )  & zvec;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 << 3;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &retChar;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( recvDecodingTables_pos , currentState , blockSize )  ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( nGroups  <=  1 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <= vec )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 >> 1;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^629^630^^^^538^725^[ADD] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( s--  ==  0 )  {^643^^^^^538^725^[REPLACE] while  ( s-- >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^643^644^^^^538^725^[ADD] while  ( s-- >= 0 )  { ll8[++lastShadow] = ch;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  ==  zn )  {^689^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  ==  blockSize100k )  {^691^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &offs;^692^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 2;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 % 4;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zt  !=  limit_zt[zn] )  {^703^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( s  <=  1 )  {^705^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <  1 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 7 )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 6;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^709^^^^^538^725^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <= zvec )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 7;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_count )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 1;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  ==  1 )  {^705^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (t  ==  0 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^707^708^709^710^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (s )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 / 1;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 / 0;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (   ( nextSym == RUNB )  )  {^579^^^^^538^725^[REPLACE] if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  >  zn )  {^689^^^^^579^719^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 )  {^691^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (origPtr )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^692^^^^^579^719^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 4;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^693^^^^^579^719^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (retChar )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 5;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (zt  >=  limit_zt[zn] )  {^703^^^^^579^719^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  !=  blockSize111k )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^707^708^709^710^^579^719^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 1 )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsLiveShadow += 8;^708^709^^^^579^719^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (offs )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^708^^^^^579^719^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 2;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^709^710^^^^579^719^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  !=  0 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (nb )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 1;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec << 1 )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^579^719^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^716^^^^^579^719^[ADD] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (nInUseShadow  ==  1 )  {^705^^^^^579^719^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  !=  blockSize100k )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^707^708^709^710^^579^719^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_tPos )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 % 2;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^712^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++lastShadow  ==  limitLast )  {^651^^^^^579^719^[REPLACE] if  ( ++lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^651^652^653^^^579^719^[ADD] if  ( ++lastShadow >= limitLast )  { throw new IOException  (" ")  ; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nextSym  < su_rNToGo )  {^664^^^^^579^719^[REPLACE] if  ( nextSym <= 16 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( yy, 3, yy, 1,t - 1 ) ;^669^^^^^664^670^[REPLACE] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym  ^  1 / 4; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym  >=  1; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  ||  0L )  {^674^^^^^579^719^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^groupPos = G_SIZE - 1;zt = selector[++groupNo] & 0xff;base_zt = base[zt];limit_zt = limit[zt];^674^675^676^677^678^579^719^[ADD] if  ( groupPos == 0 )  { groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff; base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = null - inUse16;^675^^^^^579^719^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^zt = selector[++groupNo] & 0xff;^675^676^^^^579^719^[ADD] groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^679^^^^^579^719^[ADD] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  !=  0 )  {^691^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  <  0 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym  <=  0; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[1] = tmp;^672^^^^^579^719^[REPLACE] yy[0] = tmp;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = null - inUse36;^675^^^^^579^719^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^677^678^^^^579^719^[ADD] base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^680^^^^^579^719^[ADD] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 >> 4 )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^continue;^709^710^^^^579^719^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  &  base_zt[zn]];^718^^^^^579^719^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char tmp = yy[nextSym  &&  1];^655^^^^^579^719^[REPLACE] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^655^^^^^579^719^[ADD] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = s - 1; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = storedCombinedCRC;^685^^^^^579^719^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^685^^^^^579^719^[ADD] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.close (  ) ;^706^^^^^579^719^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^652^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^652^^^^^579^719^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  ==  zn )  {^606^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  ==  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 1 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &origPtr;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 4;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zt  <=  limit_zt[zn] )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  > nGroups )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  blockSize133k )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( su_tPos )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 / 2 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  ==  0 * 4 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 5;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec << 0 ) &  (  ( bsBuffShadow >> bsLiveShadow )  & 0 ) ;^634^635^^^^538^725^[REPLACE] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( nextSym  <=  1 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  3 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &s;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 4;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (storedBlockCRC )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( selector , len , vec )  ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nextSym  ||  RUNA )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=zn  ==  1 * 0;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  >=  1 << 4;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^} else if  ( znextSym  !=  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  <=  3;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (su_j2  ||  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  |  3;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^592^593^^^^538^725^[ADD] groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 4 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 3;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 4;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (storedBlockCRC  >  limitLast )  {^647^^^^^538^725^[REPLACE] if  ( lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (nInUseShadow  >  zn )  {^606^^^^^538^725^[REPLACE] while  ( bsLiveShadow < zn )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  !=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^610^611^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow .read ( ll8 , NO_RAND_PART_B_STATE , destOffs )  ;^607^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  <=  limit_zt[zn] )  {^620^^^^^538^725^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  ==  1 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  !=  0 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 >> 1 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( su_tPos )  & vec;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( dest , n , su_rTPos )  ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( minLen  <=  inUse06 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 5 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( su_rNToGo  ||  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  >  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  !=  3 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^591^592^593^594^595^538^725^[ADD] if  ( groupPos == 0 )  { groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff; base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =true - 1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (origPtr )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  >  blockSize100k )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (offs )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  ==  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE -false;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^637^^^^^538^725^[ADD] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = storedCombinedCRC;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE -null;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  &  base_zt[zn]];^637^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int s = -1 + 1;^580^^^^^538^725^[REPLACE] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = storedBlockCRC;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.close (  ) ;^607^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 1 * 1 << zn )  - 1 * 1 ) ;^616^617^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in .read ( pos , groupNo , thech )  ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^640^^^^^538^725^[ADD] final byte ch = seqToUnseq[yy[0]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^} else if  ( nextSym  !=  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  >=  1 % 0;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^} else if  ( nextSym  ||  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  != zn;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  ||  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =this - 1 * 2;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 7 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lastShadow  >  limitLast )  {^647^^^^^538^725^[REPLACE] if  ( lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++lastShadow  ==  su_i2 )  {^651^^^^^538^725^[REPLACE] if  ( ++lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REMOVE]^if  ( lastShadow >= limitLast )  {     throw new IOException ( "block overrun" ) ; }^651^^^^^538^725^[REMOVE] ^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (storedBlockCRC  ==  3 )  {^664^^^^^538^725^[REPLACE] if  ( nextSym <= 16 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( yy, 3, yy, 1,storedBlockCRC - 1 ) ;^669^^^^^664^670^[REPLACE] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = zt - inUse16; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym -storedBlockCRC; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^groupPos = G_SIZE - 1;zt = selector[++groupNo] & 0xff;base_zt = base[zt];limit_zt = limit[zt];^674^675^676^677^678^538^725^[ADD] if  ( groupPos == 0 )  { groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff; base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE -true;^675^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  !=  0 )  {^691^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 2;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^693^^^^^538^725^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (vec  <=  0 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 2;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_ch2 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  !=  0 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 10;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_count )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 % 3;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 - 2 )  &offs;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  (offs  !=  0 )  {^622^^^^^538^725^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <  2 )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 0 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^583^584^585^586^^538^725^[ADD] if  ( nextSym == RUNA )  { s += n; } else if  ( nextSym == RUNB )  { s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += zn  <=  inUse16;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += zn  >  inUse16;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( zt  !=  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=zn  <=  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  !=  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  ^  1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <  4 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = nInUseShadow;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym  ==  1 * 3; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  >=  1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^minLens_zt = minLens[zt];^596^597^^^^538^725^[ADD] perm_zt = perm[zt]; minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( nb )  & zvec;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & vec;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  >  base_zt[zn]];^637^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^ll8[lastShadow] ;^657^^^^^538^725^[REPLACE] ll8[lastShadow] = seqToUnseq[tmp];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  !=  1;^675^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^zt = selector[++groupNo] & 0xff;^675^676^^^^538^725^[ADD] groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^676^677^^^^538^725^[ADD] zt = selector[++groupNo] & 0xff; base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^677^^^^^538^725^[ADD] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^678^^^^^538^725^[ADD] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (storedBlockCRC )  & thech;^708^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec -zt];^718^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^718^^^^^538^725^[ADD] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int s = -2;^580^^^^^538^725^[REPLACE] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( storedCombinedCRC - zn )  ) |  (  ( 1 << zn )  - 1 ) ;^616^617^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte ch = seqToUnseq[yy[1]];^640^^^^^538^725^[REPLACE] final byte ch = seqToUnseq[yy[0]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char tmp = yy[nextSym  >=  1];^655^^^^^538^725^[REPLACE] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = offs;^685^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 4 << zn )  - 4 ) ;^699^700^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^699^700^^^^538^725^[ADD] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^696^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.last =  null;^722^^^^^538^725^[REPLACE] this.last = lastShadow;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsBuff = bsBuffShadow; ;^723^^^^^538^725^[REPLACE] this.bsLive = bsLiveShadow;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow; ;^724^^^^^538^725^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = this.nInUse + 2;^728^^^^^727^758^[REPLACE] final InputStream inShadow = this.in;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^728^^^^^727^758^[ADD] final InputStream inShadow = this.in;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^729^^^^^727^758^[REPLACE] final Data dataShadow = this.data;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int zt = dataShadow.selector[groupNo] | 0xff;^730^^^^^727^758^[REPLACE] final int zt = dataShadow.selector[groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] limit_zvec = dataShadow.limit[zt];^731^^^^^727^758^[REPLACE] final int[] limit_zt = dataShadow.limit[zt];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] base = dataShadow.base;^732^^^^^727^758^[REPLACE] int zn = dataShadow.minLens[zt];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec = bsR ( zvec ) ;^733^^^^^727^758^[REPLACE] int zvec = bsR ( zn ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^734^^^^^727^758^[REPLACE] int bsLiveShadow = this.bsLive;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^735^^^^^727^758^[REPLACE] int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^735^^^^^727^758^[ADD] int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( zvec  ==  limit_zt[zn] )  {^737^^^^^727^758^[REPLACE] while  ( zvec > limit_zt[zn] )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( bsLiveShadow  !=  3 )  {^739^^^^^727^758^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  !=  0 )  {^742^^^^^727^758^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^742^743^744^745^^727^758^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^747^^^^^742^748^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( nextSym )  & zvec;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 2;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^743^744^^^^727^758^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 0;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.close (  ) ;^740^^^^^727^758^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^747^^^^^727^758^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^747^^^^^727^758^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  !=  1 )  {^742^^^^^727^758^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^742^743^744^745^^727^758^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_j2 )  & thech;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 1;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^744^^^^^727^758^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &origPtr;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 5;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec << 3 )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 3 ) ;^751^^^^^727^758^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^751^^^^^727^758^[ADD] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.close (  ) ;^740^^^^^727^758^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^747^^^^^727^758^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^while  ( su_chPrev  !=  inUse16 )  {^739^^^^^727^758^[REPLACE] while  ( bsLiveShadow < 1 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  > zvec )  {^742^^^^^727^758^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^747^^^^^742^748^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^747^^^^^742^748^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 * 0;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^743^^^^^727^758^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^740^^^^^727^758^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  ==  blockSize100k )  {^742^^^^^727^758^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( offs )  & zvec;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 1;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &storedBlockCRC;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn; ;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  (zvec )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^727^758^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsBuff = bsBuffShadow; ;^754^^^^^727^758^[REPLACE] this.bsLive = bsLiveShadow;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow; ;^755^^^^^727^758^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return dataShadow.perm[zt][zvec  !=  dataShadow.base[zt][zn]];;^757^^^^^727^758^[REPLACE] return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.data != null )  {^761^^^^^760^796^[REPLACE] if  ( this.data == null )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^return;^761^762^763^^^760^796^[ADD] if  ( this.data == null )  { return; }^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return retChar;^762^^^^^760^796^[REPLACE] return;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = this.nInUse + 2;^765^^^^^760^796^[REPLACE] final int[] cftab = this.data.cftab;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] tt = this.data .Data ( nextSym )  ;^766^^^^^760^796^[REPLACE] final int[] tt = this.data.initTT ( this.last + 1 ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^766^767^^^^760^796^[ADD] final int[] tt = this.data.initTT ( this.last + 1 ) ; final byte[] ll8 = this.data.ll8;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int alphaSize = this.nInUse + 2;^767^^^^^760^796^[REPLACE] final byte[] ll8 = this.data.ll8;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^cftab[0L] = 0L;^768^^^^^760^796^[REPLACE] cftab[0] = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( this.data.unzftab, 2, cftab, 1, 256 ) ;^769^^^^^760^796^[REPLACE] System.arraycopy ( this.data.unzftab, 0, cftab, 1, 256 ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^769^^^^^760^796^[ADD] System.arraycopy ( this.data.unzftab, 0, cftab, 1, 256 ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 2, c = cftab[0]; i  <  256; i++ )  {^771^^^^^760^796^[REPLACE] for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^c +=  unzftab[i];^772^^^^^760^796^[REPLACE] c += cftab[i];^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^cftab[0] = 0; ;^773^^^^^760^796^[REPLACE] cftab[i] = c;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^773^^^^^760^796^[ADD] cftab[i] = c;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^c +=  null[i];^772^^^^^760^796^[REPLACE] c += cftab[i];^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 3, c = cftab[0]; i <= 256; i++ )  {^771^^^^^760^796^[REPLACE] for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 1, c = cftab[4]; i <= 256; i++ )  {^771^^^^^760^796^[REPLACE] for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0, lastShadow = this.last; i  !=  lastShadow; i++ )  {^776^^^^^760^796^[REPLACE] for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^tt[cftab[ll8[i] | 0xff]++] = i;^777^^^^^760^796^[REPLACE] tt[cftab[ll8[i] & 0xff]++] = i;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^777^^^^^760^796^[ADD] tt[cftab[ll8[i] & 0xff]++] = i;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 1, lastShadow = this.last; i <= lastShadow; i++ )  {^776^^^^^760^796^[REPLACE] for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 0; i < 16; i++ )  { if  ( bsGetBit (  )  )  {^776^^^^^760^796^[REPLACE] for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( this.origPtr < 0 )  ) {^780^^^^^760^796^[REPLACE] if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^780^781^782^^^760^796^[ADD] if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  { throw new IOException  (" ")  ; }^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException  (" ")  ; ;^781^^^^^760^796^[REPLACE] throw new IOException  (" ")  ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^781^^^^^760^796^[REPLACE] throw new IOException  (" ")  ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos =  unzftab[this.origPtr];^784^^^^^760^796^[REPLACE] this.su_tPos = tt[this.origPtr];^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 2;^785^^^^^760^796^[REPLACE] this.su_count = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^785^^^^^760^796^[ADD] this.su_count = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0L;^786^^^^^760^796^[REPLACE] this.su_i2 = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^787^788^789^^^760^796^[ADD] t  if  ( this.blockRandomised )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( inShadow != null )  {^789^^^^^760^796^[REPLACE] if  ( this.blockRandomised )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^789^790^791^792^^760^796^[ADD] if  ( this.blockRandomised )  { this.su_rNToGo = 0; this.su_rTPos = 0; setupRandPartA (  ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^setupRandPartB (  ) ;^794^^^^^789^795^[REPLACE] setupNoRandPartA (  ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = 4;^790^^^^^760^796^[REPLACE] this.su_rNToGo = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 2;^791^^^^^760^796^[REPLACE] this.su_rTPos = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0; ;^790^^^^^760^796^[REPLACE] this.su_rNToGo = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 % 1;^791^^^^^760^796^[REPLACE] this.su_rTPos = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (su_i2  >  this.last )  {^799^^^^^798^821^[REPLACE] if  ( this.su_i2 <= this.last )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedBlockCRC = bsGetInt (  ) ;^817^^^^^798^821^[REPLACE] endBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^817^818^^^^798^821^[ADD] endBlock (  ) ; initBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedBlockCRC = bsGetInt (  ) ;^818^^^^^798^821^[REPLACE] initBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedBlockCRC = bsGetInt (  ) ;^819^^^^^798^821^[REPLACE] setupBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  &&  0 )  {^803^^^^^798^821^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  || nInUseShadow )  {^805^^^^^798^821^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0; ;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^806^^^^^798^821^[ADD] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  >  1;^804^^^^^798^821^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0L;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  !=  512 )  {^805^^^^^798^821^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_rTPos = 0;^805^806^807^^^798^821^[ADD] if  ( ++this.su_rTPos == 512 )  { this.su_rTPos = 0; }^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 4;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentChar = this.su_ch2; ;^800^^^^^798^821^[REPLACE] this.su_chPrev = this.su_ch2;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos ;^802^^^^^798^821^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^802^^^^^798^821^[ADD] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^804^^^^^798^821^[ADD] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 % 0;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo  &&  1 )  ? 1 : 0;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^811^812^^^^798^821^[ADD] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0; this.su_i2++;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2  =  1 ;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow; ;^813^^^^^798^821^[REPLACE] this.currentChar = su_ch2Shadow;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^814^^^^^798^821^[REPLACE] this.currentState = RAND_PART_B_STATE;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^814^^^^^798^821^[ADD] this.currentState = RAND_PART_B_STATE;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int su_ch2Shadow = this.data.ll8[this.su_tPos] | 0xff;^801^^^^^798^821^[REPLACE] int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  &&  3 )  {^803^^^^^798^821^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  &&  2 )  {^805^^^^^798^821^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 >>> 2;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  <=  1;^804^^^^^798^821^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 - 4;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 >>> 3;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^800^801^^^^798^821^[ADD] this.su_chPrev = this.su_ch2; int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  >  1 + 4;^804^^^^^798^821^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2  =  0;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_i2++;^811^812^^^^798^821^[ADD] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0; this.su_i2++;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_i2  <  this.last )  {^824^^^^^823^839^[REPLACE] if  ( this.su_i2 <= this.last )  {^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE; ;^834^^^^^823^839^[REPLACE] this.currentState = NO_RAND_PART_A_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentChar = this.su_ch2; ;^825^^^^^823^839^[REPLACE] this.su_chPrev = this.su_ch2;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentChar = su_ch2Shadow; ;^827^^^^^823^839^[REPLACE] this.su_ch2 = su_ch2Shadow;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  =  this.su_tPos ;^828^^^^^823^839^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow; ;^830^^^^^823^839^[REPLACE] this.currentChar = su_ch2Shadow;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^830^^^^^823^839^[ADD] this.currentChar = su_ch2Shadow;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^831^^^^^823^839^[REPLACE] this.currentState = NO_RAND_PART_B_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int su_ch2Shadow = this.data.ll8[this.su_tPos] | 0xff;^826^^^^^823^839^[REPLACE] int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.currentState = NO_RAND_PART_B_STATE;^830^831^^^^823^839^[ADD] this.currentChar = su_ch2Shadow; this.currentState = NO_RAND_PART_B_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.crc.updateCRC ( su_ch2Shadow ) ;^831^832^^^^823^839^[ADD] this.currentState = NO_RAND_PART_B_STATE; this.crc.updateCRC ( su_ch2Shadow ) ;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_ch2  ==  this.su_chPrev )  {^842^^^^^841^867^[REPLACE] if  ( this.su_ch2 != this.su_chPrev )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( ++this.su_count  < minLen )  {^846^^^^^841^867^[REPLACE] } else if  ( ++this.su_count >= 4 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^864^^^^^846^866^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  ||  blockSize100k )  {^849^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 / 2;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  ==  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 / 4;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  !=  440 )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 2;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (offs  !=  1 )  {^859^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 1 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 1 / 3;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] | 0xff ) ;^847^^^^^841^867^[REPLACE] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  =  this.su_tPos ;^848^^^^^841^867^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  <=  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 4;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 0 + 2;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^858^^^^^841^867^[REPLACE] this.currentState = RAND_PART_C_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^858^^^^^841^867^[ADD] this.currentState = RAND_PART_C_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 4;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (nInUse  ||  0 )  {^849^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0; ;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  |  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^850^^^^^841^867^[ADD] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  &&  512 )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 1;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^852^^^^^841^867^[ADD] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  !=  1 )  {^859^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 1 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 3;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  = null ;^848^^^^^841^867^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  ^  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 / 0;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 2;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0; ;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^864^^^^^841^867^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^843^^^^^841^867^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 0; ;^844^^^^^841^867^[REPLACE] this.su_count = 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  else {^846^^^^^841^867^[REPLACE] } else if  ( ++this.su_count >= 4 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  != nGroups )  {^849^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  <  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  != nSelectors )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  &&  3 )  {^859^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 1 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_z ^= 1;^859^860^861^^^841^867^[ADD] if  ( this.su_rNToGo == 1 )  { this.su_z ^= 1; }^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 1L;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^848^^^^^841^867^[ADD] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  ||  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 0 + 1;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( nb  !=  blockSize10L0Lk )  {^849^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  ||  512 )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 3;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  && pp )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  ||  1 )  {^859^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 1 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 1 * 0;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^844^845^^^^841^867^[ADD] this.su_count = 1; setupRandPartA (  ) ;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_tPos = this.data.tt[this.su_tPos];^847^848^^^^841^867^[ADD] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ; this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  !=  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 0L;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (offs  >  this.su_z )  {^870^^^^^869^880^[REPLACE] if  ( this.su_j2 < this.su_z )  {^[METHOD] setupRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^875^^^^^869^880^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 1; ;^877^^^^^869^880^[REPLACE] this.su_count = 0;^[METHOD] setupRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_chPrev = this.su_ch2; ;^871^^^^^869^880^[REPLACE] this.currentChar = this.su_ch2;^[METHOD] setupRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^871^^^^^869^880^[ADD] this.currentChar = this.su_ch2;^[METHOD] setupRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 4;^877^^^^^869^880^[REPLACE] this.su_count = 0;^[METHOD] setupRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_ch2  == nextSym )  {^883^^^^^882^894^[REPLACE] if  ( this.su_ch2 != this.su_chPrev )  {^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  else {^886^^^^^882^894^[REPLACE] } else if  ( ++this.su_count >= 4 )  {^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^setupRandPartB (  ) ;^892^^^^^882^894^[REPLACE] setupNoRandPartA (  ) ;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^892^^^^^882^894^[ADD] setupNoRandPartA (  ) ;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] | 0xff ) ;^887^^^^^882^894^[REPLACE] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos ;^888^^^^^882^894^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 0 * 4;^889^^^^^882^894^[REPLACE] this.su_j2 = 0;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^887^888^^^^882^894^[ADD] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ; this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  =  this.su_tPos ;^888^^^^^882^894^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 4;^889^^^^^882^894^[REPLACE] this.su_j2 = 0;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 2;^884^^^^^882^894^[REPLACE] this.su_count = 1;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( ++this.su_count  ==  4 )  {^886^^^^^882^894^[REPLACE] } else if  ( ++this.su_count >= 4 )  {^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_j2 = 0;^888^889^^^^882^894^[ADD] this.su_tPos = this.data.tt[this.su_tPos]; this.su_j2 = 0;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 2;^889^^^^^882^894^[REPLACE] this.su_j2 = 0;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 0; ;^884^^^^^882^894^[REPLACE] this.su_count = 1;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 0L;^889^^^^^882^894^[REPLACE] this.su_j2 = 0;^[METHOD] setupNoRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_j2  !=  this.su_z )  {^897^^^^^896^908^[REPLACE] if  ( this.su_j2 < this.su_z )  {^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 2;^905^^^^^896^908^[REPLACE] this.su_count = 0;^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow; ;^899^^^^^896^908^[REPLACE] this.currentChar = su_ch2Shadow;^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_A_STATE; ;^902^^^^^896^908^[REPLACE] this.currentState = NO_RAND_PART_C_STATE;^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^898^^^^^896^908^[REPLACE] int su_ch2Shadow = this.su_ch2;^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^902^^^^^896^908^[ADD] this.currentState = NO_RAND_PART_C_STATE;^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^898^899^^^^896^908^[ADD] int su_ch2Shadow = this.su_ch2; this.currentChar = su_ch2Shadow;^[METHOD] setupNoRandPartC [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final InputStream inShadow = this.in;^959^^^^^958^970^[REPLACE] int[] ttShadow = this.tt;^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( ttShadow == true )  ) {^965^^^^^958^970^[REPLACE] if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.tt =  ttShadow^966^^^^^958^970^[REPLACE] this.tt = ttShadow = new int[length];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^966^^^^^958^970^[ADD] this.tt = ttShadow = new int[length];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return tt;^969^^^^^958^970^[REPLACE] return ttShadow;^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final boolean[] inUse  = null ;^913^^^^^^^[REPLACE] final boolean[] inUse = new boolean[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] seqToUnseq  = null ;^915^^^^^^^[REPLACE] final byte[] seqToUnseq = new byte[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selector ;^916^^^^^^^[REPLACE] final byte[] selector = new byte[MAX_SELECTORS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selectorMtf ;^917^^^^^^^[REPLACE] final byte[] selectorMtf = new byte[MAX_SELECTORS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] unzftab  = null ;^923^^^^^^^[REPLACE] final int[] unzftab = new int[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];^925^^^^^^^[REPLACE] final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] base  = null ;^926^^^^^^^[REPLACE] final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm ;^927^^^^^^^[REPLACE] final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[] minLens = new int[N_GROUPS];^928^^^^^^^[REPLACE] final int[] minLens = new int[N_GROUPS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] cftab ;^930^^^^^^^[REPLACE] final int[] cftab = new int[257];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] getAndMoveToFrontDecode_yy ;^931^^^^^^^[REPLACE] final char[] getAndMoveToFrontDecode_yy = new char[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char[][] temp_charArray2d ;^932^^^^^^^[REPLACE] final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] recvDecodingTables_pos ;^934^^^^^^^[REPLACE] final byte[] recvDecodingTables_pos = new byte[N_GROUPS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.ll8 = new byte[blockSize100k  ;^948^^^^^945^949^[REPLACE] this.ll8 = new byte[blockSize100k * BZip2Constants.baseBlockSize];^[METHOD] <init> [TYPE] BZip2CompressorInputStream$Data(int) [PARAMETER] int blockSize100k [CLASS] Data   [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  int[][] base  limit  perm  [TYPE]  boolean false  true  [TYPE]  char[][] temp_charArray2d  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  boolean[] inUse  [TYPE]  int blockSize100k  [TYPE]  char[] getAndMoveToFrontDecode_yy 
[REPLACE]^if  (  ( ttShadow == null )  ||  ( ttShadow.length (  )  < length (  )  )  )  {^965^^^^^958^970^[REPLACE] if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  int[][] base  limit  perm  [TYPE]  boolean false  true  [TYPE]  char[][] temp_charArray2d  [TYPE]  int[] cftab  minLens  tt  ttShadow  unzftab  [TYPE]  boolean[] inUse  [TYPE]  int length  [TYPE]  char[] getAndMoveToFrontDecode_yy 
[REPLACE]^this.tt =  ttShadow^966^^^^^958^970^[REPLACE] this.tt = ttShadow = new int[length];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  int[][] base  limit  perm  [TYPE]  boolean false  true  [TYPE]  char[][] temp_charArray2d  [TYPE]  int[] cftab  minLens  tt  ttShadow  unzftab  [TYPE]  boolean[] inUse  [TYPE]  int length  [TYPE]  char[] getAndMoveToFrontDecode_yy 
[REPLACE]^return tt;^969^^^^^958^970^[REPLACE] return ttShadow;^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  byte[] ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  int[][] base  limit  perm  [TYPE]  boolean false  true  [TYPE]  char[][] temp_charArray2d  [TYPE]  int[] cftab  minLens  tt  ttShadow  unzftab  [TYPE]  boolean[] inUse  [TYPE]  int length  [TYPE]  char[] getAndMoveToFrontDecode_yy 
