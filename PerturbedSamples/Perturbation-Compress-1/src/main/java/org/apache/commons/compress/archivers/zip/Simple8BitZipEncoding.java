[REPLACE]^public  char unicode;^53^^^^^^^[REPLACE] public final char unicode;^ [CLASS] Simple8BitZipEncoding Simple8BitChar  
[REPLACE]^private  char[] highChars;^77^^^^^^^[REPLACE] private final char[] highChars;^ [CLASS] Simple8BitZipEncoding Simple8BitChar  
[REPLACE]^this.unicode = unicode; ;^57^^^^^56^59^[REPLACE] this.code = code;^[METHOD] <init> [TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char) [PARAMETER] byte code char unicode [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  char[] highChars 
[REPLACE]^this.code = code; ;^58^^^^^56^59^[REPLACE] this.unicode = unicode;^[METHOD] <init> [TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char) [PARAMETER] byte code char unicode [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  char[] highChars 
[REPLACE]^this.highChars =  null;^91^^^^^90^102^[REPLACE] this.highChars = highChars;^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^this.reverseMapping ;^92^^^^^90^102^[REPLACE] this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^byte code = 3;^94^^^^^90^102^[REPLACE] byte code = 127;^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i = 0; i < this.highChars.length + 2; ++i )  {^96^^^^^90^102^[REPLACE] for  ( int i = 0; i < this.highChars.length; ++i )  {^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^^96^97^98^99^^90^102^[ADD] for  ( int i = 0; i < this.highChars.length; ++i )  { this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ; }^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^this.reverseMapping.get ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^97^98^^^^90^102^[REPLACE] this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i = 0 ; i < this.highChars.length; ++i )  {^96^^^^^90^102^[REPLACE] for  ( int i = 0; i < this.highChars.length; ++i )  {^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^this.reverseMapping   ;^101^^^^^90^102^[REPLACE] Collections.sort ( this.reverseMapping ) ;^[METHOD] <init> [TYPE] Simple8BitZipEncoding(char[]) [PARAMETER] char[] highChars [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r = this.encodeHighChar ( c ) ;^62^^^^^61^65^[REPLACE] Simple8BitChar a =  ( Simple8BitChar )  o;^[METHOD] compareTo [TYPE] int [PARAMETER] Object o [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar a  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  Object o  [TYPE]  char[] highChars 
[ADD]^^62^^^^^61^65^[ADD] Simple8BitChar a =  ( Simple8BitChar )  o;^[METHOD] compareTo [TYPE] int [PARAMETER] Object o [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar a  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  Object o  [TYPE]  char[] highChars 
[REPLACE]^return false ;^64^^^^^61^65^[REPLACE] return this.unicode - a.unicode;^[METHOD] compareTo [TYPE] int [PARAMETER] Object o [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar a  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  Object o  [TYPE]  char[] highChars 
[REPLACE]^return "0x" +   0xffff & unicode   + "->0x" + Integer.^68^69^^^^67^70^[REPLACE] return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte code  [TYPE]  char[] highChars 
[REPLACE]^if  ( b  <  0 )  {^112^^^^^110^118^[REPLACE] if  ( b >= 0 )  {^[METHOD] decodeByte [TYPE] char [PARAMETER] byte b [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^return out;^113^^^^^110^118^[REPLACE] return  ( char )  b;^[METHOD] decodeByte [TYPE] char [PARAMETER] byte b [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^return this.highChars[128L  |  b];^117^^^^^110^118^[REPLACE] return this.highChars[128 + b];^[METHOD] decodeByte [TYPE] char [PARAMETER] byte b [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char unicode  [TYPE]  List reverseMapping  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^if  (  c < 128 )  {^126^^^^^124^132^[REPLACE] if  ( c >= 0 && c < 128 )  {^[METHOD] canEncodeChar [TYPE] boolean [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^return false;^127^^^^^124^132^[REPLACE] return true;^[METHOD] canEncodeChar [TYPE] boolean [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r = this.encodeHighChar ( unicode ) ;^130^^^^^124^132^[REPLACE] Simple8BitChar r = this.encodeHighChar ( c ) ;^[METHOD] canEncodeChar [TYPE] boolean [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^return r ;^131^^^^^124^132^[REPLACE] return r != null;^[METHOD] canEncodeChar [TYPE] boolean [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char[] highChars 
[REPLACE]^if  ( c >= 0 ) {^145^^^^^143^156^[REPLACE] if  ( c >= 0 && c < 128 )  {^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^return false;^147^^^^^143^156^[REPLACE] return true;^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r = this.encodeHighChar ( unicode ) ;^150^^^^^143^156^[REPLACE] Simple8BitChar r = this.encodeHighChar ( c ) ;^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^if  ( r != false )  {^151^^^^^143^156^[REPLACE] if  ( r == null )  {^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^return true;^152^^^^^143^156^[REPLACE] return false;^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^bb.allocate ( r.code ) ;^154^^^^^143^156^[REPLACE] bb.put ( r.code ) ;^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^return false;^155^^^^^143^156^[REPLACE] return true;^[METHOD] pushEncodedChar [TYPE] boolean [PARAMETER] ByteBuffer bb char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  ByteBuffer bb  [TYPE]  char[] highChars 
[REPLACE]^int i2 = 2;^167^^^^^164^198^[REPLACE] int i0 = 0;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^168^^^^^164^198^[REPLACE] int i1 = this.reverseMapping.size (  ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^while  ( i1  <  i0 )  {^170^^^^^164^198^[REPLACE] while  ( i1 > i0 )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^170^171^172^^^164^198^[ADD] while  ( i1 > i0 )  {  int i = i0 +  ( i1 - i0 )  / 2;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( m.unicode  ||  c )  {^176^^^^^164^198^[REPLACE] if  ( m.unicode == c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return r;^177^^^^^164^198^[REPLACE] return m;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( m.unicode  >  c )  {^180^^^^^164^198^[REPLACE] if  ( m.unicode < c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i1 =  i0;^183^^^^^180^184^[REPLACE] i1 = i;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^ii10 = i + 1;^181^^^^^164^198^[REPLACE] i0 = i + 1;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i0 =i1 + 1;^181^^^^^164^198^[REPLACE] i0 = i + 1;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^181^^^^^164^198^[ADD] i0 = i + 1;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i1 =  i0;^183^^^^^164^198^[REPLACE] i1 = i;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^183^^^^^164^198^[ADD] i1 = i;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^int i =i1 +  ( i1 - i )  / 2 - 2;^172^^^^^164^198^[REPLACE] int i = i0 +  ( i1 - i0 )  / 2;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i1 ) ;^174^^^^^164^198^[REPLACE] Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( uniunicodeode  &&  c )  {^176^^^^^164^198^[REPLACE] if  ( m.unicode == c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  (unicode  <=  unicode )  {^180^^^^^164^198^[REPLACE] if  ( m.unicode < c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i0 = i +i1;^181^^^^^164^198^[REPLACE] i0 = i + 1;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i0 =i2 + 2;^181^^^^^164^198^[REPLACE] i0 = i + 1;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^int i = i1 +  ( i1 - i0 )  / 2 * 4;^172^^^^^164^198^[REPLACE] int i = i0 +  ( i1 - i0 )  / 2;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( i0 >= this.reverseMapping.length (  )  )  {^187^^^^^164^198^[REPLACE] if  ( i0 >= this.reverseMapping.size (  )  )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^187^188^189^^^164^198^[ADD] if  ( i0 >= this.reverseMapping.size (  )  )  { return null; }^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return this;^188^^^^^164^198^[REPLACE] return null;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return false;^188^^^^^164^198^[REPLACE] return null;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i1 ) ;^191^^^^^164^198^[REPLACE] Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^191^^^^^164^198^[ADD] Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( r.unicode  ==  c )  {^193^^^^^164^198^[REPLACE] if  ( r.unicode != c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return false;^194^^^^^164^198^[REPLACE] return null;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return m;^197^^^^^164^198^[REPLACE] return r;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( !this .canEncode ( name )   )  {^210^^^^^204^216^[REPLACE] if  ( !this.canEncodeChar ( c )  )  {^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^return true;^211^^^^^204^216^[REPLACE] return false;^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i=0;i<name.length (  )  *  2;++i )  {^206^^^^^204^216^[REPLACE] for  ( int i=0;i<name.length (  ) ;++i )  {^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^^206^207^208^^^204^216^[ADD] for  ( int i=0;i<name.length (  ) ;++i )  {  char c = name.charAt ( i ) ;^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  ( !this.canEncodeChar ( unicode )  )  {^210^^^^^204^216^[REPLACE] if  ( !this.canEncodeChar ( c )  )  {^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^char c = name.String ( i ) ;^208^^^^^204^216^[REPLACE] char c = name.charAt ( i ) ;^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i=0 ;i<name.length (  ) ;++i )  {^206^^^^^204^216^[REPLACE] for  ( int i=0;i<name.length (  ) ;++i )  {^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^char [] ret = new char[data.length];^208^^^^^204^216^[REPLACE] char c = name.charAt ( i ) ;^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^return false;^215^^^^^204^216^[REPLACE] return true;^[METHOD] canEncode [TYPE] boolean [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^ByteBuffer out = ByteBuffer.allocate ( name.length (  )  - 5+ 6 +  ( name.length (  )  - 5 + 1 )  / 2 ) ;^223^224^^^^222^243^[REPLACE] ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^^223^224^^^^222^243^[ADD] ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  ( out.remaining (  )   <=  3 )  {^230^^^^^222^243^[REPLACE] if  ( out.remaining (  )  < 6 )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   !=  6 ) ;^231^^^^^222^243^[REPLACE] out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  ( !this.canEncodeChar ( out,c )  )  {^234^^^^^222^243^[REPLACE] if  ( !this.pushEncodedChar ( out,c )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^ZipEncodingHelper.appendSurrogate ( out,unicode ) ;^236^^^^^222^243^[REPLACE] ZipEncodingHelper.appendSurrogate ( out,c ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i=0;i<name.length (  )  %  2;++i )  {^226^^^^^222^243^[REPLACE] for  ( int i=0;i<name.length (  ) ;++i )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  (i (  )   ==  6 )  {^230^^^^^222^243^[REPLACE] if  ( out.remaining (  )  < 6 )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  +i ) ;^231^^^^^222^243^[REPLACE] out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  ( !this .canEncodeChar ( unicode )   )  {^234^^^^^222^243^[REPLACE] if  ( !this.pushEncodedChar ( out,c )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^^234^235^236^237^^222^243^[ADD] if  ( !this.pushEncodedChar ( out,c )  )  {  ZipEncodingHelper.appendSurrogate ( out,c ) ; }^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^ZipEncodingHelper .growBuffer ( out , i )  ;^236^^^^^222^243^[REPLACE] ZipEncodingHelper.appendSurrogate ( out,c ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ==  8 ) ;^231^^^^^222^243^[REPLACE] out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^char c = name.String ( i ) ;^228^^^^^222^243^[REPLACE] char c = name.charAt ( i ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^^228^^^^^222^243^[ADD] char c = name.charAt ( i ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i=0 ;i<name.length (  ) ;++i )  {^226^^^^^222^243^[REPLACE] for  ( int i=0;i<name.length (  ) ;++i )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^^226^227^228^^^222^243^[ADD] for  ( int i=0;i<name.length (  ) ;++i )  {  char c = name.charAt ( i ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out.limit ( out .limit ( i )   ) ;^240^^^^^222^243^[REPLACE] out.limit ( out.position (  )  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out.limit ( out.remaining (  )  ) ;^240^^^^^222^243^[REPLACE] out.limit ( out.position (  )  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out.remaining (  ) ;^241^^^^^222^243^[REPLACE] out.rewind (  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^return false;^242^^^^^222^243^[REPLACE] return out;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^char c = name.charAt ( i ) ;^250^^^^^249^257^[REPLACE] char [] ret = new char[data.length];^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^for  ( int i=0 ;i<data.length - 5;++i )  {^252^^^^^249^257^[REPLACE] for  ( int i=0;i<data.length;++i )  {^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^ret[i] ;^253^^^^^249^257^[REPLACE] ret[i] = this.decodeByte ( data[i] ) ;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[ADD]^^253^^^^^249^257^[ADD] ret[i] = this.decodeByte ( data[i] ) ;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^ret[i]  =  ret[i] ;^253^^^^^249^257^[REPLACE] ret[i] = this.decodeByte ( data[i] ) ;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^for  ( int i=0 ;i<data.length;++i )  {^252^^^^^249^257^[REPLACE] for  ( int i=0;i<data.length;++i )  {^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^return out;^256^^^^^249^257^[REPLACE] return new String ( ret ) ;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^public final String unicode;^53^^^^^^^[REPLACE] public final char unicode;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^public  byte code;^54^^^^^^^[REPLACE] public final byte code;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^this.unicode = unicode; ;^57^^^^^56^59^[REPLACE] this.code = code;^[METHOD] <init> [TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char) [PARAMETER] byte code char unicode [CLASS] Simple8BitChar   [TYPE]  char unicode  [TYPE]  byte code  [TYPE]  boolean false  true 
[REPLACE]^this.code = code; ;^58^^^^^56^59^[REPLACE] this.unicode = unicode;^[METHOD] <init> [TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char) [PARAMETER] byte code char unicode [CLASS] Simple8BitChar   [TYPE]  char unicode  [TYPE]  byte code  [TYPE]  boolean false  true 
[ADD]^^58^^^^^56^59^[ADD] this.unicode = unicode;^[METHOD] <init> [TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char) [PARAMETER] byte code char unicode [CLASS] Simple8BitChar   [TYPE]  char unicode  [TYPE]  byte code  [TYPE]  boolean false  true 
[REPLACE]^returnunicode - a.unicode;^64^^^^^61^65^[REPLACE] return this.unicode - a.unicode;^[METHOD] compareTo [TYPE] int [PARAMETER] Object o [CLASS] Simple8BitChar   [TYPE]  char unicode  [TYPE]  Object o  [TYPE]  Simple8BitChar a  [TYPE]  boolean false  true  [TYPE]  byte code 
[REPLACE]^return false ;^68^69^^^^67^70^[REPLACE] return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Simple8BitChar   [TYPE]  char unicode  [TYPE]  byte code  [TYPE]  boolean false  true 
