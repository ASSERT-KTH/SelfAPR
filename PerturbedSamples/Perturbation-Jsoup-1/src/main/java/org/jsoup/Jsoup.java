[REPLACE]^return Parser .parse ( baseUri )  ;^28^^^^^27^29^[REPLACE] return Parser.parse ( html, baseUri ) ;^[METHOD] parse [TYPE] Document [PARAMETER] String html String baseUri [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String baseUri  html 
[REPLACE]^return Parser.parse ( html, baseUri ) ;^41^^^^^40^42^[REPLACE] return Parser.parse ( html, "" ) ;^[METHOD] parse [TYPE] Document [PARAMETER] String html [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String html 
[REPLACE]^String html = DataUtil.load ( in, charsetName ) ;^55^^^^^54^57^[REPLACE] String html = DataUtil.load ( url, timeoutMillis ) ;^[METHOD] parse [TYPE] Document [PARAMETER] URL url int timeoutMillis [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String html  [TYPE]  URL url  [TYPE]  int timeoutMillis 
[ADD]^^55^56^^^^54^57^[ADD] String html = DataUtil.load ( url, timeoutMillis ) ; return parse ( html, url.toExternalForm (  )  ) ;^[METHOD] parse [TYPE] Document [PARAMETER] URL url int timeoutMillis [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String html  [TYPE]  URL url  [TYPE]  int timeoutMillis 
[REPLACE]^return cleaner.isValid ( dirty ) ;^56^^^^^54^57^[REPLACE] return parse ( html, url.toExternalForm (  )  ) ;^[METHOD] parse [TYPE] Document [PARAMETER] URL url int timeoutMillis [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String html  [TYPE]  URL url  [TYPE]  int timeoutMillis 
[REPLACE]^String html = DataUtil.load ( in, html ) ;^70^^^^^69^72^[REPLACE] String html = DataUtil.load ( in, charsetName ) ;^[METHOD] parse [TYPE] Document [PARAMETER] File in String charsetName String baseUri [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String baseUri  charsetName  html  [TYPE]  File in 
[REPLACE]^return parse ( charsetName, baseUri ) ;^71^^^^^69^72^[REPLACE] return parse ( html, baseUri ) ;^[METHOD] parse [TYPE] Document [PARAMETER] File in String charsetName String baseUri [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String baseUri  charsetName  html  [TYPE]  File in 
[REPLACE]^String html = DataUtil.load ( url, timeoutMillis ) ;^85^^^^^84^87^[REPLACE] String html = DataUtil.load ( in, charsetName ) ;^[METHOD] parse [TYPE] Document [PARAMETER] File in String charsetName [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String charsetName  html  [TYPE]  File in 
[REPLACE]^return cleaner.isValid ( dirty ) ;^86^^^^^84^87^[REPLACE] return parse ( html, in.getAbsolutePath (  )  ) ;^[METHOD] parse [TYPE] Document [PARAMETER] File in String charsetName [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String charsetName  html  [TYPE]  File in 
[REPLACE]^return Parser.parse ( bodyHtml, baseUri ) ;^99^^^^^98^100^[REPLACE] return Parser.parseBodyFragment ( bodyHtml, baseUri ) ;^[METHOD] parseBodyFragment [TYPE] Document [PARAMETER] String bodyHtml String baseUri [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String baseUri  bodyHtml 
[REPLACE]^return Parser .parseBodyFragment ( bodyHtml )  ;^111^^^^^110^112^[REPLACE] return Parser.parseBodyFragment ( bodyHtml, "" ) ;^[METHOD] parseBodyFragment [TYPE] Document [PARAMETER] String bodyHtml [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  String bodyHtml 
[REPLACE]^Document dirty = parseBodyFragment ( bodyHtml, "" ) ;^126^^^^^125^130^[REPLACE] Document dirty = parseBodyFragment ( bodyHtml, baseUri ) ;^[METHOD] clean [TYPE] String [PARAMETER] String bodyHtml String baseUri Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String baseUri  bodyHtml  [TYPE]  Document clean  dirty  [TYPE]  Cleaner cleaner 
[REPLACE]^Document clean = cleaner.clean ( dirty ) ;^127^^^^^125^130^[REPLACE] Cleaner cleaner = new Cleaner ( whitelist ) ;^[METHOD] clean [TYPE] String [PARAMETER] String bodyHtml String baseUri Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String baseUri  bodyHtml  [TYPE]  Document clean  dirty  [TYPE]  Cleaner cleaner 
[REPLACE]^Document.isValid = cleaner.clean ( dirty ) ;^128^^^^^125^130^[REPLACE] Document clean = cleaner.clean ( dirty ) ;^[METHOD] clean [TYPE] String [PARAMETER] String bodyHtml String baseUri Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String baseUri  bodyHtml  [TYPE]  Document clean  dirty  [TYPE]  Cleaner cleaner 
[ADD]^^128^^^^^125^130^[ADD] Document clean = cleaner.clean ( dirty ) ;^[METHOD] clean [TYPE] String [PARAMETER] String bodyHtml String baseUri Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String baseUri  bodyHtml  [TYPE]  Document clean  dirty  [TYPE]  Cleaner cleaner 
[REPLACE]^return cleaner.isValid ( dirty ) ;^129^^^^^125^130^[REPLACE] return clean.body (  ) .html (  ) ;^[METHOD] clean [TYPE] String [PARAMETER] String bodyHtml String baseUri Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String baseUri  bodyHtml  [TYPE]  Document clean  dirty  [TYPE]  Cleaner cleaner 
[REPLACE]^return cleaner.isValid ( dirty ) ;^143^^^^^142^144^[REPLACE] return clean ( bodyHtml, "", whitelist ) ;^[METHOD] clean [TYPE] String [PARAMETER] String bodyHtml Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String bodyHtml 
[REPLACE]^Document dirty = parseBodyFragment ( bodyHtml, baseUri ) ;^155^^^^^154^158^[REPLACE] Document dirty = parseBodyFragment ( bodyHtml, "" ) ;^[METHOD] isValid [TYPE] boolean [PARAMETER] String bodyHtml Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String bodyHtml  [TYPE]  Document dirty  [TYPE]  Cleaner cleaner 
[ADD]^^155^^^^^154^158^[ADD] Document dirty = parseBodyFragment ( bodyHtml, "" ) ;^[METHOD] isValid [TYPE] boolean [PARAMETER] String bodyHtml Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String bodyHtml  [TYPE]  Document dirty  [TYPE]  Cleaner cleaner 
[REPLACE]^Document clean = cleaner.clean ( dirty ) ;^156^^^^^154^158^[REPLACE] Cleaner cleaner = new Cleaner ( whitelist ) ;^[METHOD] isValid [TYPE] boolean [PARAMETER] String bodyHtml Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String bodyHtml  [TYPE]  Document dirty  [TYPE]  Cleaner cleaner 
[REPLACE]^return cleaner .isValid ( bodyHtml , whitelist )  ;^157^^^^^154^158^[REPLACE] return cleaner.isValid ( dirty ) ;^[METHOD] isValid [TYPE] boolean [PARAMETER] String bodyHtml Whitelist whitelist [CLASS] Jsoup   [TYPE]  boolean false  true  [TYPE]  Whitelist whitelist  [TYPE]  String bodyHtml  [TYPE]  Document dirty  [TYPE]  Cleaner cleaner 
