[REPLACE]^c1.setRadius ( 0.5 ) ;^81^^^^^80^82^[REPLACE] super ( name ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^DialCap c2 = new DialCap (  ) ;^88^^^^^87^119^[REPLACE] DialCap c1 = new DialCap (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^DialCap c1 = new DialCap (  ) ;^89^^^^^87^119^[REPLACE] DialCap c2 = new DialCap (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^89^^^^^87^119^[ADD] DialCap c2 = new DialCap (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1.equals ( c2 )  ) ;^90^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^90^^^^^87^119^[ADD] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.setFillPaint ( c2 )  ) ;^90^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c1.setOutlineStroke ( 3.0d ) ;^93^^^^^87^119^[REPLACE] c1.setRadius ( 0.5 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.equals ( c2 )  ) ;^94^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1 .getClass (  )   ) ;^94^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c2.setRadius ( 1.0d ) ;^95^^^^^87^119^[REPLACE] c2.setRadius ( 0.5 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^95^96^^^^87^119^[ADD] c2.setRadius ( 0.5 ) ; assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.setFillPaint ( c2 )  ) ;^96^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REMOVE]^c1.setRadius ( 0.5 ) ;^96^^^^^87^119^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1 .getClass (  )   ) ;^96^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^99^100^^^^87^119^[REPLACE] c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^99^100^^^^87^119^[ADD] c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.equals ( c2 )  ) ;^101^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1 .getClass (  )   ) ;^101^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^101^^^^^87^119^[ADD] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^102^103^^^^87^119^[REPLACE] c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^102^103^^^^87^119^[ADD] c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^106^107^^^^87^119^[REPLACE] c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.equals ( c2 )  ) ;^108^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^108^^^^^87^119^[ADD] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1.setFillPaint ( c2 )  ) ;^108^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^109^110^^^^87^119^[REPLACE] c2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1.equals ( c2 )  ) ;^112^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^112^^^^^87^119^[ADD] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.setFillPaint ( c2 )  ) ;^112^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c1.setOutlinePaint ( new BasicStroke ( 1.1f )  ) ;^115^^^^^87^119^[REPLACE] c1.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.equals ( c2 )  ) ;^116^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1 .getClass (  )   ) ;^116^^^^^87^119^[REPLACE] assertFalse ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^c2.setOutlinePaint ( new BasicStroke ( 1.1f )  ) ;^117^^^^^87^119^[REPLACE] c2.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^117^^^^^87^119^[ADD] c2.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertFalse ( c1.equals ( c2 )  ) ;^118^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[ADD]^^118^^^^^87^119^[ADD] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.setFillPaint ( c2 )  ) ;^118^^^^^87^119^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2 
[REPLACE]^DialCap c2 = new DialCap (  ) ;^125^^^^^124^131^[REPLACE] DialCap c1 = new DialCap (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[ADD]^^125^^^^^124^131^[ADD] DialCap c1 = new DialCap (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^DialCap c1 = new DialCap (  ) ;^126^^^^^124^131^[REPLACE] DialCap c2 = new DialCap (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1 .getClass (  )   ) ;^127^^^^^124^131^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^assertTrue ( c1.setFillPaint ( c2 )  ) ;^127^^^^^124^131^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^int h1 = c2.clone (  ) ;^128^^^^^124^131^[REPLACE] int h1 = c1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^int h2 = c1 .clone (  )  ;^129^^^^^124^131^[REPLACE] int h2 = c2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^assertEquals ( c1, c2 ) ;^130^^^^^124^131^[REPLACE] assertEquals ( h1, h2 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[ADD]^^130^^^^^124^131^[ADD] assertEquals ( h1, h2 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  DialCap c1  c2 
[REPLACE]^DialCap c2 = new DialCap (  ) ;^138^^^^^136^167^[REPLACE] DialCap c1 = new DialCap (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^^138^^^^^136^167^[ADD] DialCap c1 = new DialCap (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^DialCap c2 = this;^139^^^^^136^167^[REPLACE] DialCap c2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^c2 =  ( DialCap )  c1.clone (  ) ;^140^141^142^^^136^167^[ADD] try { c2 =  ( DialCap )  c1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c2 =  ( DialCap )  in.readObject (  ) ; ;^141^^^^^136^167^[REPLACE] c2 =  ( DialCap )  c1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^^141^^^^^136^167^[ADD] c2 =  ( DialCap )  c1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1  ==  c2 ) ;^146^^^^^136^167^[REPLACE] assertTrue ( c1 != c2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1.setRadius (  )   ||  c2.getClass (  )  ) ;^147^^^^^136^167^[REPLACE] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c2.setRadius (  )  == c2.getClass (  )  ) ;^147^^^^^136^167^[REPLACE] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1.getClass (  )  == c1.getClass (  )  ) ;^147^^^^^136^167^[REPLACE] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^^147^148^^^^136^167^[ADD] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ; assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertFalse ( c1.equals ( c2 )  ) ;^148^^^^^136^167^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1 .getClass (  )   ) ;^148^^^^^136^167^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c1 ;^151^^^^^136^167^[REPLACE] c1 = new DialCap (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^152^153^^^^136^167^[REPLACE] c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c1 .setOutlineStroke ( null )  ;^154^155^^^^136^167^[REPLACE] c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c1.setOutlinePaint ( new BasicStroke ( 2.0f )  ) ;^156^^^^^136^167^[REPLACE] c1.setOutlineStroke ( new BasicStroke ( 2.0f )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c2 = true;^157^^^^^136^167^[REPLACE] c2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^c2 =  ( DialCap )  c1.clone (  ) ;^158^159^160^^^136^167^[ADD] try { c2 =  ( DialCap )  c1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^c2 =  ( DialCap )  in.readObject (  ) ; ;^159^^^^^136^167^[REPLACE] c2 =  ( DialCap )  c1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1  ==  c2 ) ;^164^^^^^136^167^[REPLACE] assertTrue ( c1 != c2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^164^165^^^^136^167^[ADD] assertTrue ( c1 != c2 ) ; assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1.getClass (  )   &&  c2.getClass (  )  ) ;^165^^^^^136^167^[REPLACE] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c2.setRadius (  )  == c2.getClass (  )  ) ;^165^^^^^136^167^[REPLACE] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1.setRadius (  )  == c1.getClass (  )  ) ;^165^^^^^136^167^[REPLACE] assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REMOVE]^assertFalse ( c1.equals ( c2 )  ) ;^165^^^^^136^167^[REMOVE] ^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertFalse ( c1.equals ( c2 )  ) ;^166^^^^^136^167^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[ADD]^^166^^^^^136^167^[ADD] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( c1.setFillPaint ( c2 )  ) ;^166^^^^^136^167^[REPLACE] assertTrue ( c1.equals ( c2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  DialCap c1  c2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^DialCap c2 = new DialCap (  ) ;^175^^^^^173^218^[REPLACE] DialCap c1 = new DialCap (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^DialCap c2 = true;^176^^^^^173^218^[REPLACE] DialCap c2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( c1 ) ;out.close (  ) ;^178^179^180^181^182^173^218^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( c1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c2 =  ( DialCap )  c1.clone (  ) ; ;^186^^^^^173^218^[REPLACE] c2 =  ( DialCap )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^179^^^^^173^218^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^180^^^^^173^218^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^184^185^^^^173^218^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^assertEquals ( h1, h2 ) ;^192^^^^^173^218^[REPLACE] assertEquals ( c1, c2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c1 ;^195^^^^^173^218^[REPLACE] c1 = new DialCap (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c1 .setOutlinePaint ( null )  ;^196^197^^^^173^218^[REPLACE] c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c1 .setOutlineStroke ( false )  ;^198^199^^^^173^218^[REPLACE] c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c1.setRadius ( 0.5 ) ;^200^^^^^173^218^[REPLACE] c1.setOutlineStroke ( new BasicStroke ( 2.0f )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REMOVE]^c1.setRadius ( 0.5 ) ;^200^^^^^173^218^[REMOVE] ^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c2 = false;^201^^^^^173^218^[REPLACE] c2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^^201^^^^^173^218^[ADD] c2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( c1 ) ;out.close (  ) ;^203^204^205^206^207^173^218^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( c1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^c2 =  ( DialCap )  c1.clone (  ) ; ;^211^^^^^173^218^[REPLACE] c2 =  ( DialCap )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^204^^^^^173^218^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^205^^^^^173^218^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^209^210^^^^173^218^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^^209^210^^^^173^218^[ADD] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^^204^^^^^173^218^[ADD] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^^205^206^^^^173^218^[ADD] ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( c1 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^209^210^^^^173^218^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[REPLACE]^assertEquals ( h1, h2 ) ;^217^^^^^173^218^[REPLACE] assertEquals ( c1, c2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
[ADD]^^217^^^^^173^218^[ADD] assertEquals ( c1, c2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialCapTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  DialCap c1  c2 
