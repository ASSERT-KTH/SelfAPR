[REPLACE]^f1.setInnerRadius ( 0.11 ) ;^39^^^^^38^40^[REPLACE] super ( name ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] StandardDialFrameTests   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^StandardDialFrame f2 = new StandardDialFrame (  ) ;^46^^^^^45^96^[REPLACE] StandardDialFrame f1 = new StandardDialFrame (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^StandardDialFrame f1 = new StandardDialFrame (  ) ;^47^^^^^45^96^[REPLACE] StandardDialFrame f2 = new StandardDialFrame (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.equals ( f2 )  ) ;^48^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^48^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1 .setForegroundPaint ( this )  ;^51^52^^^^45^96^[REPLACE] f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.equals ( f2 )  ) ;^53^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^53^^^^^45^96^[ADD] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1 .getClass (  )   ) ;^53^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^54^55^^^^45^96^[REPLACE] f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^56^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1 .getClass (  )   ) ;^56^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^59^60^^^^45^96^[REPLACE] f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.equals ( f2 )  ) ;^61^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1 .getClass (  )   ) ;^61^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^61^^^^^45^96^[ADD] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^62^63^^^^45^96^[REPLACE] f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^64^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1.setBackgroundPaint ( new BasicStroke ( 1.1f )  ) ;^67^^^^^45^96^[REPLACE] f1.setStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.equals ( f2 )  ) ;^68^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.setBackgroundPaint ( f2 )  ) ;^68^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setBackgroundPaint ( new BasicStroke ( 1.1f )  ) ;^69^^^^^45^96^[REPLACE] f2.setStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^69^^^^^45^96^[ADD] f2.setStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.equals ( f2 )  ) ;^70^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^70^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1.setInnerRadius ( 3.0d ) ;^73^^^^^45^96^[REPLACE] f1.setInnerRadius ( 0.11 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1 .getClass (  )   ) ;^74^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^74^^^^^45^96^[ADD] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^f2.setInnerRadius ( 0.11 ) ;^74^75^^^^45^96^[ADD] assertFalse ( f1.equals ( f2 )  ) ; f2.setInnerRadius ( 0.11 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setInnerRadius ( 0.11D ) ;^75^^^^^45^96^[REPLACE] f2.setInnerRadius ( 0.11 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1 .getClass (  )   ) ;^76^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^76^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^76^^^^^45^96^[ADD] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1.setInnerRadius ( 0.88D ) ;^79^^^^^45^96^[REPLACE] f1.setOuterRadius ( 0.88 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.setBackgroundPaint ( f2 )  ) ;^80^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^80^^^^^45^96^[ADD] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1 .getClass (  )   ) ;^80^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setOuterRadius ( 1.0d ) ;^81^^^^^45^96^[REPLACE] f2.setOuterRadius ( 0.88 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.equals ( f2 )  ) ;^82^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^82^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1.setStartAngle ( 93 ) ;^85^^^^^45^96^[REPLACE] f1.setStartAngle ( 99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1.equals ( f2 )  ) ;^86^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^86^87^^^^45^96^[ADD] assertFalse ( f1.equals ( f2 )  ) ; f2.setStartAngle ( 99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1 .getClass (  )   ) ;^86^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setStartAngle ( 0 ) ;^87^^^^^45^96^[REPLACE] f2.setStartAngle ( 99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.equals ( f2 )  ) ;^88^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1 .getClass (  )   ) ;^88^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f1.setExtent ( 15 ) ;^91^^^^^45^96^[REPLACE] f1.setExtent ( 33 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^assertFalse ( f1.equals ( f2 )  ) ;^91^92^^^^45^96^[ADD] f1.setExtent ( 33 ) ; assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.setBackgroundPaint ( f2 )  ) ;^92^^^^^45^96^[REPLACE] assertFalse ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REMOVE]^f1.setExtent ( 33 ) ;^92^^^^^45^96^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^f2.setExtent ( 0 ) ;^93^^^^^45^96^[REPLACE] f2.setExtent ( 33 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[ADD]^^93^^^^^45^96^[ADD] f2.setExtent ( 33 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( f1.equals ( f2 )  ) ;^94^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( f1 .getClass (  )   ) ;^94^^^^^45^96^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true 
[REPLACE]^StandardDialFrame f2 = new StandardDialFrame (  ) ;^102^^^^^101^108^[REPLACE] StandardDialFrame f1 = new StandardDialFrame (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^StandardDialFrame f1 = new StandardDialFrame (  ) ;^103^^^^^101^108^[REPLACE] StandardDialFrame f2 = new StandardDialFrame (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^assertFalse ( f1.equals ( f2 )  ) ;^104^^^^^101^108^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[ADD]^^104^105^^^^101^108^[ADD] assertTrue ( f1.equals ( f2 )  ) ; int h1 = f1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^104^^^^^101^108^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REMOVE]^f1.setExtent ( 33 ) ;^104^^^^^101^108^[REMOVE] ^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^int h1 = f2.hashCode (  ) ;^105^^^^^101^108^[REPLACE] int h1 = f1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[ADD]^^105^106^^^^101^108^[ADD] int h1 = f1.hashCode (  ) ; int h2 = f2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^int h2 = f1.hashCode (  ) ;^106^^^^^101^108^[REPLACE] int h2 = f2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^assertEquals ( f1, f2 ) ;^107^^^^^101^108^[REPLACE] assertEquals ( h1, h2 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^StandardDialFrame f2 = new StandardDialFrame (  ) ;^114^^^^^113^125^[REPLACE] StandardDialFrame f1 = new StandardDialFrame (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^StandardDialFrame f2 = false;^115^^^^^113^125^[REPLACE] StandardDialFrame f2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^116^117^118^^^113^125^[ADD] try { f2 =  ( StandardDialFrame )  f1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^f2 =  ( StandardDialFrame )  in.readObject (  ) ; ;^117^^^^^113^125^[REPLACE] f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^^117^^^^^113^125^[ADD] f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( f1  ==  f2 ) ;^122^^^^^113^125^[REPLACE] assertTrue ( f1 != f2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( f1.getClass (  )   !=  f2.getClass (  )  ) ;^123^^^^^113^125^[REPLACE] assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( f2.getClass (  )  == f2.getClass (  )  ) ;^123^^^^^113^125^[REPLACE] assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( f1.setExtent (  )  == f1.getClass (  )  ) ;^123^^^^^113^125^[REPLACE] assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^^123^124^^^^113^125^[ADD] assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ; assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( f1.setBackgroundPaint ( f2 )  ) ;^124^^^^^113^125^[REPLACE] assertTrue ( f1.equals ( f2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^StandardDialFrame f2 = new StandardDialFrame (  ) ;^132^^^^^131^150^[REPLACE] StandardDialFrame f1 = new StandardDialFrame (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^StandardDialFrame f2 = true;^133^^^^^131^150^[REPLACE] StandardDialFrame f2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( f1 ) ;out.close (  ) ;^135^136^137^138^139^131^150^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( f1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^f2 =  ( StandardDialFrame )  f1.clone (  ) ; ;^143^^^^^131^150^[REPLACE] f2 =  ( StandardDialFrame )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^136^^^^^131^150^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^137^^^^^131^150^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^141^142^^^^131^150^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^^137^^^^^131^150^[ADD] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^^141^142^^^^131^150^[ADD] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^assertEquals ( h1, h2 ) ;^149^^^^^131^150^[REPLACE] assertEquals ( f1, f2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialFrameTests   [TYPE]  StandardDialFrame f1  f2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
