[REPLACE]^private Map colorsPool  = null ;^107^^^^^^^[REPLACE] private Map colorsPool = new HashMap (  ) ;^ [CLASS] SWTGraphics2D  
[REPLACE]^private Map fontsPool ;^110^^^^^^^[REPLACE] private Map fontsPool = new HashMap (  ) ;^ [CLASS] SWTGraphics2D  
[REPLACE]^private List resourcePool ;^113^^^^^^^[REPLACE] private List resourcePool = new ArrayList (  ) ;^ [CLASS] SWTGraphics2D  
[REPLACE]^colorsPool.clear (  ) ;^121^^^^^120^123^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] GC) [PARAMETER] GC gc [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^121^^^^^120^123^[ADD] super (  ) ;^[METHOD] <init> [TYPE] GC) [PARAMETER] GC gc [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^this.gc =  null;^122^^^^^120^123^[REPLACE] this.gc = gc;^[METHOD] <init> [TYPE] GC) [PARAMETER] GC gc [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^colorsPool.clear (  ) ;^133^^^^^132^135^[REPLACE] resourcePool.add ( resource ) ;^[METHOD] addToResourcePool [TYPE] Resource [PARAMETER] Resource resource [CLASS] SWTGraphics2D   [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^133^134^^^^132^135^[ADD] resourcePool.add ( resource ) ; return resource;^[METHOD] addToResourcePool [TYPE] Resource [PARAMETER] Resource resource [CLASS] SWTGraphics2D   [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^return data;^134^^^^^132^135^[REPLACE] return resource;^[METHOD] addToResourcePool [TYPE] Resource [PARAMETER] Resource resource [CLASS] SWTGraphics2D   [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^for  ( int i = 0; i < rgbs.length; i++ )  {^141^^^^^140^148^[REPLACE] for  ( Iterator it = resourcePool.iterator (  ) ;it.hasNext (  ) ; )  {^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^141^142^143^144^^140^148^[ADD] for  ( Iterator it = resourcePool.iterator (  ) ;it.hasNext (  ) ; )  { Resource resource =  ( Resource ) it.next (  ) ; resource.dispose (  ) ; }^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^Resource resource =  ( Resource ) it.hasNext (  ) ;^142^^^^^140^148^[REPLACE] Resource resource =  ( Resource ) it.next (  ) ;^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^for  ( Iterator it = resourcePool.clear (  ) ;it.hasNext (  ) ; )  {^141^^^^^140^148^[REPLACE] for  ( Iterator it = resourcePool.iterator (  ) ;it.hasNext (  ) ; )  {^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^Resource resource =  ( Resource ) it .hasNext (  )  ;^142^^^^^140^148^[REPLACE] Resource resource =  ( Resource ) it.next (  ) ;^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^resourcePool .iterator (  )  ;^145^^^^^140^148^[REPLACE] resourcePool.clear (  ) ;^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^colorsPool .iterator (  )  ;^146^^^^^140^148^[REPLACE] colorsPool.clear (  ) ;^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^resourcePool.iterator (  ) ;^147^^^^^140^148^[REPLACE] resourcePool.clear (  ) ;^[METHOD] disposeResourcePool [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Iterator it  [TYPE]  Resource resource  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^org.eclipse.swt.graphics.Font swtFont =  ( org.eclipse.swt.graphics.Font ) swtFontsPool.get ( font ) ;^161^162^^^^160^171^[REPLACE] org.eclipse.swt.graphics.Font swtFont =  ( org.eclipse.swt.graphics.Font ) fontsPool.get ( font ) ;^[METHOD] getSwtFontFromPool [TYPE] Font [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Font font  swtFont 
[REPLACE]^if  (font != null )  {^163^^^^^160^171^[REPLACE] if  ( swtFont == null )  {^[METHOD] getSwtFontFromPool [TYPE] Font [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Font font  swtFont 
[REPLACE]^swtFont = new org.eclipse.swt.graphics.Font ( gc.getDevice (  ) , SWTUtils.toSwtFontData ( gc.getDevice (  ) , font, false )  ) ;^164^165^166^^^160^171^[REPLACE] swtFont = new org.eclipse.swt.graphics.Font ( gc.getDevice (  ) , SWTUtils.toSwtFontData ( gc.getDevice (  ) , font, true )  ) ;^[METHOD] getSwtFontFromPool [TYPE] Font [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Font font  swtFont 
[ADD]^^164^165^166^^^160^171^[ADD] swtFont = new org.eclipse.swt.graphics.Font ( gc.getDevice (  ) , SWTUtils.toSwtFontData ( gc.getDevice (  ) , font, true )  ) ;^[METHOD] getSwtFontFromPool [TYPE] Font [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Font font  swtFont 
[REPLACE]^return font;^170^^^^^160^171^[REPLACE] return swtFont;^[METHOD] getSwtFontFromPool [TYPE] Font [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Font font  swtFont 
[REPLACE]^if  ( swtColor != this )  {^189^^^^^183^197^[REPLACE] if  ( swtColor == null )  {^[METHOD] getSwtColorFromPool [TYPE] Color [PARAMETER] Color awtColor [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color awtColor  swtColor 
[REPLACE]^swtColor =  SWTUtils.toSwtColor ( gc.getDevice (  ) , null ) ;^190^^^^^183^197^[REPLACE] swtColor = SWTUtils.toSwtColor ( gc.getDevice (  ) , awtColor ) ;^[METHOD] getSwtColorFromPool [TYPE] Color [PARAMETER] Color awtColor [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color awtColor  swtColor 
[REPLACE]^return awtColor;^196^^^^^183^197^[REPLACE] return swtColor;^[METHOD] getSwtColorFromPool [TYPE] Color [PARAMETER] Color awtColor [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color awtColor  swtColor 
[REPLACE]^org.eclipse.swt.graphics.Color bg = gc .setBackground ( fg )  ;^206^^^^^205^210^[REPLACE] org.eclipse.swt.graphics.Color bg = gc.getBackground (  ) ;^[METHOD] switchColors [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color bg  fg 
[REPLACE]^org.eclipse.swt.graphics.Color fg = gc.getBackground (  ) ;^207^^^^^205^210^[REPLACE] org.eclipse.swt.graphics.Color fg = gc.getForeground (  ) ;^[METHOD] switchColors [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color bg  fg 
[REPLACE]^gc.setBackground ( bg ) ;^208^^^^^205^210^[REPLACE] gc.setBackground ( fg ) ;^[METHOD] switchColors [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color bg  fg 
[REPLACE]^gc.setForeground ( fg ) ;^209^^^^^205^210^[REPLACE] gc.setForeground ( bg ) ;^[METHOD] switchColors [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Color bg  fg 
[REPLACE]^ImageData data = new ImageData ( bufferedImage.getWidth (  ) ,^220^^^^^219^249^[REPLACE] int type;^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[REPLACE]^float[] coords = new float[6 * 2];^221^^^^^219^249^[REPLACE] float[] coords = new float[6];^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[REPLACE]^Path path = new Path ( this.gc .getFontMetrics (  )   ) ;^222^^^^^219^249^[REPLACE] Path path = new Path ( this.gc.getDevice (  )  ) ;^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[REPLACE]^PathIterator pit = shape.getPathIterator ( false ) ;^223^^^^^219^249^[REPLACE] PathIterator pit = shape.getPathIterator ( null ) ;^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[ADD]^^224^225^^^^219^249^[ADD] while  ( !pit.isDone (  )  )  { type = pit.currentSegment ( coords ) ;^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[REPLACE]^type =  null.currentSegment ( coords ) ;^225^^^^^219^249^[REPLACE] type = pit.currentSegment ( coords ) ;^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[REPLACE]^return data;^248^^^^^219^249^[REPLACE] return path;^[METHOD] toSwtPath [TYPE] Path [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  PathIterator pit  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int type  [TYPE]  float[] coords 
[REPLACE]^Transform t = new Transform ( gc.getLineCap (  )  ) ;^259^^^^^258^266^[REPLACE] Transform t = new Transform ( gc.getDevice (  )  ) ;^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^259^260^261^262^263^258^266^[ADD] Transform t = new Transform ( gc.getDevice (  )  ) ; double[] matrix = new double[6]; awtTransform.getMatrix ( matrix ) ; t.setElements (  ( float )  matrix[0],  ( float )  matrix[1], ( float )  matrix[2],  ( float )  matrix[3],^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^double[] matrix = new double[4];^260^^^^^258^266^[REPLACE] double[] matrix = new double[6];^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^awtTransform .AffineTransform ( null )  ;^261^^^^^258^266^[REPLACE] awtTransform.getMatrix ( matrix ) ;^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^t.dispose (  ( float )  matrix[0L],  ( float )  matrix[1], ( float )  matrix[2],  ( float )  matrix[3], ( float )  matrix[4],  ( float )  matrix[5] ) ;^262^263^264^^^258^266^[REPLACE] t.setElements (  ( float )  matrix[0],  ( float )  matrix[1], ( float )  matrix[2],  ( float )  matrix[3], ( float )  matrix[4],  ( float )  matrix[5] ) ;^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^262^263^264^^^258^266^[ADD] t.setElements (  ( float )  matrix[0],  ( float )  matrix[1], ( float )  matrix[2],  ( float )  matrix[3], ( float )  matrix[4],  ( float )  matrix[5] ) ;^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^return data;^265^^^^^258^266^[REPLACE] return t;^[METHOD] toSwtTransform [TYPE] Transform [PARAMETER] AffineTransform awtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  double[] matrix  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform t  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^float[] elements = new float[6 * 0];^276^^^^^275^280^[REPLACE] float[] elements = new float[6];^[METHOD] toAwtTransform [TYPE] AffineTransform [PARAMETER] Transform swtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  [TYPE]  float[] elements 
[REPLACE]^swtTransform.rotate ( elements ) ;^277^^^^^275^280^[REPLACE] swtTransform.getElements ( elements ) ;^[METHOD] toAwtTransform [TYPE] AffineTransform [PARAMETER] Transform swtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  [TYPE]  float[] elements 
[ADD]^^277^278^279^280^^275^280^[ADD] swtTransform.getElements ( elements ) ; AffineTransform awtTransform = new AffineTransform ( elements ) ; return awtTransform; }^[METHOD] toAwtTransform [TYPE] AffineTransform [PARAMETER] Transform swtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  [TYPE]  float[] elements 
[REPLACE]^int[] swtDashes = new int[dashes.length];^278^^^^^275^280^[REPLACE] AffineTransform awtTransform = new AffineTransform ( elements ) ;^[METHOD] toAwtTransform [TYPE] AffineTransform [PARAMETER] Transform swtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  [TYPE]  float[] elements 
[REPLACE]^return data;^279^^^^^275^280^[REPLACE] return awtTransform;^[METHOD] toAwtTransform [TYPE] AffineTransform [PARAMETER] Transform swtTransform [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  [TYPE]  float[] elements 
[REPLACE]^Path path = toSwtPath ( s ) ;^286^^^^^285^289^[REPLACE] Path path = toSwtPath ( shape ) ;^[METHOD] draw [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^gc.fillPath ( path ) ;^287^^^^^285^289^[REPLACE] gc.drawPath ( path ) ;^[METHOD] draw [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^path .dispose (  )  ;^288^^^^^285^289^[REPLACE] path.dispose (  ) ;^[METHOD] draw [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^288^^^^^285^289^[ADD] path.dispose (  ) ;^[METHOD] draw [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^return true;^298^^^^^295^299^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image AffineTransform xform ImageObserver obs [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  ImageObserver obs  [TYPE]  AffineTransform xform  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^org.eclipse.swt.graphics.Image im = new org.eclipse.swt.graphics.Image ( gc.getLineCap (  ) , convertToSWT ( image )  ) ;^307^308^309^^^305^312^[REPLACE] org.eclipse.swt.graphics.Image im = new org.eclipse.swt.graphics.Image ( gc.getDevice (  ) , convertToSWT ( image )  ) ;^[METHOD] drawImage [TYPE] void [PARAMETER] BufferedImage image BufferedImageOp op int x int y [CLASS] SWTGraphics2D   [TYPE]  BufferedImageOp op  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image im  [TYPE]  Map colorsPool  fontsPool  [TYPE]  BufferedImage image  [TYPE]  int x  y 
[REPLACE]^gc.drawImage ( image, x, y ) ;^310^^^^^305^312^[REPLACE] gc.drawImage ( im, x, y ) ;^[METHOD] drawImage [TYPE] void [PARAMETER] BufferedImage image BufferedImageOp op int x int y [CLASS] SWTGraphics2D   [TYPE]  BufferedImageOp op  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image im  [TYPE]  Map colorsPool  fontsPool  [TYPE]  BufferedImage image  [TYPE]  int x  y 
[REPLACE]^colorsPool.clear (  ) ;^311^^^^^305^312^[REPLACE] im.dispose (  ) ;^[METHOD] drawImage [TYPE] void [PARAMETER] BufferedImage image BufferedImageOp op int x int y [CLASS] SWTGraphics2D   [TYPE]  BufferedImageOp op  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image im  [TYPE]  Map colorsPool  fontsPool  [TYPE]  BufferedImage image  [TYPE]  int x  y 
[REPLACE]^gc.drawImage ( im, x, y ) ;^322^^^^^321^323^[REPLACE] gc.drawImage ( image, x, y ) ;^[METHOD] drawImage [TYPE] void [PARAMETER] Image image int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int x  y 
[ADD]^^322^^^^^321^323^[ADD] gc.drawImage ( image, x, y ) ;^[METHOD] drawImage [TYPE] void [PARAMETER] Image image int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int x  y 
[REPLACE]^float fm = gc.getFont (  ) .getAscent (  ) ;^351^^^^^350^353^[REPLACE] float fm = gc.getFontMetrics (  ) .getAscent (  ) ;^[METHOD] drawString [TYPE] void [PARAMETER] String text int x int y [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  String text  [TYPE]  GC gc  [TYPE]  float fm  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int x  y 
[ADD]^^351^^^^^350^353^[ADD] float fm = gc.getFontMetrics (  ) .getAscent (  ) ;^[METHOD] drawString [TYPE] void [PARAMETER] String text int x int y [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  String text  [TYPE]  GC gc  [TYPE]  float fm  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int x  y 
[REPLACE]^gc.drawString ( text, x,  ( int )   ( y  <  fm ) , true ) ;^352^^^^^350^353^[REPLACE] gc.drawString ( text, x,  ( int )   ( y - fm ) , true ) ;^[METHOD] drawString [TYPE] void [PARAMETER] String text int x int y [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  String text  [TYPE]  GC gc  [TYPE]  float fm  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int x  y 
[REPLACE]^float[] dashes = bs.getDashArray (  ) ;^359^^^^^358^361^[REPLACE] float fm = gc.getFontMetrics (  ) .getAscent (  ) ;^[METHOD] drawString [TYPE] void [PARAMETER] String text float x float y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  float fm  x  y  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^gc.drawString ( text,  ( int )  x,  ( int )   (  y  <  fm  ) , true ) ;^360^^^^^358^361^[REPLACE] gc.drawString ( text,  ( int )  x,  ( int )   (  y - fm  ) , true ) ;^[METHOD] drawString [TYPE] void [PARAMETER] String text float x float y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  float fm  x  y  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^Path path = toSwtPath ( s ) ;^389^^^^^388^394^[REPLACE] Path path = toSwtPath ( shape ) ;^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^colorsPool.clear (  ) ;^390^^^^^388^394^[REPLACE] switchColors (  ) ;^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^this.gc.drawPath ( path ) ;^391^^^^^388^394^[REPLACE] this.gc.fillPath ( path ) ;^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[ADD]^switchColors (  ) ;^391^392^^^^388^394^[ADD] this.gc.fillPath ( path ) ; switchColors (  ) ;^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^colorsPool.clear (  ) ;^392^^^^^388^394^[REPLACE] switchColors (  ) ;^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^path.close (  ) ;^393^^^^^388^394^[REPLACE] path.dispose (  ) ;^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REMOVE]^colorsPool.clear (  ) ;^393^^^^^388^394^[REMOVE] ^[METHOD] fill [TYPE] void [PARAMETER] Shape shape [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^return true;^401^^^^^399^402^[REPLACE] return false;^[METHOD] hit [TYPE] boolean [PARAMETER] Rectangle rect Shape text boolean onStroke [CLASS] SWTGraphics2D   [TYPE]  Rectangle rect  [TYPE]  List resourcePool  [TYPE]  Shape text  [TYPE]  boolean false  onStroke  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^return true;^409^^^^^407^410^[REPLACE] return null;^[METHOD] getDeviceConfiguration [TYPE] GraphicsConfiguration [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^if  ( ! paint instanceof Color )  {^424^^^^^423^430^[REPLACE] if  ( paint instanceof Color )  {^[METHOD] setPaint [TYPE] void [PARAMETER] Paint paint [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  Paint paint  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^return ;^428^^^^^423^430^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] setPaint [TYPE] void [PARAMETER] Paint paint [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  Paint paint  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[ADD]^^428^^^^^423^430^[ADD] throw new RuntimeException  (" ")  ;^[METHOD] setPaint [TYPE] void [PARAMETER] Paint paint [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  Paint paint  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^colorsPool.clear (  ) ;^425^^^^^423^430^[REPLACE] setColor (  ( Color )  paint ) ;^[METHOD] setPaint [TYPE] void [PARAMETER] Paint paint [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  Paint paint  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool 
[REPLACE]^if  ( ! stroke instanceof BasicStroke )  {^436^^^^^435^484^[REPLACE] if  ( stroke instanceof BasicStroke )  {^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[ADD]^BasicStroke bs =  ( BasicStroke )  stroke;gc.setLineWidth (  ( int )  bs.getLineWidth (  )  ) ;^436^437^^439^^435^484^[ADD] if  ( stroke instanceof BasicStroke )  { BasicStroke bs =  ( BasicStroke )  stroke; gc.setLineWidth (  ( int )  bs.getLineWidth (  )  ) ;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^return ;^481^482^^^^436^483^[REPLACE] throw new RuntimeException ( "Can only handle 'Basic Stroke' at present." ) ;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^if  ( dashes == null )  {^472^^^^^435^484^[REPLACE] if  ( dashes != null )  {^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^for  ( int i = 0 ; i < swtDashes.length (  ) ; i++ )  {^474^^^^^435^484^[REPLACE] for  ( int i = 0; i < swtDashes.length; i++ )  {^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^swtDashes[i]  = null ;^475^^^^^435^484^[REPLACE] swtDashes[i] =  ( int )  dashes[i];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^swtDashes[i] =  (  short  )  dashes[i];^475^^^^^435^484^[REPLACE] swtDashes[i] =  ( int )  dashes[i];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^float[] dashes = bs.getDashArray (  ) ;^473^^^^^435^484^[REPLACE] int[] swtDashes = new int[dashes.length];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^for  ( int i = 0 ; i < swtDashes.length; i++ )  {^474^^^^^435^484^[REPLACE] for  ( int i = 0; i < swtDashes.length; i++ )  {^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[ADD]^^474^475^476^^^435^484^[ADD] for  ( int i = 0; i < swtDashes.length; i++ )  { swtDashes[i] =  ( int )  dashes[i]; }^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^for  ( int i = 0; i < swtDashes.length (  ) ; i++ )  {^474^^^^^435^484^[REPLACE] for  ( int i = 0; i < swtDashes.length; i++ )  {^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[ADD]^^475^^^^^435^484^[ADD] swtDashes[i] =  ( int )  dashes[i];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^swtDashes[i] =  (  long  )  dashes[i];^475^^^^^435^484^[REPLACE] swtDashes[i] =  ( int )  dashes[i];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^ImageData data = new ImageData ( bufferedImage.getWidth (  ) ,^437^^^^^435^484^[REPLACE] BasicStroke bs =  ( BasicStroke )  stroke;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[ADD]^^437^^^^^435^484^[ADD] BasicStroke bs =  ( BasicStroke )  stroke;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^float[] dashes = bs.getEndCap (  ) ;^471^^^^^435^484^[REPLACE] float[] dashes = bs.getDashArray (  ) ;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^for  ( int i = 0 ; i < swtDashes.length - 2; i++ )  {^474^^^^^435^484^[REPLACE] for  ( int i = 0; i < swtDashes.length; i++ )  {^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^swtDashes[i]  =  swtDashes[i] ;^475^^^^^435^484^[REPLACE] swtDashes[i] =  ( int )  dashes[i];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^swtDashes[i] ;^475^^^^^435^484^[REPLACE] swtDashes[i] =  ( int )  dashes[i];^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[ADD]^^471^^^^^435^484^[ADD] float[] dashes = bs.getDashArray (  ) ;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^return ;^481^482^^^^435^484^[REPLACE] throw new RuntimeException ( "Can only handle 'Basic Stroke' at present." ) ;^[METHOD] setStroke [TYPE] void [PARAMETER] Stroke stroke [CLASS] SWTGraphics2D   [TYPE]  BasicStroke bs  [TYPE]  Stroke stroke  [TYPE]  boolean false  true  [TYPE]  List resourcePool  [TYPE]  int[] swtDashes  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  int i  [TYPE]  float[] dashes 
[REPLACE]^return false;^500^^^^^498^501^[REPLACE] return null;^[METHOD] getRenderingHint [TYPE] Object [PARAMETER] Key hintKey [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  [TYPE]  Key hintKey 
[REPLACE]^return true;^524^^^^^522^525^[REPLACE] return null;^[METHOD] getRenderingHints [TYPE] RenderingHints [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^Transform swtTransform = new Transform ( gc.getLineCap (  )  ) ;^531^^^^^530^536^[REPLACE] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^[METHOD] translate [TYPE] void [PARAMETER] int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^gc.setTransform ( swtTransform ) ;^532^^^^^530^536^[REPLACE] gc.getTransform ( swtTransform ) ;^[METHOD] translate [TYPE] void [PARAMETER] int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^swtTransform .rotate ( this )  ;^533^^^^^530^536^[REPLACE] swtTransform.translate ( x, y ) ;^[METHOD] translate [TYPE] void [PARAMETER] int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^gc .getTransform ( swtTransform )  ;^534^^^^^530^536^[REPLACE] gc.setTransform ( swtTransform ) ;^[METHOD] translate [TYPE] void [PARAMETER] int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^colorsPool.clear (  ) ;^535^^^^^530^536^[REPLACE] swtTransform.dispose (  ) ;^[METHOD] translate [TYPE] void [PARAMETER] int x int y [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^setColor (  ( Color )  paint ) ;^542^^^^^541^543^[REPLACE] translate (  ( int )  tx,  ( int )  ty ) ;^[METHOD] translate [TYPE] void [PARAMETER] double tx double ty [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double tx  ty 
[REPLACE]^Transform swtTransform = new Transform ( gc.getLineCap (  )  ) ;^549^^^^^548^554^[REPLACE] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^[METHOD] rotate [TYPE] void [PARAMETER] double theta [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double theta 
[REPLACE]^gc.setTransform ( swtTransform ) ;^550^^^^^548^554^[REPLACE] gc.getTransform ( swtTransform ) ;^[METHOD] rotate [TYPE] void [PARAMETER] double theta [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double theta 
[REPLACE]^swtTransform.dispose (   ( float )   ( theta * 180  !=  Math.PI )  ) ;^551^^^^^548^554^[REPLACE] swtTransform.rotate (   ( float )   ( theta * 180 / Math.PI )  ) ;^[METHOD] rotate [TYPE] void [PARAMETER] double theta [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double theta 
[REPLACE]^gc.getTransform ( swtTransform ) ;^552^^^^^548^554^[REPLACE] gc.setTransform ( swtTransform ) ;^[METHOD] rotate [TYPE] void [PARAMETER] double theta [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double theta 
[REPLACE]^swtTransform .dispose (  )  ;^553^^^^^548^554^[REPLACE] swtTransform.dispose (  ) ;^[METHOD] rotate [TYPE] void [PARAMETER] double theta [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double theta 
[ADD]^^553^554^^^^548^554^[ADD] swtTransform.dispose (  ) ; }^[METHOD] rotate [TYPE] void [PARAMETER] double theta [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double theta 
[REPLACE]^Transform swtTransform = new Transform ( gc.getLineCap (  )  ) ;^568^^^^^567^573^[REPLACE] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[REPLACE]^gc .setTransform ( swtTransform )  ;^569^^^^^567^573^[REPLACE] gc.getTransform ( swtTransform ) ;^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[ADD]^^569^570^571^572^573^567^573^[ADD] gc.getTransform ( swtTransform ) ; swtTransform.scale (  ( float )  scaleX,  ( float )  scaleY ) ; gc.setTransform ( swtTransform ) ; swtTransform.dispose (  ) ; }^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[REPLACE]^swtTransform .scale ( this , null )   scaleY ) ;^570^^^^^567^573^[REPLACE] swtTransform.scale (  ( float )  scaleX,  ( float )  scaleY ) ;^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[REPLACE]^gc.getTransform ( swtTransform ) ;^571^^^^^567^573^[REPLACE] gc.setTransform ( swtTransform ) ;^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[ADD]^^571^572^573^^^567^573^[ADD] gc.setTransform ( swtTransform ) ; swtTransform.dispose (  ) ; }^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[REPLACE]^swtTransform .dispose (  )  ;^572^^^^^567^573^[REPLACE] swtTransform.dispose (  ) ;^[METHOD] scale [TYPE] void [PARAMETER] double scaleX double scaleY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double scaleX  scaleY 
[REPLACE]^Transform swtTransform = new Transform ( gc.getLineCap (  )  ) ;^579^^^^^578^586^[REPLACE] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[ADD]^^579^580^581^582^583^578^586^[ADD] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ; gc.getTransform ( swtTransform ) ; Transform shear = new Transform ( gc.getDevice (  ) , 1f,  ( float )  shearX, ( float )  shearY, 1f, 0, 0 ) ; swtTransform.multiply ( shear ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[REPLACE]^gc.getTransform ( shear ) ;^580^^^^^578^586^[REPLACE] gc.getTransform ( swtTransform ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[REPLACE]^Transform shear = new Transform ( gc .getFontMetrics (  )  , 1f,  ( float )  shearX, ( float )  shearY, 1f, 0, 0 ) ;^581^582^^^^578^586^[REPLACE] Transform shear = new Transform ( gc.getDevice (  ) , 1f,  ( float )  shearX, ( float )  shearY, 1f, 0, 0 ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[REPLACE]^swtTransform .rotate ( null )  ;^583^^^^^578^586^[REPLACE] swtTransform.multiply ( shear ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[REPLACE]^gc.getTransform ( swtTransform ) ;^584^^^^^578^586^[REPLACE] gc.setTransform ( swtTransform ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[ADD]^^584^585^586^^^578^586^[ADD] gc.setTransform ( swtTransform ) ; swtTransform.dispose (  ) ; }^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[REPLACE]^colorsPool.clear (  ) ;^585^^^^^578^586^[REPLACE] swtTransform.dispose (  ) ;^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[ADD]^^585^586^^^^578^586^[ADD] swtTransform.dispose (  ) ; }^[METHOD] shear [TYPE] void [PARAMETER] double shearX double shearY [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform shear  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  double shearX  shearY 
[REPLACE]^Transform swtTransform = new Transform ( gc.getLineCap (  )  ) ;^592^^^^^591^599^[REPLACE] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc.getTransform ( swtMatrix ) ;^593^^^^^591^599^[REPLACE] gc.getTransform ( swtTransform ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^Path clipPath = toSwtPath ( clip ) ;^594^^^^^591^599^[REPLACE] Transform swtMatrix = toSwtTransform ( Tx ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^swtTransform.getElements ( swtMatrix ) ;^595^^^^^591^599^[REPLACE] swtTransform.multiply ( swtMatrix ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^^595^596^597^598^599^591^599^[ADD] swtTransform.multiply ( swtMatrix ) ; gc.setTransform ( swtTransform ) ; swtMatrix.dispose (  ) ; swtTransform.dispose (  ) ; }^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc.getTransform ( swtTransform ) ;^596^^^^^591^599^[REPLACE] gc.setTransform ( swtTransform ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^^596^597^598^599^^591^599^[ADD] gc.setTransform ( swtTransform ) ; swtMatrix.dispose (  ) ; swtTransform.dispose (  ) ; }^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^swtMatrix .dispose (  )  ;^597^^^^^591^599^[REPLACE] swtMatrix.dispose (  ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^colorsPool.clear (  ) ;^598^^^^^591^599^[REPLACE] swtTransform.dispose (  ) ;^[METHOD] transform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtMatrix  swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc.setLineCap ( SWT.CAP_ROUND ) ;^605^^^^^604^606^[REPLACE] gc.setTransform ( toSwtTransform ( Tx )  ) ;^[METHOD] setTransform [TYPE] void [PARAMETER] AffineTransform Tx [CLASS] SWTGraphics2D   [TYPE]  AffineTransform Tx  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^Transform swtTransform = new Transform ( gc.getLineCap (  )  ) ;^612^^^^^611^617^[REPLACE] Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^[METHOD] getTransform [TYPE] AffineTransform [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc .setTransform ( swtTransform )  ;^613^^^^^611^617^[REPLACE] gc.getTransform ( swtTransform ) ;^[METHOD] getTransform [TYPE] AffineTransform [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^Transform swtTransform = new Transform ( gc.getDevice (  )  ) ;^614^^^^^611^617^[REPLACE] AffineTransform awtTransform = toAwtTransform ( swtTransform ) ;^[METHOD] getTransform [TYPE] AffineTransform [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^swtTransform .dispose (  )  ;^615^^^^^611^617^[REPLACE] swtTransform.dispose (  ) ;^[METHOD] getTransform [TYPE] AffineTransform [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return data;^616^^^^^611^617^[REPLACE] return awtTransform;^[METHOD] getTransform [TYPE] AffineTransform [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  AffineTransform awtTransform  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Transform swtTransform  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return SWTUtils .toSwtColor ( false )  ;^623^^^^^622^624^[REPLACE] return SWTUtils.toAwtColor ( gc.getForeground (  )  ) ;^[METHOD] getPaint [TYPE] Paint [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return false;^631^^^^^629^632^[REPLACE] return null;^[METHOD] getComposite [TYPE] Composite [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc.getBackground (  )  .dispose (  )  ;^638^^^^^637^642^[REPLACE] gc.getBackground (  ) .dispose (  ) ;^[METHOD] setBackground [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^gc.getForeground (  ) .dispose (  ) ;^638^^^^^637^642^[REPLACE] gc.getBackground (  ) .dispose (  ) ;^[METHOD] setBackground [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^org.eclipse.swt.graphics.Color swtColor = SWTUtils .toAwtColor (  )  ;^639^^^^^637^642^[REPLACE] org.eclipse.swt.graphics.Color swtColor = SWTUtils.toSwtColor ( gc.getDevice (  ) , color ) ;^[METHOD] setBackground [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^gc.setForeground ( color ) ;^640^^^^^637^642^[REPLACE] gc.setBackground ( swtColor ) ;^[METHOD] setBackground [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^swtColor.getRGB (  ) ;^641^^^^^637^642^[REPLACE] swtColor.dispose (  ) ;^[METHOD] setBackground [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^return SWTUtils.toAwtColor ( gc.getForeground (  )  ) ;^648^^^^^647^649^[REPLACE] return SWTUtils.toAwtColor ( gc.getBackground (  )  ) ;^[METHOD] getBackground [TYPE] Color [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return new BasicStroke ( gc.getLineWidth (  ) , gc.setLineCap (  ) , gc.getLineJoin (  )  ) ;^655^656^^^^654^657^[REPLACE] return new BasicStroke ( gc.getLineWidth (  ) , gc.getLineCap (  ) , gc.getLineJoin (  )  ) ;^[METHOD] getStroke [TYPE] Stroke [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^FontRenderContext fontRenderContext = new FontRenderContext ( new AffineTransform (  ) , false, true ) ;^663^664^^^^662^666^[REPLACE] FontRenderContext fontRenderContext = new FontRenderContext ( new AffineTransform (  ) , true, true ) ;^[METHOD] getFontRenderContext [TYPE] FontRenderContext [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  FontRenderContext fontRenderContext  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return data;^665^^^^^662^666^[REPLACE] return fontRenderContext;^[METHOD] getFontRenderContext [TYPE] FontRenderContext [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  FontRenderContext fontRenderContext  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return true;^682^^^^^680^683^[REPLACE] return null;^[METHOD] create [TYPE] Graphics [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return SWTUtils.toAwtColor ( gc.getBackground (  )  ) ;^689^^^^^688^690^[REPLACE] return SWTUtils.toAwtColor ( gc.getForeground (  )  ) ;^[METHOD] getColor [TYPE] Color [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^org.eclipse.swt.graphics.Color swtColor = getSwtColorFromPool ( swtColor ) ;^696^^^^^695^698^[REPLACE] org.eclipse.swt.graphics.Color swtColor = getSwtColorFromPool ( color ) ;^[METHOD] setColor [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^gc.setForeground ( color ) ;^697^^^^^695^698^[REPLACE] gc.setForeground ( swtColor ) ;^[METHOD] setColor [TYPE] void [PARAMETER] Color color [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Color color  swtColor 
[REPLACE]^float[] dashes = bs.getDashArray (  ) ;^723^^^^^721^726^[REPLACE] FontData[] fontData = gc.getFont (  ) .getFontData (  ) ;^[METHOD] getFont [TYPE] Font [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  FontData[] fontData  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return SWTUtils.toSwtColor ( gc.getDevice (  ) , fontData[3], true ) ;^725^^^^^721^726^[REPLACE] return SWTUtils.toAwtFont ( gc.getDevice (  ) , fontData[0], true ) ;^[METHOD] getFont [TYPE] Font [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  FontData[] fontData  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^org.eclipse.swt.graphics.Font swtFont = getSwtFontFromPool ( swtFont ) ;^735^^^^^734^737^[REPLACE] org.eclipse.swt.graphics.Font swtFont = getSwtFontFromPool ( font ) ;^[METHOD] setFont [TYPE] void [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Font font  swtFont 
[REPLACE]^gc.setForeground ( font ) ;^736^^^^^734^737^[REPLACE] gc.setFont ( swtFont ) ;^[METHOD] setFont [TYPE] void [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Font font  swtFont 
[REPLACE]^return   font   ;^743^^^^^742^744^[REPLACE] return SWTUtils.DUMMY_PANEL.getFontMetrics ( font ) ;^[METHOD] getFontMetrics [TYPE] FontMetrics [PARAMETER] Font font [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  Font font 
[REPLACE]^Path path = toSwtPath ( shape ) ;^750^^^^^749^753^[REPLACE] Path path = toSwtPath ( s ) ;^[METHOD] clip [TYPE] void [PARAMETER] Shape s [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape s  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^gc.setClipping ( path ) ;^750^751^^^^749^753^[ADD] Path path = toSwtPath ( s ) ; gc.setClipping ( path ) ;^[METHOD] clip [TYPE] void [PARAMETER] Shape s [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape s  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc.fillPath ( path ) ;^751^^^^^749^753^[REPLACE] gc.setClipping ( path ) ;^[METHOD] clip [TYPE] void [PARAMETER] Shape s [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape s  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^path .dispose (  )  ;^752^^^^^749^753^[REPLACE] path.dispose (  ) ;^[METHOD] clip [TYPE] void [PARAMETER] Shape s [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape s  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REMOVE]^colorsPool.clear (  ) ;^752^^^^^749^753^[REMOVE] ^[METHOD] clip [TYPE] void [PARAMETER] Shape s [CLASS] SWTGraphics2D   [TYPE]  Path path  [TYPE]  List resourcePool  [TYPE]  Shape s  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^org.eclipse.swt.graphics.Rectangle clip = gc.getLineCap (  ) ;^759^^^^^758^761^[REPLACE] org.eclipse.swt.graphics.Rectangle clip = gc.getClipping (  ) ;^[METHOD] getClipBounds [TYPE] Rectangle [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^return new Rectangle ( clip.x, clip.y, clip.width, clip.height ) ;^759^760^^^^758^761^[ADD] org.eclipse.swt.graphics.Rectangle clip = gc.getClipping (  ) ; return new Rectangle ( clip.x, clip.y, clip.width, clip.height ) ;^[METHOD] getClipBounds [TYPE] Rectangle [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return new BasicStroke ( gc.getLineWidth (  ) , gc.getLineCap (  ) , gc.getLineJoin (  )  ) ;^760^^^^^758^761^[REPLACE] return new Rectangle ( clip.x, clip.y, clip.width, clip.height ) ;^[METHOD] getClipBounds [TYPE] Rectangle [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^org.eclipse.swt.graphics.Rectangle clip = gc .setClipping ( 0 )  ;^767^^^^^766^770^[REPLACE] org.eclipse.swt.graphics.Rectangle clip = gc.getClipping (  ) ;^[METHOD] clipRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[ADD]^^767^^^^^766^770^[ADD] org.eclipse.swt.graphics.Rectangle clip = gc.getClipping (  ) ;^[METHOD] clipRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^data.setPixel ( x, y, pixelArray[0] ) ;^768^^^^^766^770^[REPLACE] clip.intersects ( x, y, width, height ) ;^[METHOD] clipRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^gc.setFont ( clip ) ;^769^^^^^766^770^[REPLACE] gc.setClipping ( clip ) ;^[METHOD] clipRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  Rectangle clip  [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^gc.setClipping ( x, y, width, width ) ;^776^^^^^775^777^[REPLACE] gc.setClipping ( x, y, width, height ) ;^[METHOD] setClip [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^return SWTUtils .toAwtColor (  )  ;^783^^^^^782^784^[REPLACE] return SWTUtils.toAwtRectangle ( gc.getClipping (  )  ) ;^[METHOD] getClip [TYPE] Shape [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^if  ( clip != null ) return;^790^791^^^^789^795^[REPLACE] if  ( clip == null ) return;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^return;Path clipPath = toSwtPath ( clip ) ;gc.setClipping ( clipPath ) ;clipPath.dispose (  ) ;^790^791^792^793^794^789^795^[ADD] if  ( clip == null ) return; Path clipPath = toSwtPath ( clip ) ; gc.setClipping ( clipPath ) ; clipPath.dispose (  ) ;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^return data;^791^^^^^789^795^[REPLACE] return;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^PathIterator pit = shape.getPathIterator ( null ) ;^792^^^^^789^795^[REPLACE] Path clipPath = toSwtPath ( clip ) ;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^gc.setClipping ( clipPath ) ;^792^793^^^^789^795^[ADD] Path clipPath = toSwtPath ( clip ) ; gc.setClipping ( clipPath ) ;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc .setClipping ( false , this , false , null )  ;^793^^^^^789^795^[REPLACE] gc.setClipping ( clipPath ) ;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^clipPath.close (  ) ;^794^^^^^789^795^[REPLACE] clipPath.dispose (  ) ;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[ADD]^^794^^^^^789^795^[ADD] clipPath.dispose (  ) ;^[METHOD] setClip [TYPE] void [PARAMETER] Shape clip [CLASS] SWTGraphics2D   [TYPE]  Path clipPath  [TYPE]  List resourcePool  [TYPE]  Shape clip  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^gc.drawLine ( x1, x1, x2, y2 ) ;^810^^^^^809^811^[REPLACE] gc.drawLine ( x1, y1, x2, y2 ) ;^[METHOD] drawLine [TYPE] void [PARAMETER] int x1 int y1 int x2 int y2 [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x1  x2  y1  y2 
[REPLACE]^this.disposeResourcePool (  ) ;^820^^^^^819^823^[REPLACE] this.switchColors (  ) ;^[METHOD] fillRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^gc.fillRectangle ( x, y, width, width ) ;^821^^^^^819^823^[REPLACE] gc.fillRectangle ( x, y, width, height ) ;^[METHOD] fillRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[ADD]^^821^^^^^819^823^[ADD] gc.fillRectangle ( x, y, width, height ) ;^[METHOD] fillRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^this.disposeResourcePool (  ) ;^822^^^^^819^823^[REPLACE] this.switchColors (  ) ;^[METHOD] fillRect [TYPE] void [PARAMETER] int x int y int width int height [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^return true;^916^^^^^913^917^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image int x int y ImageObserver observer [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  ImageObserver observer  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^return true;^926^^^^^923^927^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image int x int y int width int height ImageObserver observer [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  ImageObserver observer  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^return true;^936^^^^^933^937^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image int x int y Color bgcolor ImageObserver observer [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  Color bgcolor  [TYPE]  ImageObserver observer  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int x  y 
[REPLACE]^return true;^946^^^^^943^947^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image int x int y int width int height Color bgcolor ImageObserver observer [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  Color bgcolor  [TYPE]  ImageObserver observer  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int height  width  x  y 
[REPLACE]^return true;^956^^^^^953^957^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image int dx1 int dy1 int dx2 int dy2 int sx1 int sy1 int sx2 int sy2 ImageObserver observer [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  ImageObserver observer  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int dx1  dx2  dy1  dy2  sx1  sx2  sy1  sy2 
[REPLACE]^return true;^967^^^^^963^968^[REPLACE] return false;^[METHOD] drawImage [TYPE] boolean [PARAMETER] Image image int dx1 int dy1 int dx2 int dy2 int sx1 int sy1 int sx2 int sy2 Color bgcolor ImageObserver observer [CLASS] SWTGraphics2D   [TYPE]  boolean false  true  [TYPE]  Color bgcolor  [TYPE]  ImageObserver observer  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Image image  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  int dx1  dx2  dy1  dy2  sx1  sx2  sy1  sy2 
[REPLACE]^colorsPool.clear (  ) ;^975^^^^^973^976^[REPLACE] disposeResourcePool (  ) ;^[METHOD] dispose [TYPE] void [PARAMETER] [CLASS] SWTGraphics2D   [TYPE]  List resourcePool  [TYPE]  boolean false  true  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints 
[REPLACE]^if  ( ! bufferedImage.getColorModel (  )  instanceof DirectColorModel )  {^979^^^^^978^1030^[REPLACE] if  ( bufferedImage.getColorModel (  )  instanceof DirectColorModel )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^if  ( ! bufferedImage.getColorModel (  )  instanceof IndexColorModel )  {^999^^^^^978^1030^[REPLACE] else if  ( bufferedImage.getColorModel (  )  instanceof IndexColorModel )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int i = 0; i < rgbs.length /  0.5 ; i++ )  {^1010^^^^^978^1030^[REPLACE] for  ( int i = 0; i < rgbs.length; i++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^rgbs[i] = new RGB ( reds[i] | 0xFF, greens[i] | 0xFF, blues[i] | 0xFF ) ;^1011^1012^^^^978^1030^[REPLACE] rgbs[i] = new RGB ( reds[i] & 0xFF, greens[i] & 0xFF, blues[i] & 0xFF ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0; y  !=  data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1021^1022^1023^1024^1025^978^1030^[ADD] for  ( int y = 0; y < data.height; y++ )  { for  ( int x = 0; x < data.width; x++ )  { raster.getPixel ( x, y, pixelArray ) ; data.setPixel ( x, y, pixelArray[0] ) ; }^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int pixel = 0; x  >=  data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^raster.getPixel ( pixel, y, pixelArray ) ;^1023^^^^^978^1030^[REPLACE] raster.getPixel ( x, y, pixelArray ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.setPixel ( x, y, pixelArray[2] ) ;^1024^^^^^978^1030^[REPLACE] data.setPixel ( x, y, pixelArray[0] ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 1; x < data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0; x  >=  data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.setPixel ( x, y, pixelArray[0] ) ;^1023^^^^^978^1030^[REPLACE] raster.getPixel ( x, y, pixelArray ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REMOVE]^gc.setClipping ( path ) ;^1023^^^^^978^1030^[REMOVE] ^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.setPixel ( x, y, pixelArray[1] ) ;^1024^^^^^978^1030^[REPLACE] data.setPixel ( x, y, pixelArray[0] ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.transparentPixel =  null.getTransparentPixel (  ) ;^1018^^^^^978^1030^[REPLACE] data.transparentPixel = colorModel.getTransparentPixel (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^return path;^1027^^^^^978^1030^[REPLACE] return data;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^IndexColorModel colorModel =  ( IndexColorModel )  bufferedImage.getRaster (  ) ;^1000^1001^^^^978^1030^[REPLACE] IndexColorModel colorModel =  ( IndexColorModel )  bufferedImage.getColorModel (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int size = colorModel.getTransparentPixel (  ) ;^1002^^^^^978^1030^[REPLACE] int size = colorModel.getMapSize (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^byte[] greens = new byte[size];^1003^^^^^978^1030^[REPLACE] byte[] reds = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1003^^^^^978^1030^[ADD] byte[] reds = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^byte[] reds = new byte[size];^1004^^^^^978^1030^[REPLACE] byte[] greens = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1004^1005^^^^978^1030^[ADD] byte[] greens = new byte[size]; byte[] blues = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^byte[] greens = new byte[size];^1005^^^^^978^1030^[REPLACE] byte[] blues = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] swtDashes = new int[dashes.length];^1009^^^^^978^1030^[REPLACE] RGB[] rgbs = new RGB[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int i = 0 ; i < rgbs.length; i++ )  {^1010^^^^^978^1030^[REPLACE] for  ( int i = 0; i < rgbs.length; i++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^PathIterator pit = shape.getPathIterator ( null ) ;^1014^^^^^978^1030^[REPLACE] PaletteData palette = new PaletteData ( rgbs ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getWidth (  ) , colorModel.getPixelSize (  ) , palette ) ;^1015^1016^1017^^^978^1030^[REPLACE] ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^WritableRaster raster = bufferedImage.getWidth (  ) ;^1019^^^^^978^1030^[REPLACE] WritableRaster raster = bufferedImage.getRaster (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] pixelArray = new int[3];^1020^^^^^978^1030^[REPLACE] int[] pixelArray = new int[1];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1020^^^^^978^1030^[ADD] int[] pixelArray = new int[1];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0L; y < data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0L; x < data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1010^1011^1012^1013^^978^1030^[ADD] for  ( int i = 0; i < rgbs.length; i++ )  { rgbs[i] = new RGB ( reds[i] & 0xFF, greens[i] & 0xFF, blues[i] & 0xFF ) ; }^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^raster .getPixel ( null )  ;^1023^^^^^978^1030^[REPLACE] raster.getPixel ( x, y, pixelArray ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.setPixel ( x, y, pixelArray[4] ) ;^1024^^^^^978^1030^[REPLACE] data.setPixel ( x, y, pixelArray[0] ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0 - 3; x < data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int pixel = 0; x  <=  data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1004^^^^^978^1030^[ADD] byte[] greens = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1005^1006^^^^978^1030^[ADD] byte[] blues = new byte[size]; colorModel.getReds ( reds ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1009^^^^^978^1030^[ADD] RGB[] rgbs = new RGB[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^ImageData data = new ImageData ( bufferedImage .getHeight (  )  , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^1015^1016^1017^^^978^1030^[REPLACE] ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^WritableRaster raster = bufferedImage .getWidth (  )  ;^1019^^^^^978^1030^[REPLACE] WritableRaster raster = bufferedImage.getRaster (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] pixelArray = new int[2];^1020^^^^^978^1030^[REPLACE] int[] pixelArray = new int[1];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0 << 0; y < data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1022^1023^1024^1025^^978^1030^[ADD] for  ( int x = 0; x < data.width; x++ )  { raster.getPixel ( x, y, pixelArray ) ; data.setPixel ( x, y, pixelArray[0] ) ; }^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0; y  >  data.height; y++ )  {^989^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^989^990^991^992^993^978^1030^[ADD] for  ( int y = 0; y < data.height; y++ )  { for  ( int x = 0; x < data.width; x++ )  { raster.getPixel ( x, y, pixelArray ) ; int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 2; x  >=  data.width; x++ )  {^990^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^990^991^992^993^994^978^1030^[ADD] for  ( int x = 0; x < data.width; x++ )  { raster.getPixel ( x, y, pixelArray ) ; int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ; data.setPixel ( x, y, pixel ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int pixel = palette.getPixel ( new RGB ( pixelArray[0 - 4], pixelArray[1], pixelArray[2] )  ) ;^992^993^^^^978^1030^[REPLACE] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 2; x < data.width; x++ )  {^990^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int pixel = palette.getPixel ( new RGB ( pixelArray[3], pixelArray[1], pixelArray[2] )  ) ;^992^993^^^^978^1030^[REPLACE] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( intpixel = 3; x  >=  data.width; x++ )  {^990^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int pixel = palette.getPixel ( new RGB ( pixelArray[4], pixelArray[1], pixelArray[2] )  ) ;^992^993^^^^978^1030^[REPLACE] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^992^993^^^^978^1030^[ADD] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^return path;^997^^^^^978^1030^[REPLACE] return data;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^DirectColorModel colorModel =  ( DirectColorModel )  bufferedImage.getRaster (  ) ;^980^981^^^^978^1030^[REPLACE] DirectColorModel colorModel =  ( DirectColorModel )  bufferedImage.getColorModel (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^PaletteData palette = new PaletteData ( colorModel.getGreenMask (  ) , colorModel.getGreenMask (  ) , colorModel.getBlueMask (  )  ) ;^982^983^^^^978^1030^[REPLACE] PaletteData palette = new PaletteData ( colorModel.getRedMask (  ) , colorModel.getGreenMask (  ) , colorModel.getBlueMask (  )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^ImageData data = new ImageData ( bufferedImage.getHeight (  ) , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^984^985^986^^^978^1030^[REPLACE] ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^WritableRaster raster = bufferedImage.getWidth (  ) ;^987^^^^^978^1030^[REPLACE] WritableRaster raster = bufferedImage.getRaster (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] pixelArray = new int[1];^988^^^^^978^1030^[REPLACE] int[] pixelArray = new int[3];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 4; y < data.height; y++ )  {^989^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0 - 4; x < data.width; x++ )  {^990^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int pixel = palette.getPixel ( new RGB ( pixelArray[2], pixelArray[1], pixelArray[2] )  ) ;^992^993^^^^978^1030^[REPLACE] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^else if  ( ! bufferedImage.getColorModel (  )  instanceof IndexColorModel )  {^999^^^^^978^1030^[REPLACE] else if  ( bufferedImage.getColorModel (  )  instanceof IndexColorModel )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^999^1000^1001^1002^1003^978^1030^[ADD] else if  ( bufferedImage.getColorModel (  )  instanceof IndexColorModel )  { IndexColorModel colorModel =  ( IndexColorModel )  bufferedImage.getColorModel (  ) ; int size = colorModel.getMapSize (  ) ; byte[] reds = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int i = 0; i < rgbs.length *  0.5 ; i++ )  {^1010^^^^^978^1030^[REPLACE] for  ( int i = 0; i < rgbs.length; i++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0; y  <=  data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.setPixel ( x, y, pixelArray[3] ) ;^1024^^^^^978^1030^[REPLACE] data.setPixel ( x, y, pixelArray[0] ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int pixel = 0; x  !=  data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REMOVE]^gc.setClipping ( path ) ;^1024^^^^^978^1030^[REMOVE] ^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1002^^^^^978^1030^[ADD] int size = colorModel.getMapSize (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1005^^^^^978^1030^[ADD] byte[] blues = new byte[size];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1014^^^^^978^1030^[ADD] PaletteData palette = new PaletteData ( rgbs ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] pixelArray = new int[1 + 3];^1020^^^^^978^1030^[REPLACE] int[] pixelArray = new int[1];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 3; y < data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 2; x < data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0; y  !=  data.height; y++ )  {^989^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0; x  <=  data.width; x++ )  {^990^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 1; x < data.width; x++ )  {^990^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int pixel = palette.getPixel ( new RGB ( pixelArray[0L], pixelArray[1], pixelArray[2] )  ) ;^992^993^^^^978^1030^[REPLACE] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int i = 0; i < rgbs.length (  ) ; i++ )  {^1010^^^^^978^1030^[REPLACE] for  ( int i = 0; i < rgbs.length; i++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 0L; y  >  data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0 % 2; x  >=  data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1023^^^^^978^1030^[ADD] raster.getPixel ( x, y, pixelArray ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0; x  >  data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^raster .getPixel ( false )  ;^1023^^^^^978^1030^[REPLACE] raster.getPixel ( x, y, pixelArray ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^data.setPixel ( x, y, pixelArray[0 - 1] ) ;^1024^^^^^978^1030^[REPLACE] data.setPixel ( x, y, pixelArray[0] ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[ADD]^^1018^^^^^978^1030^[ADD] data.transparentPixel = colorModel.getTransparentPixel (  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^PaletteData palette = new PaletteData ( colorModel .getGreenMask (  )  , colorModel.getGreenMask (  ) , colorModel.getBlueMask (  )  ) ;^982^983^^^^978^1030^[REPLACE] PaletteData palette = new PaletteData ( colorModel.getRedMask (  ) , colorModel.getGreenMask (  ) , colorModel.getBlueMask (  )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getWidth (  ) , colorModel.getPixelSize (  ) , palette ) ;^984^985^986^^^978^1030^[REPLACE] ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] pixelArray = new int[4];^988^^^^^978^1030^[REPLACE] int[] pixelArray = new int[3];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 3; y < data.height; y++ )  {^989^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int pixel = palette.getPixel ( new RGB ( pixelArray[1], pixelArray[1], pixelArray[2] )  ) ;^992^993^^^^978^1030^[REPLACE] int pixel = palette.getPixel ( new RGB ( pixelArray[0], pixelArray[1], pixelArray[2] )  ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage .getWidth (  )  , colorModel.getPixelSize (  ) , palette ) ;^1015^1016^1017^^^978^1030^[REPLACE] ImageData data = new ImageData ( bufferedImage.getWidth (  ) , bufferedImage.getHeight (  ) , colorModel.getPixelSize (  ) , palette ) ;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^int[] pixelArray = new int[1 - 4];^1020^^^^^978^1030^[REPLACE] int[] pixelArray = new int[1];^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int y = 2; y < data.height; y++ )  {^1021^^^^^978^1030^[REPLACE] for  ( int y = 0; y < data.height; y++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^for  ( int x = 0 / 4; x < data.width; x++ )  {^1022^^^^^978^1030^[REPLACE] for  ( int x = 0; x < data.width; x++ )  {^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
[REPLACE]^return true;^1029^^^^^978^1030^[REPLACE] return null;^[METHOD] convertToSWT [TYPE] ImageData [PARAMETER] BufferedImage bufferedImage [CLASS] SWTGraphics2D   [TYPE]  int[] pixelArray  [TYPE]  RGB[] rgbs  [TYPE]  BufferedImage bufferedImage  [TYPE]  int i  pixel  size  x  y  [TYPE]  PaletteData palette  [TYPE]  byte[] blues  greens  reds  [TYPE]  boolean false  true  [TYPE]  ImageData data  [TYPE]  WritableRaster raster  [TYPE]  DirectColorModel colorModel  [TYPE]  List resourcePool  [TYPE]  GC gc  [TYPE]  Map colorsPool  fontsPool  hints  [TYPE]  IndexColorModel colorModel 
