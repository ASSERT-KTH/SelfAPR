[REPLACE]^private  final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^391^^^^^^^[REPLACE] private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^ [CLASS] ShapeUtilities  
[REPLACE]^if  ( ! shape instanceof Cloneable )  {^105^^^^^103^114^[REPLACE] if  ( shape instanceof Cloneable )  {^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[ADD]^^105^106^107^108^^103^114^[ADD] if  ( shape instanceof Cloneable )  { try { return  ( Shape )  ObjectUtilities.clone ( shape ) ; }^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[ADD]^return  ( Shape )  ObjectUtilities.clone ( shape ) ;^106^107^108^^^103^114^[ADD] try { return  ( Shape )  ObjectUtilities.clone ( shape ) ; }^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[REPLACE]^return ObjectUtilities.equal ( s1, s2 ) ;^107^^^^^103^114^[REPLACE] return  ( Shape )  ObjectUtilities.clone ( shape ) ;^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[REPLACE]^return  ( Shape )  ObjectUtilities .createLineRegion ( this , SQRT2 )  ;^107^^^^^103^114^[REPLACE] return  ( Shape )  ObjectUtilities.clone ( shape ) ;^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[ADD]^^109^110^111^^^103^114^[ADD] catch  ( CloneNotSupportedException cnse )  { } }^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[REPLACE]^Shape result = true;^112^^^^^103^114^[REPLACE] Shape result = null;^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[REPLACE]^return  ( a2 == null ) ;^113^^^^^103^114^[REPLACE] return result;^[METHOD] clone [TYPE] Shape [PARAMETER] Shape shape [CLASS] ShapeUtilities   [TYPE]  Shape result  shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  CloneNotSupportedException cnse 
[REPLACE]^if  (  s2 instanceof Line2D )  {^130^^^^^129^149^[REPLACE] if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  (  s2 instanceof Ellipse2D )  {^133^^^^^129^149^[REPLACE] else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[ADD]^^133^134^135^^^129^149^[ADD] else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  { return equal (  ( Ellipse2D )  s1,  ( Ellipse2D )  s2 ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! s1 instanceof Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^[REPLACE] else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[ADD]^return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ;^136^137^138^^^129^149^[ADD] else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  { return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^else {^139^^^^^129^149^[REPLACE] else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( s1 instanceof Arc2D )  &&  ( s2 instanceof Arc2D )  )  {     return equal (  (  ( Arc2D )   ( s1 )  ) ,  (  ( Arc2D )   ( s2 )  )  ) ; }else     if  (  ( s1 instanceof Polygon )  &&  ( s2 instanceof Polygon )  )  {         return equal (  (  ( Polygon )   ( s1 )  ) ,  (  ( Polygon )   ( s2 )  )  ) ;     }else         if  (  ( s1 instanceof GeneralPath )  &&  ( s2 instanceof GeneralPath )  )  {             return equal (  (  ( GeneralPath )   ( s1 )  ) ,  (  ( GeneralPath )   ( s2 )  )  ) ;         }else {             return equal ( s1, s2 ) ;         }^139^^^^^129^149^[REMOVE] ^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^else {^142^^^^^129^149^[REPLACE] else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return transform.createTransformedShape ( shape ) ;^147^^^^^129^149^[REPLACE] return ObjectUtilities.equal ( s1, s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return ObjectUtilities.equal ( s1, s2 ) ;^143^^^^^129^149^[REPLACE] return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return ObjectUtilities.equal ( s1, s2 ) ;^140^^^^^129^149^[REPLACE] return equal (  ( Polygon )  s1,  ( Polygon )  s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[ADD]^^142^143^144^^^129^149^[ADD] else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  { return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return ObjectUtilities .createUpTriangle ( SQRT2 )  ;^147^^^^^129^149^[REPLACE] return ObjectUtilities.equal ( s1, s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return equal (  ( Line2D )  s1,  ( Line2D )  s2 ) ;^137^^^^^129^149^[REPLACE] return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[ADD]^return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ;^142^143^144^^^129^149^[ADD] else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  { return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^else if  ( ! s1 instanceof GeneralPath ) {^142^^^^^129^149^[REPLACE] else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return equal (  ( Line2D )  s1,  ( Line2D )  s2 ) ;^134^^^^^129^149^[REPLACE] return equal (  ( Ellipse2D )  s1,  ( Ellipse2D )  s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^else {^136^^^^^129^149^[REPLACE] else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! s1 instanceof Polygon ) {^139^^^^^129^149^[REPLACE] else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^[REPLACE] else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ;^131^^^^^129^149^[REPLACE] return equal (  ( Line2D )  s1,  ( Line2D )  s2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^else {^133^^^^^129^149^[REPLACE] else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( s1 instanceof Arc2D )  &&  ( s2 instanceof Arc2D )  )  {     return equal (  (  ( Arc2D )   ( s1 )  ) ,  (  ( Arc2D )   ( s2 )  )  ) ; }else     if  (  ( s1 instanceof Polygon )  &&  ( s2 instanceof Polygon )  )  {         return equal (  (  ( Polygon )   ( s1 )  ) ,  (  ( Polygon )   ( s2 )  )  ) ;     }else         if  (  ( s1 instanceof GeneralPath )  &&  ( s2 instanceof GeneralPath )  )  {             return equal (  (  ( GeneralPath )   ( s1 )  ) ,  (  ( GeneralPath )   ( s2 )  )  ) ;         }else {             return equal ( s1, s2 ) ;         }^133^^^^^129^149^[REMOVE] ^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^else if  ( ! s1 instanceof Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^[REPLACE] else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! s2 instanceof Polygon ) {^139^^^^^129^149^[REPLACE] else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[ADD]^return equal (  ( Polygon )  s1,  ( Polygon )  s2 ) ;^139^140^141^^^129^149^[ADD] else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  { return equal (  ( Polygon )  s1,  ( Polygon )  s2 ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  (  s2 instanceof Polygon )  {^139^^^^^129^149^[REPLACE] else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Shape s1 Shape s2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Shape s1  s2  [TYPE]  boolean false  true 
[REPLACE]^if  ( l2 != null )  {^161^^^^^160^174^[REPLACE] if  ( l1 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^return  ( l2 != true ) ;;^162^^^^^160^174^[REPLACE] return  ( l2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^return true ;^162^^^^^160^174^[REPLACE] return  ( l2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^if  (l1 != true )  {^164^^^^^160^174^[REPLACE] if  ( l2 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^return true;^165^^^^^160^174^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^if  ( !l1.getP2 (  ) .equals ( l2.getP1 (  )  )  )  {^167^^^^^160^174^[REPLACE] if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^return true;^168^^^^^160^174^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^if  ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^170^^^^^160^174^[REPLACE] if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^return true;^171^^^^^160^174^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^return false;^173^^^^^160^174^[REPLACE] return true;^[METHOD] equal [TYPE] boolean [PARAMETER] Line2D l1 Line2D l2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Line2D l1  l2  [TYPE]  boolean false  true 
[REPLACE]^if  ( e1 != null )  {^186^^^^^185^196^[REPLACE] if  ( e1 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[ADD]^return  ( e2 == null ) ;^186^187^188^^^185^196^[ADD] if  ( e1 == null )  { return  ( e2 == null ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^return  ( e2 != this ) ;;^187^^^^^185^196^[REPLACE] return  ( e2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^187^^^^^185^196^[REPLACE] return  ( e2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^if  ( e1 != null )  {^189^^^^^185^196^[REPLACE] if  ( e2 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^return true;^190^^^^^185^196^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^if  ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^192^^^^^185^196^[REPLACE] if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^return true;^193^^^^^185^196^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^return false;^195^^^^^185^196^[REPLACE] return true;^[METHOD] equal [TYPE] boolean [PARAMETER] Ellipse2D e1 Ellipse2D e2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Ellipse2D e1  e2  [TYPE]  boolean false  true 
[REPLACE]^if  ( a1 != true )  {^208^^^^^207^227^[REPLACE] if  ( a1 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 != true ) ;;^209^^^^^207^227^[REPLACE] return  ( a2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 != null ) ;;^209^^^^^207^227^[REPLACE] return  ( a2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^if  ( a1 != null )  {^211^^^^^207^227^[REPLACE] if  ( a2 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return true;^212^^^^^207^227^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^if  ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^214^^^^^207^227^[REPLACE] if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return true;^215^^^^^207^227^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^if  ( a1 .getAngleExtent (  )    ==  a2^217^^^^^207^227^[REPLACE] if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REMOVE]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^217^^^^^207^227^[REMOVE] ^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return true;^218^^^^^207^227^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^if  ( a1.getAngleExtent (  )   ==  a2.getAngleExtent (  )  )  {^220^^^^^207^227^[REPLACE] if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return true;^221^^^^^207^227^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^if  ( a1.getArcType (  )   ==  a2.getArcType (  )  )  {^223^^^^^207^227^[REPLACE] if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[ADD]^return false;^223^224^225^^^207^227^[ADD] if  ( a1.getArcType (  )  != a2.getArcType (  )  )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return true;^224^^^^^207^227^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return false;^226^^^^^207^227^[REPLACE] return true;^[METHOD] equal [TYPE] boolean [PARAMETER] Arc2D a1 Arc2D a2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Arc2D a1  a2  [TYPE]  boolean false  true 
[REPLACE]^if  ( p2 != null )  {^239^^^^^238^255^[REPLACE] if  ( p1 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^240^^^^^238^255^[REPLACE] return  ( p2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return false ;^240^^^^^238^255^[REPLACE] return  ( p2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^if  ( p2 != true )  {^242^^^^^238^255^[REPLACE] if  ( p2 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[ADD]^return false;^242^243^244^^^238^255^[ADD] if  ( p2 == null )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return true;^243^^^^^238^255^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^if  (false  ==  p2.npoints )  {^245^^^^^238^255^[REPLACE] if  ( p1.npoints != p2.npoints )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return true;^246^^^^^238^255^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^if  ( !  p1.xpoints, p2.xpoints    )  {^248^^^^^238^255^[REPLACE] if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[ADD]^^248^249^250^^^238^255^[ADD] if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return true;^249^^^^^238^255^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^if  ( !  p1.ypoints, p2.ypoints    )  {^251^^^^^238^255^[REPLACE] if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return true;^252^^^^^238^255^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^return false;^254^^^^^238^255^[REPLACE] return true;^[METHOD] equal [TYPE] boolean [PARAMETER] Polygon p1 Polygon p2 [CLASS] ShapeUtilities   [TYPE]  float SQRT2  [TYPE]  Polygon p1  p2  [TYPE]  boolean false  true 
[REPLACE]^if  ( p1 != this  )  {^267^^^^^266^298^[REPLACE] if  ( p1 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^267^268^269^^^266^298^[ADD] if  ( p1 == null )  { return  ( p2 == null ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return  ( a2 == null ) ;^268^^^^^266^298^[REPLACE] return  ( p2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return  ( p2 != null ) ;;^268^^^^^266^298^[REPLACE] return  ( p2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  ( p2 != this  )  {^270^^^^^266^298^[REPLACE] if  ( p2 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^270^271^272^^^266^298^[ADD] if  ( p2 == null )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return true;^271^^^^^266^298^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  (seg2 (  )   ==  p2.getWindingRule (  )  )  {^273^^^^^266^298^[REPLACE] if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return true;^274^^^^^266^298^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^PathIterator iterator1 = p2.getPathIterator ( true ) ;^276^^^^^266^298^[REPLACE] PathIterator iterator1 = p1.getPathIterator ( null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^276^277^^^^266^298^[ADD] PathIterator iterator1 = p1.getPathIterator ( null ) ; PathIterator iterator2 = p1.getPathIterator ( null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^PathIterator iterator2 = p1.getPathIterator ( this ) ;^277^^^^^266^298^[REPLACE] PathIterator iterator2 = p1.getPathIterator ( null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^double[] d1 = new double[2];^278^^^^^266^298^[REPLACE] double[] d1 = new double[6];^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^double[] d2 = new double[6 / 2];^279^^^^^266^298^[REPLACE] double[] d2 = new double[6];^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^279^^^^^266^298^[ADD] double[] d2 = new double[6];^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^boolean done = iterator1.isDone (  )  ;^280^^^^^266^298^[REPLACE] boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^280^^^^^266^298^[ADD] boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^while  ( done )  {^281^^^^^266^298^[REPLACE] while  ( !done )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  ( iterator1.isDone (  )   ==  iterator2.isDone (  )  )  {^282^^^^^266^298^[REPLACE] if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REMOVE]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^282^^^^^266^298^[REMOVE] ^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return true;^283^^^^^266^298^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  ( seg1  ==  seg2 )  {^287^^^^^266^298^[REPLACE] if  ( seg1 != seg2 )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^return false;^287^288^289^^^266^298^[ADD] if  ( seg1 != seg2 )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return true;^288^^^^^266^298^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  ( !  d1, d2    )  {^290^^^^^266^298^[REPLACE] if  ( !Arrays.equals ( d1, d2 )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^return false;^290^291^292^^^266^298^[ADD] if  ( !Arrays.equals ( d1, d2 )  )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return true;^291^^^^^266^298^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^done =true (  )  ;^295^^^^^266^298^[REPLACE] done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^int seg1 = iterator2.currentSegment ( d1 ) ;^285^^^^^266^298^[REPLACE] int seg1 = iterator1.currentSegment ( d1 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^int seg1 = iterator1.currentSegment ( d1 ) ;^286^^^^^266^298^[REPLACE] int seg2 = iterator2.currentSegment ( d2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  ( iterator1.currentSegment (  )   ==  iterator2.isDone (  )  )  {^282^^^^^266^298^[REPLACE] if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^287^288^289^^^266^298^[ADD] if  ( seg1 != seg2 )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^done = iterator1.isDone (  )   >  iterator2.isDone (  ) ;^295^^^^^266^298^[REPLACE] done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[ADD]^^295^^^^^266^298^[ADD] done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^int seg1 = iterator1.currentSegment ( d2 ) ;^285^^^^^266^298^[REPLACE] int seg1 = iterator1.currentSegment ( d1 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^int seg2 = iterator1.currentSegment ( d2 ) ;^286^^^^^266^298^[REPLACE] int seg2 = iterator2.currentSegment ( d2 ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^return false;^297^^^^^266^298^[REPLACE] return true;^[METHOD] equal [TYPE] boolean [PARAMETER] GeneralPath p1 GeneralPath p2 [CLASS] ShapeUtilities   [TYPE]  boolean done  false  true  [TYPE]  float SQRT2  [TYPE]  GeneralPath p1  p2  [TYPE]  double[] d1  d2  [TYPE]  PathIterator iterator1  iterator2  [TYPE]  int seg1  seg2 
[REPLACE]^if  ( shape != this  )  {^312^^^^^309^318^[REPLACE] if  ( shape == null )  {^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape double transX double transY [CLASS] ShapeUtilities   [TYPE]  AffineTransform transform  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  double transX  transY 
[REPLACE]^return ;^313^^^^^309^318^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape double transX double transY [CLASS] ShapeUtilities   [TYPE]  AffineTransform transform  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  double transX  transY 
[REPLACE]^return transform .getTranslateInstance ( transX , transY )  ;^317^^^^^309^318^[REPLACE] return transform.createTransformedShape ( shape ) ;^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape double transX double transY [CLASS] ShapeUtilities   [TYPE]  AffineTransform transform  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  [TYPE]  double transX  transY 
[REPLACE]^if  ( shape != null )  {^336^^^^^332^347^[REPLACE] if  ( shape == null )  {^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape RectangleAnchor anchor double locationX double locationY [CLASS] ShapeUtilities   [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  Point2D anchorPoint  [TYPE]  double locationX  locationY  [TYPE]  AffineTransform transform  [TYPE]  RectangleAnchor anchor  [TYPE]  float SQRT2 
[REPLACE]^return ;^337^^^^^332^347^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape RectangleAnchor anchor double locationX double locationY [CLASS] ShapeUtilities   [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  Point2D anchorPoint  [TYPE]  double locationX  locationY  [TYPE]  AffineTransform transform  [TYPE]  RectangleAnchor anchor  [TYPE]  float SQRT2 
[REPLACE]^if  ( anchor != null )  {^339^^^^^332^347^[REPLACE] if  ( anchor == null )  {^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape RectangleAnchor anchor double locationX double locationY [CLASS] ShapeUtilities   [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  Point2D anchorPoint  [TYPE]  double locationX  locationY  [TYPE]  AffineTransform transform  [TYPE]  RectangleAnchor anchor  [TYPE]  float SQRT2 
[REPLACE]^return ;^340^^^^^332^347^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape RectangleAnchor anchor double locationX double locationY [CLASS] ShapeUtilities   [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  Point2D anchorPoint  [TYPE]  double locationX  locationY  [TYPE]  AffineTransform transform  [TYPE]  RectangleAnchor anchor  [TYPE]  float SQRT2 
[REPLACE]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX -locationY (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^[REPLACE] AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape RectangleAnchor anchor double locationX double locationY [CLASS] ShapeUtilities   [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  Point2D anchorPoint  [TYPE]  double locationX  locationY  [TYPE]  AffineTransform transform  [TYPE]  RectangleAnchor anchor  [TYPE]  float SQRT2 
[REPLACE]^return ObjectUtilities.equal ( s1, s2 ) ;^346^^^^^332^347^[REPLACE] return transform.createTransformedShape ( shape ) ;^[METHOD] createTranslatedShape [TYPE] Shape [PARAMETER] Shape shape RectangleAnchor anchor double locationX double locationY [CLASS] ShapeUtilities   [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  Point2D anchorPoint  [TYPE]  double locationX  locationY  [TYPE]  AffineTransform transform  [TYPE]  RectangleAnchor anchor  [TYPE]  float SQRT2 
[REPLACE]^if  ( result != null )  {^362^^^^^360^368^[REPLACE] if  ( base == null )  {^[METHOD] rotateShape [TYPE] Shape [PARAMETER] Shape base double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  [TYPE]  Shape base  result  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle 
[REPLACE]^return true;^363^^^^^360^368^[REPLACE] return null;^[METHOD] rotateShape [TYPE] Shape [PARAMETER] Shape base double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  [TYPE]  Shape base  result  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle 
[REPLACE]^return false;^363^^^^^360^368^[REPLACE] return null;^[METHOD] rotateShape [TYPE] Shape [PARAMETER] Shape base double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  [TYPE]  Shape base  result  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle 
[REPLACE]^AffineTransform rotate = AffineTransform .getTranslateInstance ( angle , angle )  ;^365^^^^^360^368^[REPLACE] AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[METHOD] rotateShape [TYPE] Shape [PARAMETER] Shape base double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  [TYPE]  Shape base  result  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle 
[REPLACE]^Shape result = rotate .getTranslateInstance ( angle , angle )  ;^366^^^^^360^368^[REPLACE] Shape result = rotate.createTransformedShape ( base ) ;^[METHOD] rotateShape [TYPE] Shape [PARAMETER] Shape base double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  [TYPE]  Shape base  result  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle 
[REPLACE]^return base;^367^^^^^360^368^[REPLACE] return result;^[METHOD] rotateShape [TYPE] Shape [PARAMETER] Shape base double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  [TYPE]  Shape base  result  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle 
[REPLACE]^PathIterator iterator1 = p1.getPathIterator ( null ) ;^382^^^^^379^388^[REPLACE] AffineTransform saved = g2.getTransform (  ) ;^[METHOD] drawRotatedShape [TYPE] void [PARAMETER] Graphics2D g2 Shape shape double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  saved  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle  [TYPE]  Graphics2D g2 
[REPLACE]^PathIterator iterator1 = p1.getPathIterator ( null ) ;^383^^^^^379^388^[REPLACE] AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[METHOD] drawRotatedShape [TYPE] void [PARAMETER] Graphics2D g2 Shape shape double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  saved  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle  [TYPE]  Graphics2D g2 
[REPLACE]^g2.setTransform ( rotate ) ;^384^^^^^379^388^[REPLACE] g2.transform ( rotate ) ;^[METHOD] drawRotatedShape [TYPE] void [PARAMETER] Graphics2D g2 Shape shape double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  saved  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle  [TYPE]  Graphics2D g2 
[ADD]^^384^385^386^^388^379^388^[ADD] g2.transform ( rotate ) ; g2.draw ( shape ) ; g2.setTransform ( saved ) ; }^[METHOD] drawRotatedShape [TYPE] void [PARAMETER] Graphics2D g2 Shape shape double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  saved  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle  [TYPE]  Graphics2D g2 
[REPLACE]^g2 .transform ( rotate )  ;^385^^^^^379^388^[REPLACE] g2.draw ( shape ) ;^[METHOD] drawRotatedShape [TYPE] void [PARAMETER] Graphics2D g2 Shape shape double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  saved  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle  [TYPE]  Graphics2D g2 
[REPLACE]^g2.transform ( saved ) ;^386^^^^^379^388^[REPLACE] g2.setTransform ( saved ) ;^[METHOD] drawRotatedShape [TYPE] void [PARAMETER] Graphics2D g2 Shape shape double angle float x float y [CLASS] ShapeUtilities   [TYPE]  AffineTransform rotate  saved  [TYPE]  Shape shape  [TYPE]  boolean false  true  [TYPE]  float SQRT2  x  y  [TYPE]  double angle  [TYPE]  Graphics2D g2 
[REPLACE]^GeneralPath result = new GeneralPath (  ) ;^402^^^^^401^417^[REPLACE] GeneralPath p0 = new GeneralPath (  ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( l - SQRT2, -l + t ) ;^403^^^^^401^417^[REPLACE] p0.moveTo ( -l - t, -l + t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[ADD]^^403^^^^^401^417^[ADD] p0.moveTo ( -l - t, -l + t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( l + SQRT2, -l - t ) ;^404^^^^^401^417^[REPLACE] p0.lineTo ( -l + t, -l - t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( 0.0f,SQRT2 * SQRT2 ) ;^405^^^^^401^417^[REPLACE] p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REMOVE]^result.lineTo ( x2 - width / 2.0f, y2 ) ;^405^^^^^401^417^[REMOVE] ^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( l  <=  t,  <= l  <=  t ) ;^406^^^^^401^417^[REPLACE] p0.lineTo ( l - t, -l - t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REMOVE]^result.lineTo ( x2 - width / 2.0f, y2 ) ;^406^^^^^401^417^[REMOVE] ^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( l  <=  t, -l  <=  t ) ;^407^^^^^401^417^[REPLACE] p0.lineTo ( l + t, -l + t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[ADD]^p0.lineTo ( t * SQRT2, 0.0f ) ;^407^408^^^^401^417^[ADD] p0.lineTo ( l + t, -l + t ) ; p0.lineTo ( t * SQRT2, 0.0f ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( SQRT2  ^  SQRT2, 0.0f ) ;^408^^^^^401^417^[REPLACE] p0.lineTo ( t * SQRT2, 0.0f ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( l  &  t, l - t ) ;^409^^^^^401^417^[REPLACE] p0.lineTo ( l + t, l - t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( l  <  SQRT2, l + t ) ;^410^^^^^401^417^[REPLACE] p0.lineTo ( l - t, l + t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REMOVE]^result.lineTo ( x2 - width / 2.0f, y2 ) ;^410^^^^^401^417^[REMOVE] ^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( 0.0f, t  >=  SQRT2 ) ;^411^^^^^401^417^[REPLACE] p0.lineTo ( 0.0f, t * SQRT2 ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( l + SQRT2, l + t ) ;^412^^^^^401^417^[REPLACE] p0.lineTo ( -l + t, l + t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo (l - t, l - t ) ;^413^^^^^401^417^[REPLACE] p0.lineTo ( -l - t, l - t ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo (t * SQRT2, 0.0f ) ;^414^^^^^401^417^[REPLACE] p0.lineTo ( -t * SQRT2, 0.0f ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.getWindingRule (  ) ;^415^^^^^401^417^[REPLACE] p0.closePath (  ) ;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^416^^^^^401^417^[REPLACE] return p0;^[METHOD] createDiagonalCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^GeneralPath result = new GeneralPath (  ) ;^428^^^^^427^443^[REPLACE] GeneralPath p0 = new GeneralPath (  ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0 .lineTo ( SQRT2 , l )  ;^429^^^^^427^443^[REPLACE] p0.moveTo ( -l, t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( -t, SQRT2 ) ;^430^^^^^427^443^[REPLACE] p0.lineTo ( -t, t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( s, s ) ;^431^^^^^427^443^[REPLACE] p0.lineTo ( -t, l ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0 .moveTo ( l , t )  ;^432^^^^^427^443^[REPLACE] p0.lineTo ( t, l ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( SQRT2, t ) ;^433^^^^^427^443^[REPLACE] p0.lineTo ( t, t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( l, t ) ;^434^^^^^427^443^[REPLACE] p0.lineTo ( l, t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( l, -SQRT2 ) ;^435^^^^^427^443^[REPLACE] p0.lineTo ( l, -t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( SQRT2, -t ) ;^436^^^^^427^443^[REPLACE] p0.lineTo ( t, -t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( t, -l ) ;^437^^^^^427^443^[REPLACE] p0.lineTo ( t, -l ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( -t, l ) ;^438^^^^^427^443^[REPLACE] p0.lineTo ( -t, -l ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( -t, -SQRT2 ) ;^439^^^^^427^443^[REPLACE] p0.lineTo ( -t, -t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( -t, l ) ;^440^^^^^427^443^[REPLACE] p0.lineTo ( -l, -t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[ADD]^^440^^^^^427^443^[ADD] p0.lineTo ( -l, -t ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.getWindingRule (  ) ;^441^^^^^427^443^[REPLACE] p0.closePath (  ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[ADD]^^441^^^^^427^443^[ADD] p0.closePath (  ) ;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^442^^^^^427^443^[REPLACE] return p0;^[METHOD] createRegularCross [TYPE] Shape [PARAMETER] float l float t [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^GeneralPath result = new GeneralPath (  ) ;^453^^^^^452^460^[REPLACE] GeneralPath p0 = new GeneralPath (  ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( 0.0f, s ) ;^454^^^^^452^460^[REPLACE] p0.moveTo ( 0.0f, -s ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( s, 0.0f ) ;^455^^^^^452^460^[REPLACE] p0.lineTo ( s, 0.0f ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( 0.0f, s ) ;^456^^^^^452^460^[REPLACE] p0.lineTo ( 0.0f, s ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( s, 0.0f ) ;^457^^^^^452^460^[REPLACE] p0.lineTo ( -s, 0.0f ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[ADD]^^457^^^^^452^460^[ADD] p0.lineTo ( -s, 0.0f ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.getWindingRule (  ) ;^458^^^^^452^460^[REPLACE] p0.closePath (  ) ;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^459^^^^^452^460^[REPLACE] return p0;^[METHOD] createDiamond [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^GeneralPath result = new GeneralPath (  ) ;^470^^^^^469^476^[REPLACE] GeneralPath p0 = new GeneralPath (  ) ;^[METHOD] createUpTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0 .lineTo ( l , s )  ;^471^^^^^469^476^[REPLACE] p0.moveTo ( 0.0f, -s ) ;^[METHOD] createUpTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.moveTo ( s, s ) ;^472^^^^^469^476^[REPLACE] p0.lineTo ( s, s ) ;^[METHOD] createUpTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( -s, SQRT2 ) ;^473^^^^^469^476^[REPLACE] p0.lineTo ( -s, s ) ;^[METHOD] createUpTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^result.closePath (  ) ;^474^^^^^469^476^[REPLACE] p0.closePath (  ) ;^[METHOD] createUpTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^475^^^^^469^476^[REPLACE] return p0;^[METHOD] createUpTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^GeneralPath result = new GeneralPath (  ) ;^486^^^^^485^492^[REPLACE] GeneralPath p0 = new GeneralPath (  ) ;^[METHOD] createDownTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( 0.0f, s ) ;^487^^^^^485^492^[REPLACE] p0.moveTo ( 0.0f, s ) ;^[METHOD] createDownTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( SQRT2, -s ) ;^488^^^^^485^492^[REPLACE] p0.lineTo ( s, -s ) ;^[METHOD] createDownTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.lineTo ( -s, -SQRT2 ) ;^489^^^^^485^492^[REPLACE] p0.lineTo ( -s, -s ) ;^[METHOD] createDownTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^p0.getWindingRule (  ) ;^490^^^^^485^492^[REPLACE] p0.closePath (  ) ;^[METHOD] createDownTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^return  ( a2 == null ) ;^491^^^^^485^492^[REPLACE] return p0;^[METHOD] createDownTriangle [TYPE] Shape [PARAMETER] float s [CLASS] ShapeUtilities   [TYPE]  float SQRT2  l  s  t  x  y  [TYPE]  GeneralPath p0  [TYPE]  boolean false  true 
[REPLACE]^GeneralPath p0 = new GeneralPath (  ) ;^505^^^^^504^529^[REPLACE] GeneralPath result = new GeneralPath (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float x1 =  ( float )  line.getP1 (  ) ;^506^^^^^504^529^[REPLACE] float x1 =  ( float )  line.getX1 (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[ADD]^^506^^^^^504^529^[ADD] float x1 =  ( float )  line.getX1 (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float x2 =  ( float )  line.getP2 (  ) ;^507^^^^^504^529^[REPLACE] float x2 =  ( float )  line.getX2 (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[ADD]^^507^^^^^504^529^[ADD] float x2 =  ( float )  line.getX2 (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float y1 =  ( float )  line.getP1 (  ) ;^508^^^^^504^529^[REPLACE] float y1 =  ( float )  line.getY1 (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float y2 =  ( float )  line.getP2 (  ) ;^509^^^^^504^529^[REPLACE] float y2 =  ( float )  line.getY2 (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^if  (  ( x2 - x1 )   ==  3.0d )  {^510^^^^^504^529^[REPLACE] if  (  ( x2 - x1 )  != 0.0 )  {^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[ADD]^^510^511^512^513^514^504^529^[ADD] if  (  ( x2 - x1 )  != 0.0 )  { double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ; float dx =  ( float )  Math.sin ( theta )  * width; float dy =  ( float )  Math.cos ( theta )  * width; result.moveTo ( x1 - dx, y1 + dy ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^result.moveTo (y1 - width / 2.0f, y1 ) ;^522^^^^^504^529^[REPLACE] result.moveTo ( x1 - width / 2.0f, y1 ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^result.lineTo ( y2 + width / 2.0f, y1 ) ;^523^^^^^504^529^[REPLACE] result.lineTo ( x1 + width / 2.0f, y1 ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^result.lineTo (y2 + width / 2.0f, y1 ) ;^524^^^^^504^529^[REPLACE] result.lineTo ( x2 + width / 2.0f, y2 ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^result.lineTo (y2 - t / 2.0f, y2 ) ;^525^^^^^504^529^[REPLACE] result.lineTo ( x2 - width / 2.0f, y2 ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^result.getWindingRule (  ) ;^526^^^^^504^529^[REPLACE] result.closePath (  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^double theta = Math.atan (  ( y2 - y1 )  /  (y2 )  ) ;^511^^^^^504^529^[REPLACE] double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float dx =  ( float )  Math.sin ( theta )   ;^512^^^^^504^529^[REPLACE] float dx =  ( float )  Math.sin ( theta )  * width;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float dy =  ( float )  Math.cos ( theta )   ;^513^^^^^504^529^[REPLACE] float dy =  ( float )  Math.cos ( theta )  * width;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^double theta = Math.atan (  ( y2 )  /  ( y2 )  ) ;^511^^^^^504^529^[REPLACE] double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^float dy =  ( float )    theta     ;^513^^^^^504^529^[REPLACE] float dy =  ( float )  Math.cos ( theta )  * width;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[ADD]^^513^^^^^504^529^[ADD] float dy =  ( float )  Math.cos ( theta )  * width;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^return  ( a2 == null ) ;^528^^^^^504^529^[REPLACE] return result;^[METHOD] createLineRegion [TYPE] Shape [PARAMETER] Line2D line float width [CLASS] ShapeUtilities   [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  GeneralPath result  [TYPE]  Line2D line  [TYPE]  double theta 
[REPLACE]^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ; ;^547^^^^^544^551^[REPLACE] x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[METHOD] getPointInRectangle [TYPE] Point2D [PARAMETER] double x double y Rectangle2D area [CLASS] ShapeUtilities   [TYPE]  Rectangle2D area  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double x  y 
[ADD]^^547^548^^^^544^551^[ADD] x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ; y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[METHOD] getPointInRectangle [TYPE] Point2D [PARAMETER] double x double y Rectangle2D area [CLASS] ShapeUtilities   [TYPE]  Rectangle2D area  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double x  y 
[REPLACE]^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ; ;^548^^^^^544^551^[REPLACE] y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[METHOD] getPointInRectangle [TYPE] Point2D [PARAMETER] double x double y Rectangle2D area [CLASS] ShapeUtilities   [TYPE]  Rectangle2D area  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double x  y 
[REPLACE]^return ObjectUtilities.equal ( s1, s2 ) ;^549^^^^^544^551^[REPLACE] return new Point2D.Double ( x, y ) ;^[METHOD] getPointInRectangle [TYPE] Point2D [PARAMETER] double x double y Rectangle2D area [CLASS] ShapeUtilities   [TYPE]  Rectangle2D area  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double x  y 
[REPLACE]^double x0 = rect2.getX (  ) ;^564^^^^^562^575^[REPLACE] double x0 = rect1.getX (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^double y0 = rect2.getX (  ) ;^565^^^^^562^575^[REPLACE] double y0 = rect1.getY (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^double x = rect1.getX (  ) ;^566^^^^^562^575^[REPLACE] double x = rect2.getX (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[ADD]^^566^567^^^^562^575^[ADD] double x = rect2.getX (  ) ; double y = rect2.getY (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^double y = rect1.getY (  ) ;^567^^^^^562^575^[REPLACE] double y = rect2.getY (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[ADD]^^567^568^^^^562^575^[ADD] double y = rect2.getY (  ) ; double w = rect2.getWidth (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^double w = rect1.getWidth (  ) ;^568^^^^^562^575^[REPLACE] double w = rect2.getWidth (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^double h = rect1.getMinX (  ) ;^569^^^^^562^575^[REPLACE] double h = rect2.getHeight (  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^return false ;^571^572^573^^^562^575^[REPLACE] return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double h  w  x  x0  y  y0 
[REPLACE]^double x0 = rect2.getX (  ) ;^589^^^^^587^598^[REPLACE] double x0 = rect1.getX (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[REPLACE]^double y0 = rect2 .getX (  )  ;^590^^^^^587^598^[REPLACE] double y0 = rect1.getY (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[ADD]^^590^^^^^587^598^[ADD] double y0 = rect1.getY (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[REPLACE]^double x = rect2.getY (  ) ;^592^^^^^587^598^[REPLACE] double x = rect2.getX (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[REPLACE]^double width = rect1.getWidth (  ) ;^593^^^^^587^598^[REPLACE] double width = rect2.getWidth (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[ADD]^^593^^^^^587^598^[ADD] double width = rect2.getWidth (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[REPLACE]^double y = rect1.getY (  ) ;^594^^^^^587^598^[REPLACE] double y = rect2.getY (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[REPLACE]^double height = rect2 .getMinX (  )  ;^595^^^^^587^598^[REPLACE] double height = rect2.getHeight (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[ADD]^^595^^^^^587^598^[ADD] double height = rect2.getHeight (  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
[REPLACE]^return  ( x + width ;^596^597^^^^587^598^[REPLACE] return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[METHOD] intersects [TYPE] boolean [PARAMETER] Rectangle2D rect1 Rectangle2D rect2 [CLASS] ShapeUtilities   [TYPE]  Rectangle2D rect1  rect2  [TYPE]  boolean false  true  [TYPE]  float SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  [TYPE]  double height  width  x  x0  y  y0 
