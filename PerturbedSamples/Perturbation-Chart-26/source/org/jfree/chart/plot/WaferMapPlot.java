[REPLACE]^private  final  short  serialVersionUID = 4668320403707308155;^79^^^^^^^[REPLACE] private static final long serialVersionUID = 4668320403707308155L;^ [CLASS] WaferMapPlot  
[REPLACE]^public static  Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke ( 0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,^82^83^84^85^^82^87^[REPLACE] public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke ( 0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,^ [CLASS] WaferMapPlot  
[REPLACE]^public static final Paint DEFAULT_GRIDLINE_PAINT ;^90^^^^^^^[REPLACE] public static final Paint DEFAULT_GRIDLINE_PAINT = Color.lightGray;^ [CLASS] WaferMapPlot  
[REPLACE]^public static  boolean DEFAULT_CROSSHAIR_VISIBLE = true;^93^^^^^^^[REPLACE] public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;^ [CLASS] WaferMapPlot  
[REPLACE]^public static final Stroke DEFAULT_CROSSHAIR_STROKE  = null ;^96^97^^^^96^97^[REPLACE] public static final Stroke DEFAULT_CROSSHAIR_STROKE = DEFAULT_GRIDLINE_STROKE;^ [CLASS] WaferMapPlot  
[REPLACE]^public static final Paint DEFAULT_CROSSHAIR_PAINT  = null ;^100^^^^^^^[REPLACE] public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;^ [CLASS] WaferMapPlot  
[REPLACE]^protected  ResourceBundle localizationResources = ResourceBundle.getBundle ( "org.jfree.chart.plot.LocalizationBundle" ) ;^103^104^^^^103^104^[REPLACE] protected static ResourceBundle localizationResources = ResourceBundle.getBundle ( "org.jfree.chart.plot.LocalizationBundle" ) ;^ [CLASS] WaferMapPlot  
[REPLACE]^this ( this ) ;^125^^^^^124^126^[REPLACE] this ( null ) ;^[METHOD] <init> [TYPE] WaferMapPlot() [PARAMETER] [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[ADD]^^125^^^^^124^126^[ADD] this ( null ) ;^[METHOD] <init> [TYPE] WaferMapPlot() [PARAMETER] [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this ( dataset, this ) ;^134^^^^^133^135^[REPLACE] this ( dataset, null ) ;^[METHOD] <init> [TYPE] WaferMapDataset) [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^g2.draw ( notch ) ;^145^^^^^143^160^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.orientation  =  this.orientation ;^147^^^^^143^160^[REPLACE] this.orientation = PlotOrientation.VERTICAL;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.dataset =  null;^149^^^^^143^160^[REPLACE] this.dataset = dataset;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( dataset == null )  {^150^^^^^143^160^[REPLACE] if  ( dataset != null )  {^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[ADD]^dataset.addChangeListener ( this ) ;^150^151^152^^^143^160^[ADD] if  ( dataset != null )  { dataset.addChangeListener ( this ) ; }^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^dataset.removeChangeListener ( this ) ;^151^^^^^143^160^[REPLACE] dataset.addChangeListener ( this ) ;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.renderer =  null;^154^^^^^143^160^[REPLACE] this.renderer = renderer;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( renderer == null )  {^155^^^^^143^160^[REPLACE] if  ( renderer != null )  {^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^renderer.addChangeListener ( this ) ;^156^^^^^143^160^[REPLACE] renderer.setPlot ( this ) ;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^renderer.removeChangeListener ( this ) ;^157^^^^^143^160^[REPLACE] renderer.addChangeListener ( this ) ;^[METHOD] <init> [TYPE] WaferMapRenderer) [PARAMETER] WaferMapDataset dataset WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^return this.dataset;^168^^^^^167^169^[REPLACE] return  ( "WMAP_Plot" ) ;^[METHOD] getPlotType [TYPE] String [PARAMETER] [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^return;^177^^^^^176^178^[REPLACE] return this.dataset;^[METHOD] getDataset [TYPE] WaferMapDataset [PARAMETER] [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( this.dataset == null )  {^189^^^^^186^202^[REPLACE] if  ( this.dataset != null )  {^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.dataset.addChangeListener ( this ) ;^190^^^^^186^202^[REPLACE] this.dataset.removeChangeListener ( this ) ;^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.dataset =  null;^194^^^^^186^202^[REPLACE] this.dataset = dataset;^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( dataset == null )  {^195^^^^^186^202^[REPLACE] if  ( dataset != null )  {^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^setDatasetGroup ( dataset .getMaxChipX (  )   ) ;^196^^^^^186^202^[REPLACE] setDatasetGroup ( dataset.getGroup (  )  ) ;^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REMOVE]^double startX = plotArea.getX (  ) ;^196^^^^^186^202^[REMOVE] ^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^setDatasetGroup ( dataset.getMaxChipX (  )  ) ;^196^^^^^186^202^[REPLACE] setDatasetGroup ( dataset.getGroup (  )  ) ;^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^dataset.removeChangeListener ( this ) ;^197^^^^^186^202^[REPLACE] dataset.addChangeListener ( this ) ;^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REMOVE]^renderer.addChangeListener ( this ) ;^197^^^^^186^202^[REMOVE] ^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^g2.setClip ( getWaferEdge ( plotArea )  ) ;^201^^^^^186^202^[REPLACE] datasetChanged ( new DatasetChangeEvent ( this, dataset )  ) ;^[METHOD] setDataset [TYPE] void [PARAMETER] WaferMapDataset dataset [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( this.renderer == null )  {^213^^^^^211^224^[REPLACE] if  ( this.renderer != null )  {^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[ADD]^^213^214^215^^^211^224^[ADD] if  ( this.renderer != null )  { this.renderer.removeChangeListener ( this ) ; }^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.renderer .addChangeListener ( null )  ;^214^^^^^211^224^[REPLACE] this.renderer.removeChangeListener ( this ) ;^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[ADD]^^214^^^^^211^224^[ADD] this.renderer.removeChangeListener ( this ) ;^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^this.renderer =  null;^217^^^^^211^224^[REPLACE] this.renderer = renderer;^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( renderer == null )  {^218^^^^^211^224^[REPLACE] if  ( renderer != null )  {^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^renderer.addChangeListener ( this ) ;^219^^^^^211^224^[REPLACE] renderer.setPlot ( this ) ;^[METHOD] setRenderer [TYPE] void [PARAMETER] WaferMapRenderer renderer [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[REPLACE]^boolean b1 =  ( area.getWidth (  )   !=  MINIMUM_WIDTH_TO_DRAW ) ;^240^^^^^235^258^[REPLACE] boolean b1 =  ( area.getWidth (  )  <= MINIMUM_WIDTH_TO_DRAW ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^boolean b2 =  ( this (  )   >=  MINIMUM_HEIGHT_TO_DRAW ) ;^241^^^^^235^258^[REPLACE] boolean b2 =  ( area.getHeight (  )  <= MINIMUM_HEIGHT_TO_DRAW ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^if  ( b1 ) {^242^^^^^235^258^[REPLACE] if  ( b1 || b2 )  {^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^return this.dataset;^243^^^^^235^258^[REPLACE] return;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^if  ( info == false )  {^247^^^^^235^258^[REPLACE] if  ( info != null )  {^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^double startX = plotArea.getX (  ) ;^248^^^^^235^258^[REPLACE] info.setPlotArea ( area ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^Rectangle2D chip = new Rectangle2D.Double (  ) ;^252^^^^^235^258^[REPLACE] RectangleInsets insets = getInsets (  ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^double startX = plotArea.getX (  ) ;^253^^^^^235^258^[REPLACE] insets.trim ( area ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REMOVE]^double startX = plotArea.getX (  ) ;^253^^^^^235^258^[REMOVE] ^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^g2.setClip ( getWaferEdge ( plotArea )  ) ;^255^^^^^235^258^[REPLACE] drawChipGrid ( g2, area ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^g2.setClip ( getWaferEdge ( plotArea )  ) ;^256^^^^^235^258^[REPLACE] drawWaferEdge ( g2, area ) ;^[METHOD] draw [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D area Point2D anchor PlotState state PlotRenderingInfo info [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  PlotRenderingInfo info  [TYPE]  WaferMapDataset dataset  [TYPE]  Rectangle2D area  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  Point2D anchor  [TYPE]  RectangleInsets insets  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer  [TYPE]  PlotState state 
[REPLACE]^double startX = plotArea.getX (  ) ;^268^^^^^266^332^[REPLACE] Shape savedClip = g2.getClip (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setColor ( getWaferEdge ( plotArea )  ) ;^269^^^^^266^332^[REPLACE] g2.setClip ( getWaferEdge ( plotArea )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double startX = plotArea.getX (  ) ;^269^^^^^266^332^[REPLACE] g2.setClip ( getWaferEdge ( plotArea )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^269^^^^^266^332^[ADD] g2.setClip ( getWaferEdge ( plotArea )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Shape savedClip = g2.getClip (  ) ;^270^^^^^266^332^[REPLACE] Rectangle2D chip = new Rectangle2D.Double (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^int xchips = 1;^271^^^^^266^332^[REPLACE] int xchips = 35;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^int ychips = 20 >>> 4;^272^^^^^266^332^[REPLACE] int ychips = 20;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double startX = plotArea.getX (  ) ;^273^^^^^266^332^[REPLACE] double space = 1d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  (dataset == false )  {^274^^^^^266^332^[REPLACE] if  ( this.dataset != null )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^xchips = this.dataset.getMaxChipX (  )   &&  2;^275^^^^^266^332^[REPLACE] xchips = this.dataset.getMaxChipX (  )  + 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^ychips = this.dataset.getMaxChipY (  )   ==  2;^276^^^^^266^332^[REPLACE] ychips = this.dataset.getMaxChipY (  )  + 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^space  = null ;^277^^^^^266^332^[REPLACE] space = this.dataset.getChipSpace (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^xchips = this.dataset.getMaxChipX (  )   <  2;^275^^^^^266^332^[REPLACE] xchips = this.dataset.getMaxChipX (  )  + 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^xchips = this.dataset.getMaxChipX (  )  + 2; ;^276^^^^^266^332^[REPLACE] ychips = this.dataset.getMaxChipY (  )  + 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^277^^^^^266^332^[ADD] space = this.dataset.getChipSpace (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double startX = plotArea.getY (  ) ;^279^^^^^266^332^[REPLACE] double startX = plotArea.getX (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double startY = plotArea.getX (  ) ;^280^^^^^266^332^[REPLACE] double startY = plotArea.getY (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double space = 1d;^281^^^^^266^332^[REPLACE] double chipWidth = 1d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double space = 1d;^282^^^^^266^332^[REPLACE] double chipHeight = 1d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^282^^^^^266^332^[ADD] double chipHeight = 1d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( plotArea.getWidth (  )   ==  plotArea.getHeight (  )  )  {^283^^^^^266^332^[REPLACE] if  ( plotArea.getWidth (  )  != plotArea.getHeight (  )  )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( plotArea.getWidth (  )   <  plotArea.getHeight (  )  )  {^286^^^^^266^332^[REPLACE] if  ( plotArea.getWidth (  )  > plotArea.getHeight (  )  )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^291^^^^^286^293^[REPLACE] major = plotArea.getHeight (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^major = plotArea.getWidth (  ) ; ;^292^^^^^286^293^[REPLACE] minor = plotArea.getWidth (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^287^^^^^266^332^[REPLACE] major = plotArea.getWidth (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^288^^^^^266^332^[REPLACE] minor = plotArea.getHeight (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^288^^^^^266^332^[ADD] minor = plotArea.getHeight (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( plotArea.getWidth (  )   &&  minor )  {^295^^^^^266^332^[REPLACE] if  ( plotArea.getWidth (  )  == minor )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^startX +=  (upperLeftY )   ;^303^^^^^295^308^[REPLACE] startX +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getHeight (  )  -  ( space * xchips - 1 )  )  ;^304^305^^^^295^308^[REPLACE] chipWidth =  ( plotArea.getHeight (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipHeight =  ( plotArea.getHeight (  )  -  ( space * y - 1L )  )  ;^306^307^^^^295^308^[REPLACE] chipHeight =  ( plotArea.getHeight (  )  -  ( space * ychips - 1 )  ) / ychips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^startY +=  ( major - minor )   ;^296^^^^^266^332^[REPLACE] startY +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^296^^^^^266^332^[ADD] startY +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 2 )  )  ;^297^298^^^^266^332^[REPLACE] chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipHeight =  ( plotArea.getWidth (  )  -  ( space * ychips - 1 )  )  ;^299^300^^^^266^332^[REPLACE] chipHeight =  ( plotArea.getWidth (  )  -  ( space * ychips - 1 )  ) / ychips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^291^^^^^266^332^[REPLACE] major = plotArea.getHeight (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^major = plotArea.getWidth (  ) ; ;^292^^^^^266^332^[REPLACE] minor = plotArea.getWidth (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 1 )  )  ;^297^298^^^^266^332^[REPLACE] chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^startY +=  ( major - minor )  / 2; ;^303^^^^^266^332^[REPLACE] startX +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^303^^^^^266^332^[ADD] startX +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getHeight (  )  -  ( space * xchips - 1 )  )  ;^304^305^^^^266^332^[REPLACE] chipWidth =  ( plotArea.getHeight (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipHeight =  ( plotArea.getHeight (  )  -  ( space * ychips - 1 )  )  ;^306^307^^^^266^332^[REPLACE] chipHeight =  ( plotArea.getHeight (  )  -  ( space * ychips - 1 )  ) / ychips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double minor = 0d;^284^^^^^266^332^[REPLACE] double major = 0d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double major = 0d;^285^^^^^266^332^[REPLACE] double minor = 0d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( upperLeftY (  )   <=  upperLeftX (  )  )  {^286^^^^^266^332^[REPLACE] if  ( plotArea.getWidth (  )  > plotArea.getHeight (  )  )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^292^^^^^286^293^[ADD] minor = plotArea.getWidth (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( plotArea.getWidth (  )   !=  minor )  {^295^^^^^266^332^[REPLACE] if  ( plotArea.getWidth (  )  == minor )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^startX +=  ( upperLeftY )   ;^303^^^^^295^308^[REPLACE] startX +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getHeight (  )  -  ( space * xchips - 3 )  )  ;^304^305^^^^295^308^[REPLACE] chipWidth =  ( plotArea.getHeight (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipHeight =  ( plotArea.getHeight (  )  -  ( space * ychips - 3 )  )  ;^306^307^^^^295^308^[REPLACE] chipHeight =  ( plotArea.getHeight (  )  -  ( space * ychips - 1 )  ) / ychips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^306^307^^^^295^308^[ADD] chipHeight =  ( plotArea.getHeight (  )  -  ( space * ychips - 1 )  ) / ychips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^startX +=  ( major - minor )  / 2; ;^296^^^^^266^332^[REPLACE] startY +=  ( major - minor )  / 2;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 4 )  )  ;^297^298^^^^266^332^[REPLACE] chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^299^300^^^^266^332^[ADD] chipHeight =  ( plotArea.getWidth (  )  -  ( space * ychips - 1 )  ) / ychips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^292^^^^^266^332^[ADD] minor = plotArea.getWidth (  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^chipWidth =  ( plotArea.getWidth (  )  -  ( space *space - 1 )  )  ;^297^298^^^^266^332^[REPLACE] chipWidth =  ( plotArea.getWidth (  )  -  ( space * xchips - 1 )  ) / xchips;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^284^285^^^^266^332^[ADD] double major = 0d; double minor = 0d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^285^^^^^266^332^[ADD] double minor = 0d;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( this.dataset.getChipValue ( x - 0, ychips - y - 0 )  == null )  {^319^^^^^266^332^[REPLACE] if  ( this.dataset.getChipValue ( x - 1, ychips - y - 1 )  != null )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setPaint ( this.renderer.getChipColor ( this.dataset.getChipValue ( x -xchips, ychips - y -xchips ) )^320^321^322^323^^266^332^[REPLACE] g2.setPaint ( this.renderer.getChipColor ( this.dataset.getChipValue ( x - 1, ychips - y - 1 ) )^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^this.renderer.getChipColor ( this.dataset.getChipValue (xchips - 1, ychips - y - 1 ) ) ) ;^321^322^323^324^^266^332^[REPLACE] this.renderer.getChipColor ( this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^this.dataset.getChipSpace (xchips - 1, ychips - y - 1 ) ) ) ;^322^323^324^^^266^332^[REPLACE] this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^for  ( int x = 1; x  >=  xchips; x++ )  {^311^^^^^266^332^[REPLACE] for  ( int x = 1; x <= xchips; x++ )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( this.dataset.getChipValue ( x - 1, ychips - y - 1 )  == this  )  {^319^^^^^266^332^[REPLACE] if  ( this.dataset.getChipValue ( x - 1, ychips - y - 1 )  != null )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^this.renderer.setPlot ( this.dataset.getChipValue ( xchips  ^  1 + 2, ychips  ^  y  ^  1 + 2 ) ) ) ;^321^322^323^324^^266^332^[REPLACE] this.renderer.getChipColor ( this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^this.dataset.getChipValue (xchips - 1, xchips - y - 1 ) ) ) ;^322^323^324^^^266^332^[REPLACE] this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^322^323^324^^^266^332^[ADD] this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^for  ( int y = 1; y  >  ychips; y++ )  {^314^^^^^266^332^[REPLACE] for  ( int y = 1; y <= ychips; y++ )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( this.dataset.getChipValue ( x - 1, ychips - y - 1 )  == null )  {^319^^^^^266^332^[REPLACE] if  ( this.dataset.getChipValue ( x - 1, ychips - y - 1 )  != null )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setPaint ( this.renderer.getChipColor ( this.dataset.getChipValue ( x  &  0, ychips  &  y  &  0 ) )^320^321^322^323^^266^332^[REPLACE] g2.setPaint ( this.renderer.getChipColor ( this.dataset.getChipValue ( x - 1, ychips - y - 1 ) )^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^this.dataset.getChipValue (xchips - 1 / 3, ychips - y - 1 / 3 ) ) ) ;^322^323^324^^^266^332^[REPLACE] this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double upperLeftY =  ( startY - chipHeight )   >   ( chipHeight * y )  >   ( space *  ( y - 3 )  ) ;^315^316^^^^266^332^[REPLACE] double upperLeftY =  ( startY - chipHeight )  +  ( chipHeight * y ) +  ( space *  ( y - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^315^316^^^^266^332^[ADD] double upperLeftY =  ( startY - chipHeight )  +  ( chipHeight * y ) +  ( space *  ( y - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double upperLeftX =  ( startX - chipWidth )   ^   ( chipWidth * x )  ^   ( space *  ( x - 1 )  ) ;^312^313^^^^266^332^[REPLACE] double upperLeftX =  ( startX - chipWidth )  +  ( chipWidth * x ) +  ( space *  ( x - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^for  ( int y = 1 - 0; y <= ychips; y++ )  {^314^^^^^266^332^[REPLACE] for  ( int y = 1; y <= ychips; y++ )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double upperLeftY =  ( startY - chipHeight )   >   ( chipHeight * y )  >   ( space *  ( y - 1 )  ) ;^315^316^^^^266^332^[REPLACE] double upperLeftY =  ( startY - chipHeight )  +  ( chipHeight * y ) +  ( space *  ( y - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^for  ( int y = 1; y  >=  y; y++ )  {^314^^^^^266^332^[REPLACE] for  ( int y = 1; y <= ychips; y++ )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^314^315^316^317^318^266^332^[ADD] for  ( int y = 1; y <= ychips; y++ )  { double upperLeftY =  ( startY - chipHeight )  +  ( chipHeight * y ) +  ( space *  ( y - 1 )  ) ; chip.setFrame ( upperLeftX, upperLeftY, chipWidth, chipHeight ) ; g2.setColor ( Color.white ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( this.dataset.addChangeListener ( x - 1, ychips - y - 1 )  == null )  {^319^^^^^266^332^[REPLACE] if  ( this.dataset.getChipValue ( x - 1, ychips - y - 1 )  != null )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setPaint ( this.renderer.getChipColor ( this.dataset.getChipValue ( xchips - 1, ychips - y - 1 ) )^320^321^322^323^^266^332^[REPLACE] g2.setPaint ( this.renderer.getChipColor ( this.dataset.getChipValue ( x - 1, ychips - y - 1 ) )^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^this.dataset.getChipValue ( xchipschips - 1, ychips - y - 1 ) ) ) ;^322^323^324^^^266^332^[REPLACE] this.dataset.getChipValue ( x - 1, ychips - y - 1 ) ) ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double upperLeftY =  ( startY - chipHeight )   <=   ( chipHeight * y )  <=   ( space *  ( y - 1 )  ) ;^315^316^^^^266^332^[REPLACE] double upperLeftY =  ( startY - chipHeight )  +  ( chipHeight * y ) +  ( space *  ( y - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^for  ( int x = 4; x <= xchips; x++ )  {^311^^^^^266^332^[REPLACE] for  ( int x = 1; x <= xchips; x++ )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double upperLeftX =  ( startX - chipWidth )   &   ( chipWidth * x )  &   ( space *  ( x - 2 )  ) ;^312^313^^^^266^332^[REPLACE] double upperLeftX =  ( startX - chipWidth )  +  ( chipWidth * x ) +  ( space *  ( x - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^312^313^^^^266^332^[ADD] double upperLeftX =  ( startX - chipWidth )  +  ( chipWidth * x ) +  ( space *  ( x - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^for  ( int y = 4; y <= ychips; y++ )  {^314^^^^^266^332^[REPLACE] for  ( int y = 1; y <= ychips; y++ )  {^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double upperLeftY =  ( startY - chipHeight )   >   ( chipHeight * y )  >   ( space *  ( y - 2 )  ) ;^315^316^^^^266^332^[REPLACE] double upperLeftY =  ( startY - chipHeight )  +  ( chipHeight * y ) +  ( space *  ( y - 1 )  ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setColor ( savedClip ) ;^331^^^^^266^332^[REPLACE] g2.setClip ( savedClip ) ;^[METHOD] drawChipGrid [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  Shape savedClip  [TYPE]  WaferMapDataset dataset  [TYPE]  double chipHeight  chipWidth  major  minor  space  startX  startY  upperLeftX  upperLeftY  [TYPE]  Rectangle2D chip  plotArea  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  long serialVersionUID  [TYPE]  int x  xchips  y  ychips  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Ellipse2D waferEdge = getWaferEdge ( plotArea ) ;^342^^^^^341^370^[REPLACE] Ellipse2D edge = new Ellipse2D.Double (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^342^343^^^^341^370^[ADD] Ellipse2D edge = new Ellipse2D.Double (  ) ; double diameter = plotArea.getWidth (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^double diameter = plotArea .getHeight (  )  ;^343^^^^^341^370^[REPLACE] double diameter = plotArea.getWidth (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^double upperLeftX = plotArea.getY (  ) ;^344^^^^^341^370^[REPLACE] double upperLeftX = plotArea.getX (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^double upperLeftY = plotArea.getX (  ) ;^345^^^^^341^370^[REPLACE] double upperLeftY = plotArea.getY (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^if  ( plotArea.getWidth (  )   ==  plotArea.getHeight (  )  )  {^347^^^^^341^370^[REPLACE] if  ( plotArea.getWidth (  )  != plotArea.getHeight (  )  )  {^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^if  ( plotArea.getWidth (  )   <=  plotArea.getHeight (  )  )  {^350^^^^^341^370^[REPLACE] if  ( plotArea.getWidth (  )  > plotArea.getHeight (  )  )  {^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^350^351^352^353^^341^370^[ADD] if  ( plotArea.getWidth (  )  > plotArea.getHeight (  )  )  { major = plotArea.getWidth (  ) ; minor = plotArea.getHeight (  ) ; }^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^355^^^^^350^357^[REPLACE] major = plotArea.getHeight (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^major = plotArea.getWidth (  ) ; ;^356^^^^^350^357^[REPLACE] minor = plotArea.getWidth (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^351^^^^^341^370^[REPLACE] major = plotArea.getWidth (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^351^352^^^^341^370^[ADD] major = plotArea.getWidth (  ) ; minor = plotArea.getHeight (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^352^^^^^341^370^[REPLACE] minor = plotArea.getHeight (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^if  ( plotArea.getWidth (  )   ||  minor )  {^361^^^^^341^370^[REPLACE] if  ( plotArea.getWidth (  )  == minor )  {^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^upperLeftX =upperLeftY (  )  +  ( major - minor )  / 2;^365^^^^^361^366^[REPLACE] upperLeftX = plotArea.getX (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^upperLeftY =upperLeftY (  )  +  ( major - minor )  / 2;^362^^^^^341^370^[REPLACE] upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^351^^^^^341^370^[ADD] major = plotArea.getWidth (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^minor = plotArea.getWidth (  ) ; ;^355^^^^^341^370^[REPLACE] major = plotArea.getHeight (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^355^^^^^341^370^[ADD] major = plotArea.getHeight (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^major = plotArea.getWidth (  ) ; ;^356^^^^^341^370^[REPLACE] minor = plotArea.getWidth (  ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^diameter =  null;^359^^^^^341^370^[REPLACE] diameter = minor;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^362^^^^^341^370^[ADD] upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2; ;^365^^^^^341^370^[REPLACE] upperLeftX = plotArea.getX (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^double minor = 0d;^348^^^^^341^370^[REPLACE] double major = 0d;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^double major = 0d;^349^^^^^341^370^[REPLACE] double minor = 0d;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^349^^^^^341^370^[ADD] double minor = 0d;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^if  ( plotArea.getWidth (  )   !=  plotArea.getHeight (  )  )  {^350^^^^^341^370^[REPLACE] if  ( plotArea.getWidth (  )  > plotArea.getHeight (  )  )  {^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^major = plotArea.getWidth (  ) ;minor = plotArea.getHeight (  ) ;^350^351^352^353^^341^370^[ADD] if  ( plotArea.getWidth (  )  > plotArea.getHeight (  )  )  { major = plotArea.getWidth (  ) ; minor = plotArea.getHeight (  ) ; }^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^if  ( upperLeftY (  )   ||  upperLeftY )  {^361^^^^^341^370^[REPLACE] if  ( plotArea.getWidth (  )  == minor )  {^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2;^361^362^363^^^341^370^[ADD] if  ( plotArea.getWidth (  )  == minor )  { upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2; }^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^upperLeftX = plotArea.getX (  )  +  ( major - minor )  / 2; ;^362^^^^^341^370^[REPLACE] upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^diameter =  upperLeftY;^359^^^^^341^370^[REPLACE] diameter = minor;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^upperLeftY = plotArea.getY (  )   ^   ( major - minor )  / 2;^362^^^^^341^370^[REPLACE] upperLeftY = plotArea.getY (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^upperLeftX = plotArea.getX (  )   <=   ( major - minor )  / 2 * 3;^365^^^^^341^370^[REPLACE] upperLeftX = plotArea.getX (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[ADD]^^365^^^^^341^370^[ADD] upperLeftX = plotArea.getX (  )  +  ( major - minor )  / 2;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^edge.setFrame ( upperLeftX, upperLeftX, diameter, diameter ) ;^368^^^^^341^370^[REPLACE] edge.setFrame ( upperLeftX, upperLeftY, diameter, diameter ) ;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^return;^369^^^^^341^370^[REPLACE] return edge;^[METHOD] getWaferEdge [TYPE] Ellipse2D [PARAMETER] Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  double diameter  major  minor  upperLeftX  upperLeftY  [TYPE]  Rectangle2D plotArea  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D edge 
[REPLACE]^Ellipse2D waferEdge = getWaferEdge ( waferFrame ) ;^380^^^^^378^414^[REPLACE] Ellipse2D waferEdge = getWaferEdge ( plotArea ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setClip ( Color.black ) ;^381^^^^^378^414^[REPLACE] g2.setColor ( Color.black ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2 .draw ( g2 , notchFrame , null , null , 1 )  ;^382^^^^^378^414^[REPLACE] g2.draw ( waferEdge ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Arc2D notch = this;^386^^^^^378^414^[REPLACE] Arc2D notch = null;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^386^^^^^378^414^[ADD] Arc2D notch = null;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Rectangle2D waferFrame = waferEdge.getWidth (  ) ;^387^^^^^378^414^[REPLACE] Rectangle2D waferFrame = waferEdge.getFrame (  ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^double notchDiameter = waferFrame.getWidth (  )  * 0.04;^387^388^^^^378^414^[ADD] Rectangle2D waferFrame = waferEdge.getFrame (  ) ; double notchDiameter = waferFrame.getWidth (  )  * 0.04;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^double notchDiameter = waferFrame.getWidth (  )   ;^388^^^^^378^414^[REPLACE] double notchDiameter = waferFrame.getWidth (  )  * 0.04;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^if  ( this.orientation  != orientation )  {^389^^^^^378^414^[REPLACE] if  ( this.orientation == PlotOrientation.HORIZONTAL )  {^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^notch = new Arc2D.Double ( notchFrame, 90d, 180d, Arc2D.OPEN ) ; ;^407^^^^^389^408^[REPLACE] notch = new Arc2D.Double ( notchFrame, 0d, 180d, Arc2D.OPEN ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Rectangle4D notchFrame = new Rectangle4D.Double ( waferFrame.getX (  )  +  ( waferFrame.getWidth (  )  / 4 ) -  (notchDiameter ) , waferFrame.getY (  )^400^401^402^403^^389^408^[REPLACE] Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  +  ( waferFrame.getWidth (  )  / 2 ) -  ( notchDiameter / 2 ) , waferFrame.getY (  )^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^400^401^402^^^389^408^[ADD] Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  +  ( waferFrame.getWidth (  )  / 2 )^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^notch = new Arc2D.Double ( notchFrame, 0d, 180d, Arc2D.OPEN ) ; ;^397^^^^^378^414^[REPLACE] notch = new Arc2D.Double ( notchFrame, 90d, 180d, Arc2D.OPEN ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^397^^^^^378^414^[ADD] notch = new Arc2D.Double ( notchFrame, 90d, 180d, Arc2D.OPEN ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  + waferFrame.getWidth (  )  |   ( notchDiameter / 2 ) , waferFrame.getY (  )^390^391^392^393^^378^414^[REPLACE] Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  + waferFrame.getWidth (  ) -  ( notchDiameter / 2 ) , waferFrame.getY (  )^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^notch = new Arc2D.Double ( notchFrame, 90d, 180d, Arc2D.OPEN ) ; ;^407^^^^^378^414^[REPLACE] notch = new Arc2D.Double ( notchFrame, 0d, 180d, Arc2D.OPEN ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  + waferFrame.getWidth (  ) -  (notchDiameter ) , waferFrame.getY (  )^390^391^392^393^^378^414^[REPLACE] Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  + waferFrame.getWidth (  ) -  ( notchDiameter / 2 ) , waferFrame.getY (  )^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^390^391^392^^^378^414^[ADD] Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  + waferFrame.getWidth (  )^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^Rectangle1D notchFrame = new Rectangle1D.Double ( plotArea.getX (  )  +  ( waferFrame.getWidth (  )  / 1 )  ^   ( notchDiameter / 1 ) , waferFrame.getY (  )^400^401^402^403^^378^414^[REPLACE] Rectangle2D notchFrame = new Rectangle2D.Double ( waferFrame.getX (  )  +  ( waferFrame.getWidth (  )  / 2 ) -  ( notchDiameter / 2 ) , waferFrame.getY (  )^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.setClip ( Color.white ) ;^409^^^^^378^414^[REPLACE] g2.setColor ( Color.white ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.draw ( notch ) ;^410^^^^^378^414^[REPLACE] g2.fill ( notch ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2 .setClip ( null )  ;^411^^^^^378^414^[REPLACE] g2.setColor ( Color.black ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[ADD]^^411^^^^^378^414^[ADD] g2.setColor ( Color.black ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^g2.fill ( notch ) ;^412^^^^^378^414^[REPLACE] g2.draw ( notch ) ;^[METHOD] drawWaferEdge [TYPE] void [PARAMETER] Graphics2D g2 Rectangle2D plotArea [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  WaferMapDataset dataset  [TYPE]  double notchDiameter  [TYPE]  Rectangle2D notchFrame  plotArea  waferFrame  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  Arc2D notch  [TYPE]  long serialVersionUID  [TYPE]  Ellipse2D waferEdge  [TYPE]  Graphics2D g2  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  ResourceBundle localizationResources  [TYPE]  WaferMapRenderer renderer 
[REPLACE]^return this.renderer.getChipColor (  ) ;^422^^^^^421^423^[REPLACE] return this.renderer.getLegendCollection (  ) ;^[METHOD] getLegendItems [TYPE] LegendItemCollection [PARAMETER] [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  long serialVersionUID 
[ADD]^^431^432^^^^430^432^[ADD] notifyListeners ( new PlotChangeEvent ( this )  ) ; }^[METHOD] rendererChanged [TYPE] void [PARAMETER] RendererChangeEvent event [CLASS] WaferMapPlot   [TYPE]  Stroke DEFAULT_CROSSHAIR_STROKE  DEFAULT_GRIDLINE_STROKE  [TYPE]  PlotOrientation orientation  [TYPE]  boolean DEFAULT_CROSSHAIR_VISIBLE  b1  b2  false  true  [TYPE]  WaferMapDataset dataset  [TYPE]  ResourceBundle localizationResources  [TYPE]  Paint DEFAULT_CROSSHAIR_PAINT  DEFAULT_GRIDLINE_PAINT  [TYPE]  WaferMapRenderer renderer  [TYPE]  RendererChangeEvent event  [TYPE]  long serialVersionUID 
