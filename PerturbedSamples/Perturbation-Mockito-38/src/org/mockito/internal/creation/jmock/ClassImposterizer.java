[REPLACE]^public static  ClassImposterizer INSTANCE = new ClassImposterizer (  ) ;^30^^^^^^^[REPLACE] public static final ClassImposterizer INSTANCE = new ClassImposterizer (  ) ;^ [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug  
[REPLACE]^private ObjenesisStd objenesis  = null ;^37^^^^^^^[REPLACE] private ObjenesisStd objenesis = new ObjenesisStd (  ) ;^ [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug  
[REPLACE]^private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES  = null ;^39^^^^^39^44^[REPLACE] private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy (  )  {^ [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug  
[REPLACE]^private static final CallbackFilter IGNORE_BRIDGE_METHODS ;^46^^^^^46^50^[REPLACE] private static final CallbackFilter IGNORE_BRIDGE_METHODS = new CallbackFilter (  )  {^ [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug  
[REPLACE]^return true ;^42^^^^^41^43^[REPLACE] return "codegen." + super.getClassName ( prefix, source, key, names ) ;^[METHOD] getClassName [TYPE] String [PARAMETER] String prefix String source Object key Predicate names [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Object key  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  String prefix  source  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES  [TYPE]  Predicate names 
[REPLACE]^return method.isBridge (  )  ? 4 : 0;^48^^^^^47^49^[REPLACE] return method.isBridge (  )  ? 1 : 0;^[METHOD] accept [TYPE] int [PARAMETER] Method method [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES  [TYPE]  ClassImposterizer INSTANCE 
[REPLACE]^return type.isPrimitive (  )  && !Modifier.isPrivate ( type.getModifiers (  )  )  && true (  ) ;^53^^^^^52^54^[REPLACE] return !type.isPrimitive (  )  && !Modifier.isFinal ( type.getModifiers (  )  )  && !type.isAnonymousClass (  ) ;^[METHOD] canImposterise [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  Class type  [TYPE]  ObjenesisStd objenesis  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  boolean false  true  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES  [TYPE]  ClassImposterizer INSTANCE 
[ADD]^setConstructorsAccessible ( mockedType, true ) ;Class<?> proxyClass = createProxyClass ( mockedType, ancillaryTypes ) ;return mockedType.cast ( createProxy ( proxyClass, interceptor )  ) ;^57^58^59^60^61^56^64^[ADD] try { setConstructorsAccessible ( mockedType, true ) ; Class<?> proxyClass = createProxyClass ( mockedType, ancillaryTypes ) ; return mockedType.cast ( createProxy ( proxyClass, interceptor )  ) ; } finally {^[METHOD] imposterise [TYPE] <T> [PARAMETER] MethodInterceptor interceptor Class<T> mockedType  ancillaryTypes [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  MethodInterceptor interceptor  [TYPE]  Class[] ancillaryTypes  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  proxyClass  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^return 0.cast ( createProxy ( proxyClass, interceptor )  ) ;^60^^^^^56^64^[REPLACE] return mockedType.cast ( createProxy ( proxyClass, interceptor )  ) ;^[METHOD] imposterise [TYPE] <T> [PARAMETER] MethodInterceptor interceptor Class<T> mockedType  ancillaryTypes [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  MethodInterceptor interceptor  [TYPE]  Class[] ancillaryTypes  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  proxyClass  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^Class<?> proxyClass = createProxyClass ( mockedType, null ) ;^59^^^^^56^64^[REPLACE] Class<?> proxyClass = createProxyClass ( mockedType, ancillaryTypes ) ;^[METHOD] imposterise [TYPE] <T> [PARAMETER] MethodInterceptor interceptor Class<T> mockedType  ancillaryTypes [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  MethodInterceptor interceptor  [TYPE]  Class[] ancillaryTypes  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  proxyClass  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^for  ( Constructor<?> constructor : mockedType.getDeclaredConstructors (  )  )  { constructor.setAccessible ( accessible ) ;^67^^^^^66^70^[REPLACE] for  ( Constructor<?> constructor : mockedType.getDeclaredConstructors (  )  )  {^[METHOD] setConstructorsAccessible [TYPE] void [PARAMETER] Class<?> mockedType boolean accessible [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  boolean accessible  false  true  [TYPE]  Constructor constructor  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^if  ( false  &&  Object.class )  {^73^^^^^72^115^[REPLACE] if  ( mockedType == Object.class )  {^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^mockedType = ClassWithSuperclassToWorkAroundCglibBug.class;^73^74^75^^^72^115^[ADD] if  ( mockedType == Object.class )  { mockedType = ClassWithSuperclassToWorkAroundCglibBug.class; }^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^mockedType ;^74^^^^^72^115^[REPLACE] mockedType = ClassWithSuperclassToWorkAroundCglibBug.class;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^Enhancer enhancer = new Enhancer (  )  { @Override^77^^^^^72^115^[REPLACE] Enhancer enhancer = new Enhancer (  )  {^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setClassLoader (   mockedType    ) ;^84^^^^^72^115^[REPLACE] enhancer.setClassLoader ( SearchingClassLoader.combineLoadersOf ( mockedType )  ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setClassLoader ( SearchingClassLoader.combineLoadersOf ( this )  ) ;^84^^^^^72^115^[REPLACE] enhancer.setClassLoader ( SearchingClassLoader.combineLoadersOf ( mockedType )  ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^^84^85^^^^72^115^[ADD] enhancer.setClassLoader ( SearchingClassLoader.combineLoadersOf ( mockedType )  ) ; enhancer.setUseFactory ( true ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setUseFactory ( false ) ;^85^^^^^72^115^[REPLACE] enhancer.setUseFactory ( true ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REMOVE]^enhancer.setInterfaces ( prepend ( mockedType, interfaces )  ) ;^85^^^^^72^115^[REMOVE] ^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^if  ( null.isInterface (  )  )  {^86^^^^^72^115^[REPLACE] if  ( mockedType.isInterface (  )  )  {^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setInterfaces ( mockedType ) ;^90^^^^^86^92^[REPLACE] enhancer.setSuperclass ( mockedType ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setInterfaces ( null ) ;^91^^^^^86^92^[REPLACE] enhancer.setInterfaces ( interfaces ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer .setInterfaces ( null )  ;^87^^^^^72^115^[REPLACE] enhancer.setSuperclass ( Object.class ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^^87^^^^^72^115^[ADD] enhancer.setSuperclass ( Object.class ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setSuperclass ( prepend ( mockedType, interfaces )  ) ;^88^^^^^72^115^[REPLACE] enhancer.setInterfaces ( prepend ( mockedType, interfaces )  ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setInterfaces ( prepend ( this, interfaces )  ) ;^88^^^^^72^115^[REPLACE] enhancer.setInterfaces ( prepend ( mockedType, interfaces )  ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setInterfaces ( prepend ( mockedType, interfaces )  ) ;^93^^^^^72^115^[REPLACE] enhancer.setCallbackTypes ( new Class[]{MethodInterceptor.class, NoOp.class} ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setNamingPolicy ( IGNORE_BRIDGE_METHODS ) ;^94^^^^^72^115^[REPLACE] enhancer.setCallbackFilter ( IGNORE_BRIDGE_METHODS ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^if  ( null.cast (  )  == null )  {^95^^^^^72^115^[REPLACE] if  ( mockedType.getSigners (  )  != null )  {^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer .setUseFactory ( true )  ;^98^^^^^95^99^[REPLACE] enhancer.setNamingPolicy ( MockitoNamingPolicy.INSTANCE ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setCallbackFilter ( NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES ) ;^96^^^^^72^115^[REPLACE] enhancer.setNamingPolicy ( NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REMOVE]^enhancer.setInterfaces ( prepend ( mockedType, interfaces )  ) ;^96^^^^^72^115^[REMOVE] ^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^if  ( Modifier.isFinal ( null.getModifiers (  )  )  )  {^104^^^^^72^115^[REPLACE] if  ( Modifier.isPrivate ( mockedType.getModifiers (  )  )  )  {^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^return ;^105^106^107^108^^72^115^[REPLACE] throw new MockitoException ( "\n" + "Mockito cannot mock this class: " + mockedType + ".\n" + "Most likely it is a private class that is not visible by Mockito" ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^return enhancer.createClass (  ) ;^101^102^103^104^105^72^115^[ADD] try { return enhancer.createClass (  ) ; } catch  ( CodeGenerationException e )  { if  ( Modifier.isPrivate ( mockedType.getModifiers (  )  )  )  { throw new MockitoException ( "\n"^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^return enhancer.Enhancer (  ) ;^102^^^^^72^115^[REPLACE] return enhancer.createClass (  ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^throw new MockitoException ( "\n" + "Mockito cannot mock this class: " + mockedType ;^105^106^107^108^^72^115^[REPLACE] throw new MockitoException ( "\n" + "Mockito cannot mock this class: " + mockedType + ".\n" + "Most likely it is a private class that is not visible by Mockito" ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^throw new MockitoException ( "\n" + "Mockito cannot mock this class: " + mockedType ;^110^111^112^113^^72^115^[REPLACE] throw new MockitoException ( "\n" + "Mockito cannot mock this class: " + mockedType + ".\n" + "Mockito can only mock visible & non-final classes" ) ;^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^^110^111^112^^^72^115^[ADD] throw new MockitoException ( "\n" + "Mockito cannot mock this class: " + mockedType + ".\n"^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^^103^104^105^^^72^115^[ADD] catch  ( CodeGenerationException e )  { if  ( Modifier.isPrivate ( mockedType.getModifiers (  )  )  )  { throw new MockitoException ( "\n"^[METHOD] createProxyClass [TYPE] <T> [PARAMETER] Class<?> mockedType  interfaces [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  Enhancer enhancer  [TYPE]  CodeGenerationException e  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class mockedType  sc  [TYPE]  List constructors  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^Factory proxy =  ( Factory )  objenesis.ObjenesisStd ( proxyClass ) ;^118^^^^^117^121^[REPLACE] Factory proxy =  ( Factory )  objenesis.newInstance ( proxyClass ) ;^[METHOD] createProxy [TYPE] Object [PARAMETER] Class<?> proxyClass MethodInterceptor interceptor [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  MethodInterceptor interceptor  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Factory proxy  [TYPE]  Class proxyClass  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^enhancer.setCallbackTypes ( new Class[]{MethodInterceptor.class, NoOp.class} ) ;^119^^^^^117^121^[REPLACE] proxy.setCallbacks ( new Callback[] {interceptor, NoOp.INSTANCE} ) ;^[METHOD] createProxy [TYPE] Object [PARAMETER] Class<?> proxyClass MethodInterceptor interceptor [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  MethodInterceptor interceptor  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Factory proxy  [TYPE]  Class proxyClass  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^return all;^120^^^^^117^121^[REPLACE] return proxy;^[METHOD] createProxy [TYPE] Object [PARAMETER] Class<?> proxyClass MethodInterceptor interceptor [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  MethodInterceptor interceptor  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Factory proxy  [TYPE]  Class proxyClass  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^Class<?>[] all = new Class<?>[rest.length (  ) +1];^124^^^^^123^128^[REPLACE] Class<?>[] all = new Class<?>[rest.length+1];^[METHOD] prepend [TYPE] Class[] [PARAMETER] Class<?> first  rest [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] all  rest  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class first  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^all[4] = first;^125^^^^^123^128^[REPLACE] all[0] = first;^[METHOD] prepend [TYPE] Class[] [PARAMETER] Class<?> first  rest [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] all  rest  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class first  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^System.arraycopy ( rest, 0 , all, 1, rest.length ) ;^126^^^^^123^128^[REPLACE] System.arraycopy ( rest, 0, all, 1, rest.length ) ;^[METHOD] prepend [TYPE] Class[] [PARAMETER] Class<?> first  rest [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] all  rest  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class first  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[ADD]^^126^^^^^123^128^[ADD] System.arraycopy ( rest, 0, all, 1, rest.length ) ;^[METHOD] prepend [TYPE] Class[] [PARAMETER] Class<?> first  rest [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] all  rest  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class first  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^return null;^127^^^^^123^128^[REPLACE] return all;^[METHOD] prepend [TYPE] Class[] [PARAMETER] Class<?> first  rest [CLASS] ClassImposterizer 1 2 3 ClassWithSuperclassToWorkAroundCglibBug   [TYPE]  ObjenesisStd objenesis  [TYPE]  Class[] all  rest  [TYPE]  boolean false  true  [TYPE]  ClassImposterizer INSTANCE  [TYPE]  Class first  [TYPE]  CallbackFilter IGNORE_BRIDGE_METHODS  [TYPE]  NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES 
[REPLACE]^return "codegen."  ^  super.getClassName ( prefix, source, key, names ) ;^42^^^^^41^43^[REPLACE] return "codegen." + super.getClassName ( prefix, source, key, names ) ;^[METHOD] getClassName [TYPE] String [PARAMETER] String prefix String source Object key Predicate names [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Object key  [TYPE]  String prefix  source  [TYPE]  Predicate names 
[REPLACE]^return method.isBridge (  )  ? 4 : 0;^48^^^^^47^49^[REPLACE] return method.isBridge (  )  ? 1 : 0;^[METHOD] accept [TYPE] int [PARAMETER] Method method [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  Method method 
