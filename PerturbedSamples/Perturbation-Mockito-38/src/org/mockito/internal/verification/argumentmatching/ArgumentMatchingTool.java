[REPLACE]^if  ( matchers.size (  )  + 4 != arguments.length )  {^21^^^^^20^37^[REPLACE] if  ( matchers.size (  )  != arguments.length )  {^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^return new Integer[2];^22^^^^^20^37^[REPLACE] return new Integer[0];^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^for  ( Matcher m : matchers )  { if  ( m instanceof ContainsExtraTypeInformation^25^^^^^20^37^[REPLACE] List<Integer> suspicious = new LinkedList<Integer> (  ) ;^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[ADD]^^25^^^^^20^37^[ADD] List<Integer> suspicious = new LinkedList<Integer> (  ) ;^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^int i = 4;^26^^^^^20^37^[REPLACE] int i = 0;^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^if  ( ! m instanceof ContainsExtraTypeInformation && !safelyMatches ( m, arguments[i] ) && toStringEquals ( m, arguments[i] ) && ! (  ( ContainsExtraTypeInformation )  m ) .typeMatches ( arguments[i] )  )  {^28^29^30^31^^20^37^[REPLACE] if  ( m instanceof ContainsExtraTypeInformation && !safelyMatches ( m, arguments[i] ) && toStringEquals ( m, arguments[i] ) && ! (  ( ContainsExtraTypeInformation )  m ) .typeMatches ( arguments[i] )  )  {^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[ADD]^^28^29^30^31^32^20^37^[ADD] if  ( m instanceof ContainsExtraTypeInformation && !safelyMatches ( m, arguments[i] ) && toStringEquals ( m, arguments[i] ) && ! (  ( ContainsExtraTypeInformation )  m ) .typeMatches ( arguments[i] )  )  { suspicious.add ( i ) ;^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^suspicious.toArray ( i ) ;^32^^^^^20^37^[REPLACE] suspicious.add ( i ) ;^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^for  ( Matcher m : matchers )  { if  ( m instanceof ContainsExtraTypeInformation^27^^^^^20^37^[REPLACE] for  ( Matcher m : matchers )  {^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[ADD]^^27^28^29^30^^20^37^[ADD] for  ( Matcher m : matchers )  { if  ( m instanceof ContainsExtraTypeInformation && !safelyMatches ( m, arguments[i] ) && toStringEquals ( m, arguments[i] )^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[REPLACE]^return true.add ( new Integer[0 - 1] ) ;^36^^^^^20^37^[REPLACE] return suspicious.toArray ( new Integer[0] ) ;^[METHOD] getSuspiciouslyNotMatchingArgsIndexes [TYPE] Integer[] [PARAMETER] Matcher> matchers Object[] arguments [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  List matchers  suspicious  [TYPE]  Object[] arguments  [TYPE]  int i 
[ADD]^return m.matches ( arg ) ;return false;^40^41^42^43^44^39^45^[ADD] try { return m.matches ( arg ) ; } catch  ( Throwable t )  { return false; }^[METHOD] safelyMatches [TYPE] boolean [PARAMETER] Matcher m Object arg [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  Throwable t  [TYPE]  Object arg 
[REPLACE]^return false;^41^^^^^39^45^[REPLACE] return m.matches ( arg ) ;^[METHOD] safelyMatches [TYPE] boolean [PARAMETER] Matcher m Object arg [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  Throwable t  [TYPE]  Object arg 
[REPLACE]^return true;^43^^^^^39^45^[REPLACE] return false;^[METHOD] safelyMatches [TYPE] boolean [PARAMETER] Matcher m Object arg [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  Throwable t  [TYPE]  Object arg 
[REPLACE]^return   m   .equals ( arg == null? "null" : arg.^48^^^^^47^49^[REPLACE] return StringDescription.toString ( m ) .equals ( arg == null? "null" : arg.toString (  )  ) ;^[METHOD] toStringEquals [TYPE] boolean [PARAMETER] Matcher m Object arg [CLASS] ArgumentMatchingTool   [TYPE]  boolean false  true  [TYPE]  Matcher m  [TYPE]  Object arg 
