[REPLACE]^private  Reporter reporter;^18^^^^^^^[REPLACE] private final Reporter reporter;^ [CLASS] NumberOfInvocationsChecker  
[REPLACE]^int actualCount = actualInvocations.size (  ) ;^22^^^^^21^23^[REPLACE] this ( new Reporter (  ) , new InvocationsFinder (  )  ) ;^[METHOD] <init> [TYPE] NumberOfInvocationsChecker() [PARAMETER] [CLASS] NumberOfInvocationsChecker   [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  boolean false  true 
[REPLACE]^this.reporter =  null;^26^^^^^25^28^[REPLACE] this.reporter = reporter;^[METHOD] <init> [TYPE] InvocationsFinder) [PARAMETER] Reporter reporter InvocationsFinder finder [CLASS] NumberOfInvocationsChecker   [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  boolean false  true 
[REPLACE]^this.finder =  null;^27^^^^^25^28^[REPLACE] this.finder = finder;^[METHOD] <init> [TYPE] InvocationsFinder) [PARAMETER] Reporter reporter InvocationsFinder finder [CLASS] NumberOfInvocationsChecker   [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  boolean false  true 
[REPLACE]^int actualCount = actualInvocations.size (  ) ;^31^^^^^30^48^[REPLACE] List<Invocation> actualInvocations = finder.findInvocations ( invocations, wanted ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^int actualCount = this.size (  ) ;^33^^^^^30^48^[REPLACE] int actualCount = actualInvocations.size (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^if  ( wantedCount  >=  actualCount )  {^34^^^^^30^48^[REPLACE] if  ( wantedCount > actualCount )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^}  if  (  actualCount > 0 )  {^37^^^^^30^48^[REPLACE] } else if  ( wantedCount == 0 && actualCount > 0 )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^}   reporter.neverWantedButInvoked ( wanted, firstUndesired ) ;Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^37^38^39^40^41^30^48^[ADD] else if  ( wantedCount == 0 && actualCount > 0 )  { Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ; reporter.neverWantedButInvoked ( wanted, firstUndesired ) ; } else if  ( wantedCount < actualCount )  { Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^}  else {^40^^^^^30^48^[REPLACE] } else if  ( wantedCount < actualCount )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REMOVE]^if  (  ( wantedCount == 0 )  &&  ( actualCount > 0 )  )  {     Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;     reporter.neverWantedButInvoked ( wanted, firstUndesired ) ; }else     if  ( wantedCount < actualCount )  {         Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;         reporter.tooManyActualInvocations ( wantedCount, actualCount, wanted, firstUndesired ) ;     }^40^^^^^30^48^[REMOVE] ^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location firstUndesired = actualInvocations.get ( actualCount ) .getLocation (  ) ;^41^^^^^30^48^[REPLACE] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location firstUndesired = actualInvocations.get ( actualCount ) .getLocation (  ) ;^38^^^^^30^48^[REPLACE] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^} else if  ( wantedCount  <=  actualCount )  {^40^^^^^30^48^[REPLACE] } else if  ( wantedCount < actualCount )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location firstUndesired = this.get ( wantedCount ) .getLocation (  ) ;^41^^^^^30^48^[REPLACE] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^41^^^^^30^48^[ADD] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location lastInvocation = finder .findInvocations ( null , wanted )  ;^35^^^^^30^48^[REPLACE] Location lastInvocation = finder.getLastLocation ( actualInvocations ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^reporter.tooLittleActualInvocations ( new Discrepancy ( wantedCount, actualCount ) , wanted, lastInvocation ) ;^35^36^^^^30^48^[ADD] Location lastInvocation = finder.getLastLocation ( actualInvocations ) ; reporter.tooLittleActualInvocations ( new Discrepancy ( wantedCount, actualCount ) , wanted, lastInvocation ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^}   Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;reporter.neverWantedButInvoked ( wanted, firstUndesired ) ;Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^37^38^39^40^41^30^48^[ADD] else if  ( wantedCount == 0 && actualCount > 0 )  { Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ; reporter.neverWantedButInvoked ( wanted, firstUndesired ) ; } else if  ( wantedCount < actualCount )  { Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^reporter.neverWantedButInvoked ( wanted, firstUndesired ) ;^38^39^^^^30^48^[ADD] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ; reporter.neverWantedButInvoked ( wanted, firstUndesired ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location firstUndesired = false.get ( wantedCount ) .getLocation (  ) ;^41^^^^^30^48^[REPLACE] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location lastInvocation = finder.getLastLocation ( null ) ;^35^^^^^30^48^[REPLACE] Location lastInvocation = finder.getLastLocation ( actualInvocations ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^35^36^^^^30^48^[ADD] Location lastInvocation = finder.getLastLocation ( actualInvocations ) ; reporter.tooLittleActualInvocations ( new Discrepancy ( wantedCount, actualCount ) , wanted, lastInvocation ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location firstUndesired = null.get ( wantedCount ) .getLocation (  ) ;^38^^^^^30^48^[REPLACE] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^reporter.tooManyActualInvocations ( wantedCount, actualCount, wanted, firstUndesired ) ;^41^42^^^^30^48^[ADD] Location firstUndesired = actualInvocations.get ( wantedCount ) .getLocation (  ) ; reporter.tooManyActualInvocations ( wantedCount, actualCount, wanted, firstUndesired ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^List<Invocation> actualInvocations = finder.findInvocations ( invocations, wanted ) ;^45^^^^^30^48^[REPLACE] for  ( Invocation i : actualInvocations )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^45^46^47^^^30^48^[ADD] for  ( Invocation i : actualInvocations )  { i.markVerified (  ) ; }^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List actualInvocations  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
