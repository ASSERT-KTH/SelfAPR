[REPLACE]^FieldCopier fieldCopier  = null ;^13^^^^^^^[REPLACE] FieldCopier fieldCopier = new FieldCopier (  ) ;^ [CLASS] LenientCopyTool  
[REPLACE]^Field[] fields = classFrom.getDeclaredFields (  ) ;^16^^^^^15^25^[REPLACE] Class clazz = from.getClass (  ) ;^[METHOD] copyToMock [TYPE] <T> [PARAMETER] T from T mock [CLASS] LenientCopyTool   [TYPE]  Class clazz  mockSuperClass  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier 
[ADD]^^16^^^^^15^25^[ADD] Class clazz = from.getClass (  ) ;^[METHOD] copyToMock [TYPE] <T> [PARAMETER] T from T mock [CLASS] LenientCopyTool   [TYPE]  Class clazz  mockSuperClass  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier 
[REPLACE]^Class mockSuperClass = mock.getClass (  )  .getDeclaredFields (  )  ;^17^^^^^15^25^[REPLACE] Class mockSuperClass = mock.getClass (  ) .getSuperclass (  ) ;^[METHOD] copyToMock [TYPE] <T> [PARAMETER] T from T mock [CLASS] LenientCopyTool   [TYPE]  Class clazz  mockSuperClass  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier 
[REPLACE]^while  ( clazz  ==  Object.class )  {^21^^^^^15^25^[REPLACE] while  ( clazz != Object.class )  {^[METHOD] copyToMock [TYPE] <T> [PARAMETER] T from T mock [CLASS] LenientCopyTool   [TYPE]  Class clazz  mockSuperClass  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier 
[ADD]^^21^22^^^^15^25^[ADD] while  ( clazz != Object.class )  { copyValues ( from, mock, clazz ) ;^[METHOD] copyToMock [TYPE] <T> [PARAMETER] T from T mock [CLASS] LenientCopyTool   [TYPE]  Class clazz  mockSuperClass  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier 
[REPLACE]^clazz =  mockSuperClass.getSuperclass (  ) ;^23^^^^^15^25^[REPLACE] clazz = clazz.getSuperclass (  ) ;^[METHOD] copyToMock [TYPE] <T> [PARAMETER] T from T mock [CLASS] LenientCopyTool   [TYPE]  Class clazz  mockSuperClass  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier 
[REPLACE]^Field[] fields = classFrom .getSuperclass (  )  ;^28^^^^^27^46^[REPLACE] Field[] fields = classFrom.getDeclaredFields (  ) ;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^if  (   field.getModifiers (  )   )  {^33^^^^^27^46^[REPLACE] if  ( Modifier.isStatic ( field.getModifiers (  )  )  )  {^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < fields.length %  2; i++ )  {^30^^^^^27^46^[REPLACE] for  ( int i = 0; i < fields.length; i++ )  {^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[ADD]^^30^31^32^33^34^27^46^[ADD] for  ( int i = 0; i < fields.length; i++ )  {  Field field = fields[i]; if  ( Modifier.isStatic ( field.getModifiers (  )  )  )  { continue;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[ADD]^accessibilityChanger.enableAccess ( field ) ;fieldCopier.copyValue ( from, mock, field ) ;^37^38^39^40^41^27^46^[ADD] try { accessibilityChanger.enableAccess ( field ) ; fieldCopier.copyValue ( from, mock, field ) ; } catch  ( Throwable t )  {^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^accessibilityChanger.safelyDisableAccess ( field ) ;^38^^^^^27^46^[REPLACE] accessibilityChanger.enableAccess ( field ) ;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^fieldCopier .FieldCopier (  )  ;^39^^^^^27^46^[REPLACE] fieldCopier.copyValue ( from, mock, field ) ;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[ADD]^^39^^^^^27^46^[ADD] fieldCopier.copyValue ( from, mock, field ) ;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^Field[] fields = classFrom.getDeclaredFields (  ) ;^32^^^^^27^46^[REPLACE] Field field = fields[i];^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[ADD]^^32^^^^^27^46^[ADD] Field field = fields[i];^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^Class clazz = from.getClass (  ) ;^36^^^^^27^46^[REPLACE] AccessibilityChanger accessibilityChanger = new AccessibilityChanger (  ) ;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[ADD]^^38^^^^^27^46^[ADD] accessibilityChanger.enableAccess ( field ) ;^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < fields.length; i++ )  {^30^^^^^27^46^[REPLACE] for  ( int i = 0; i < fields.length; i++ )  {^[METHOD] copyValues [TYPE] <T> [PARAMETER] T from T mock Class classFrom [CLASS] LenientCopyTool   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  T from  mock  [TYPE]  FieldCopier fieldCopier  [TYPE]  AccessibilityChanger accessibilityChanger  [TYPE]  Throwable t  [TYPE]  Class classFrom  [TYPE]  Field[] fields  [TYPE]  int i 
