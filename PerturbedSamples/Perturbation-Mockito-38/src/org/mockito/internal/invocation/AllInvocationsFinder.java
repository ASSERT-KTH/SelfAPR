[REPLACE]^int comparison = o1.getSequenceNumber (  ) .compareTo ( o2.getSequenceNumber (  )  ) ;^24^^^^^23^31^[REPLACE] Set<Invocation> invocationsInOrder = new TreeSet<Invocation> ( new SequenceNumberComparator (  )  ) ;^[METHOD] getAllInvocations [TYPE] List [PARAMETER] Object> mocks [CLASS] AllInvocationsFinder SequenceNumberComparator   [TYPE]  Set invocationsInOrder  [TYPE]  boolean false  true  [TYPE]  List fromSingleMock  mocks  [TYPE]  Object mock 
[REPLACE]^for  ( Object mock : mocks )  { List<Invocation> fromSingleMock = new MockUtil (  ) .getMockHandler ( mock ) .getRegisteredInvocations (  ) ;^25^^^^^23^31^[REPLACE] for  ( Object mock : mocks )  {^[METHOD] getAllInvocations [TYPE] List [PARAMETER] Object> mocks [CLASS] AllInvocationsFinder SequenceNumberComparator   [TYPE]  Set invocationsInOrder  [TYPE]  boolean false  true  [TYPE]  List fromSingleMock  mocks  [TYPE]  Object mock 
[REPLACE]^List<Invocation> fromSingleMock = new MockUtil (  ) .getMockHandler ( mock )  .compareTo (  )  ;^26^^^^^23^31^[REPLACE] List<Invocation> fromSingleMock = new MockUtil (  ) .getMockHandler ( mock ) .getRegisteredInvocations (  ) ;^[METHOD] getAllInvocations [TYPE] List [PARAMETER] Object> mocks [CLASS] AllInvocationsFinder SequenceNumberComparator   [TYPE]  Set invocationsInOrder  [TYPE]  boolean false  true  [TYPE]  List fromSingleMock  mocks  [TYPE]  Object mock 
[REPLACE]^return new LinkedList<Invocation> ( true ) ;^30^^^^^23^31^[REPLACE] return new LinkedList<Invocation> ( invocationsInOrder ) ;^[METHOD] getAllInvocations [TYPE] List [PARAMETER] Object> mocks [CLASS] AllInvocationsFinder SequenceNumberComparator   [TYPE]  Set invocationsInOrder  [TYPE]  boolean false  true  [TYPE]  List fromSingleMock  mocks  [TYPE]  Object mock 
[REPLACE]^Set<Invocation> invocationsInOrder = new TreeSet<Invocation> ( new SequenceNumberComparator (  )  ) ;^35^^^^^34^38^[REPLACE] int comparison = o1.getSequenceNumber (  ) .compareTo ( o2.getSequenceNumber (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Invocation o1 Invocation o2 [CLASS] AllInvocationsFinder SequenceNumberComparator   [TYPE]  boolean false  true  [TYPE]  Invocation o1  o2  [TYPE]  int comparison 
[ADD]^^35^36^^^^34^38^[ADD] int comparison = o1.getSequenceNumber (  ) .compareTo ( o2.getSequenceNumber (  )  ) ; assert comparison != 0 : "sequence number has to be globally unique";^[METHOD] compare [TYPE] int [PARAMETER] Invocation o1 Invocation o2 [CLASS] AllInvocationsFinder SequenceNumberComparator   [TYPE]  boolean false  true  [TYPE]  Invocation o1  o2  [TYPE]  int comparison 
