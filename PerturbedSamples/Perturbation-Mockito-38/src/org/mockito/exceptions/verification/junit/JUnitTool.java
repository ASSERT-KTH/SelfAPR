[REPLACE]^private  boolean hasJUnit;^11^^^^^^^[REPLACE] private static boolean hasJUnit;^ [CLASS] JUnitTool  
[REPLACE]^return throwable;^23^^^^^22^24^[REPLACE] return hasJUnit;^[METHOD] hasJUnit [TYPE] boolean [PARAMETER] [CLASS] JUnitTool   [TYPE]  boolean false  hasJUnit  true 
[ADD]^Class<?> clazz = Class.forName ( "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent" ) ;^27^28^29^30^31^26^35^[ADD] try { Class<?> clazz = Class.forName ( "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent" ) ; AssertionError throwable =  ( AssertionError )  clazz.getConstructors (  ) [0].newInstance ( message, wanted, actual ) ; return throwable; } catch  ( Throwable t )  {^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
[REPLACE]^return hasJUnit;^30^^^^^26^35^[REPLACE] return throwable;^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
[REPLACE]^"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent"   ;^28^^^^^26^35^[REPLACE] Class<?> clazz = Class.forName ( "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent" ) ;^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
[REPLACE]^AssertionError throwable =  ( AssertionError )  clazz.getConstructors (  ) [1].newInstance ( message, wanted, actual ) ;^29^^^^^26^35^[REPLACE] AssertionError throwable =  ( AssertionError )  clazz.getConstructors (  ) [0].newInstance ( message, wanted, actual ) ;^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
[REPLACE]^return new ArgumentsAreDifferent ( actual ) ;^33^^^^^26^35^[REPLACE] return new ArgumentsAreDifferent ( message ) ;^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
[REPLACE]^AssertionError throwable =  ( AssertionError )  clazz.getConstructors (  ) [0 % 3].newInstance ( message, wanted, actual ) ;^29^^^^^26^35^[REPLACE] AssertionError throwable =  ( AssertionError )  clazz.getConstructors (  ) [0].newInstance ( message, wanted, actual ) ;^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
[ADD]^^29^30^^^^26^35^[ADD] AssertionError throwable =  ( AssertionError )  clazz.getConstructors (  ) [0].newInstance ( message, wanted, actual ) ; return throwable;^[METHOD] createArgumentsAreDifferentException [TYPE] AssertionError [PARAMETER] String message String wanted String actual [CLASS] JUnitTool   [TYPE]  Throwable t  [TYPE]  Class clazz  [TYPE]  boolean false  hasJUnit  true  [TYPE]  String actual  message  wanted  [TYPE]  AssertionError throwable 
