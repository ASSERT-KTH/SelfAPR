[REPLACE]^return ;^46^47^48^49^^45^50^[REPLACE] throw new MockitoException ( join ( "Checked exception is invalid for this method!", "Invalid: " + t )  ) ;^[METHOD] checkedExceptionInvalid [TYPE] void [PARAMETER] Throwable t [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Throwable t 
[REPLACE]^throw new MockitoException ( join ( "Checked exception is invalid for this method",true + t )  ) ;^46^47^48^49^^45^50^[REPLACE] throw new MockitoException ( join ( "Checked exception is invalid for this method!", "Invalid: " + t )  ) ;^[METHOD] checkedExceptionInvalid [TYPE] void [PARAMETER] Throwable t [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Throwable t 
[REPLACE]^throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , ;^53^54^55^^^52^57^[REPLACE] throw new MockitoException ( join ( "Cannot stub with null throwable!" )  ) ;^[METHOD] cannotStubWithNullThrowable [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new MockitoException ( join ( "Cannot stub with false throwable!" )  ) ;^53^54^55^^^52^57^[REPLACE] throw new MockitoException ( join ( "Cannot stub with null throwable!" )  ) ;^[METHOD] cannotStubWithNullThrowable [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^60^61^62^63^^59^74^[REPLACE] throw new UnfinishedStubbingException ( join ( "Unfinished stubbing detected here:", location, "",^[METHOD] unfinishedStubbing [TYPE] void [PARAMETER] Location location [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Location location 
[REPLACE]^throw new MissingMethodInvocationException ( join ( "when (  )  requires an argument which has to be a method call on a mock.", ;^77^78^79^80^^76^86^[REPLACE] throw new MissingMethodInvocationException ( join ( "when (  )  requires an argument which has to be a method call on a mock.", "For example:", "    when ( mock.getArticles (  )  ) .thenReturn ( articles ) ;",^[METHOD] missingMethodInvocation [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^89^90^91^92^93^88^102^[ADD] UnfinishedVerificationException exception = new UnfinishedVerificationException ( join ( "Missing method call for verify ( mock )  here:", location, "", "Example of correct verification:",^[METHOD] unfinishedVerificationException [TYPE] void [PARAMETER] Location location [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  UnfinishedVerificationException exception  [TYPE]  Location location 
[REPLACE]^return ;^101^^^^^88^102^[REPLACE] throw exception;^[METHOD] unfinishedVerificationException [TYPE] void [PARAMETER] Location location [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  UnfinishedVerificationException exception  [TYPE]  Location location 
[REPLACE]^return ;^105^106^107^108^^104^112^[REPLACE] throw new NotAMockException ( join ( "Argument passed to verify (  )  is not a mock!", "Examples of correct verifications:", "    verify ( mock ) .someMethod (  ) ;",^[METHOD] notAMockPassedToVerify [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^105^106^107^^^104^112^[ADD] throw new NotAMockException ( join ( "Argument passed to verify (  )  is not a mock!", "Examples of correct verifications:",^[METHOD] notAMockPassedToVerify [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^115^116^117^118^^114^123^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument passed to verify (  )  is null!", "Examples of correct verifications:", "    verify ( mock ) .someMethod (  ) ;",^[METHOD] nullPassedToVerify [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new NullInsteadOfMockException ( join ( "Argument passed to verify (  )  is false!", "Examples of correct verifications:", "    verify ( mock ) .someMethod (  ) ;",^115^116^117^118^^114^123^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument passed to verify (  )  is null!", "Examples of correct verifications:", "    verify ( mock ) .someMethod (  ) ;",^[METHOD] nullPassedToVerify [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^126^127^128^129^^125^131^[REPLACE] throw new NotAMockException ( join ( "Argument passed to when (  )  is not a mock!", "Example of correct stubbing:", "    doThrow ( new RuntimeException (  )  ) .when ( mock ) .someMethod (  ) ;"^[METHOD] notAMockPassedToWhenMethod [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^126^127^128^^^125^131^[ADD] throw new NotAMockException ( join ( "Argument passed to when (  )  is not a mock!", "Example of correct stubbing:",^[METHOD] notAMockPassedToWhenMethod [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^134^135^136^137^^133^140^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument passed to when (  )  is null!", "Example of correct stubbing:", "    doThrow ( new RuntimeException (  )  ) .when ( mock ) .someMethod (  ) ;",^[METHOD] nullPassedToWhenMethod [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new NullInsteadOfMockException ( join ( "Argument passed to when (  )  is false!", "Example of correct stubbing:", "    doThrow ( new RuntimeException (  )  ) .when ( mock ) .someMethod (  ) ;",^134^135^136^137^^133^140^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument passed to when (  )  is null!", "Example of correct stubbing:", "    doThrow ( new RuntimeException (  )  ) .when ( mock ) .someMethod (  ) ;",^[METHOD] nullPassedToWhenMethod [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^143^144^145^146^^142^149^[REPLACE] throw new MockitoException ( join ( "Method requires argument ( s ) !", "Pass mocks that should be verified, e.g:", "    verifyNoMoreInteractions ( mockOne, mockTwo ) ;",^[METHOD] mocksHaveToBePassedToVerifyNoMoreInteractions [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^152^153^154^155^^151^158^[REPLACE] throw new NotAMockException ( join ( "Argument ( s )  passed is not a mock!", "Examples of correct verifications:", "    verifyNoMoreInteractions ( mockOne, mockTwo ) ;",^[METHOD] notAMockPassedToVerifyNoMoreInteractions [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^161^162^163^164^^160^167^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument ( s )  passed is null!", "Examples of correct verifications:", "    verifyNoMoreInteractions ( mockOne, mockTwo ) ;",^[METHOD] nullPassedToVerifyNoMoreInteractions [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new NullInsteadOfMockException ( join ( "Argument ( s )  passed is false!", "Examples of correct verifications:", "    verifyNoMoreInteractions ( mockOne, mockTwo ) ;",^161^162^163^164^^160^167^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument ( s )  passed is null!", "Examples of correct verifications:", "    verifyNoMoreInteractions ( mockOne, mockTwo ) ;",^[METHOD] nullPassedToVerifyNoMoreInteractions [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^170^171^172^173^^169^176^[REPLACE] throw new NotAMockException ( join ( "Argument ( s )  passed is not a mock!", "Pass mocks that require verification in order.", "For example:",^[METHOD] notAMockPassedWhenCreatingInOrder [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new NullInsteadOfMockException ( join ( "Argument passed to when (  )  is null!", ;^179^180^181^182^^178^185^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument ( s )  passed is null!", "Pass mocks that require verification in order.", "For example:",^[METHOD] nullPassedWhenCreatingInOrder [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new NullInsteadOfMockException ( join ( "Argument ( s )  passed is this!", "Pass mocks that require verification in order.", "For example:",^179^180^181^182^^178^185^[REPLACE] throw new NullInsteadOfMockException ( join ( "Argument ( s )  passed is null!", "Pass mocks that require verification in order.", "For example:",^[METHOD] nullPassedWhenCreatingInOrder [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new MockitoException ( join ( "Method requires argument ( s ) !", ;^188^189^190^191^^187^194^[REPLACE] throw new MockitoException ( join ( "Method requires argument ( s ) !", "Pass mocks that require verification in order.", "For example:",^[METHOD] mocksHaveToBePassedWhenCreatingInOrder [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^188^189^190^^^187^194^[ADD] throw new MockitoException ( join ( "Method requires argument ( s ) !", "Pass mocks that require verification in order.",^[METHOD] mocksHaveToBePassedWhenCreatingInOrder [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new MockitoException ( join ( "InOrder can only verify mocks that were passed in during creation of InOrder.", ;^197^198^199^200^^196^203^[REPLACE] throw new MockitoException ( join ( "InOrder can only verify mocks that were passed in during creation of InOrder.", "For example:", "    InOrder inOrder = inOrder ( mockOne ) ;",^[METHOD] inOrderRequiresFamiliarMock [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^197^198^199^^^196^203^[ADD] throw new MockitoException ( join ( "InOrder can only verify mocks that were passed in during creation of InOrder.", "For example:",^[METHOD] inOrderRequiresFamiliarMock [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^206^207^208^209^^205^219^[REPLACE] throw new InvalidUseOfMatchersException ( join ( "Invalid use of argument matchers!", expectedMatchersCount + " matchers expected, " + recordedMatchersCount + " recorded.", "This exception may occur if matchers are combined with raw values:",^[METHOD] invalidUseOfMatchers [TYPE] void [PARAMETER] int expectedMatchersCount int recordedMatchersCount [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int expectedMatchersCount  recordedMatchersCount 
[REPLACE]^throw new InvalidUseOfMatchersException ( join ( "Invalid use of argument matchers", expectedMatchersCount + " matchers expected, " + recordedMatchersCount + " recorded.", "This exception may occur if matchers are combined with raw values:",^206^207^208^209^^205^219^[REPLACE] throw new InvalidUseOfMatchersException ( join ( "Invalid use of argument matchers!", expectedMatchersCount + " matchers expected, " + recordedMatchersCount + " recorded.", "This exception may occur if matchers are combined with raw values:",^[METHOD] invalidUseOfMatchers [TYPE] void [PARAMETER] int expectedMatchersCount int recordedMatchersCount [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int expectedMatchersCount  recordedMatchersCount 
[REPLACE]^String message = join ( "Argument ( s )  are different! Wanted:", actual, new Location (  ) , "Actual invocation has different arguments:",^222^223^224^225^^221^236^[REPLACE] String message = join ( "Argument ( s )  are different! Wanted:", wanted, new Location (  ) , "Actual invocation has different arguments:",^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[REPLACE]^if  ( invocations.isEmpty (  )  )  {^231^^^^^221^236^[REPLACE] if  ( JUnitTool.hasJUnit (  )  )  {^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[ADD]^^231^232^233^234^235^221^236^[ADD] if  ( JUnitTool.hasJUnit (  )  )  { throw JUnitTool.createArgumentsAreDifferentException  (" ")  ; } else { throw new ArgumentsAreDifferent ( message ) ; }^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[REPLACE]^return ;^234^^^^^221^236^[REPLACE] throw new ArgumentsAreDifferent ( message ) ;^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[REPLACE]^return ;^232^^^^^221^236^[REPLACE] throw JUnitTool.createArgumentsAreDifferentException  (" ")  ;^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[REPLACE]^throw new ArgumentsAreDifferent ( message ) ; ;^232^^^^^221^236^[REPLACE] throw JUnitTool.createArgumentsAreDifferentException  (" ")  ;^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[ADD]^^232^233^234^235^^221^236^[ADD] throw JUnitTool.createArgumentsAreDifferentException  (" ")  ; } else { throw new ArgumentsAreDifferent ( message ) ; }^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[REPLACE]^throw new TooLittleActualInvocations ( message ) ; ;^234^^^^^221^236^[REPLACE] throw new ArgumentsAreDifferent ( message ) ;^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[ADD]^^234^235^^^^221^236^[ADD] throw new ArgumentsAreDifferent ( message ) ; }^[METHOD] argumentsAreDifferent [TYPE] void [PARAMETER] String wanted String actual Location actualLocation [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actual  message  wanted  [TYPE]  Location actualLocation 
[REPLACE]^return ;^239^^^^^238^240^[REPLACE] throw new WantedButNotInvoked ( createWantedButNotInvokedMessage ( wanted )  ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted 
[REPLACE]^String message = createWantedButNotInvokedMessage ( wanted ) ;^239^^^^^238^240^[REPLACE] throw new WantedButNotInvoked ( createWantedButNotInvokedMessage ( wanted )  ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted 
[REPLACE]^for  ( PrintableInvocation i : invocations )  { sb.append ( i.getLocation (  )  ) ;^243^^^^^242^257^[REPLACE] String allInvocations;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[ADD]^^243^^^^^242^257^[ADD] String allInvocations;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^if  ( JUnitTool.hasJUnit (  )  )  {^244^^^^^242^257^[REPLACE] if  ( invocations.isEmpty (  )  )  {^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[ADD]^allInvocations = "Actually, there were zero interactions with this mock.\n";StringBuilder sb = new StringBuilder ( "\nHowever, there were other interactions with this mock:\n" ) ;^244^245^246^247^^242^257^[ADD] if  ( invocations.isEmpty (  )  )  { allInvocations = "Actually, there were zero interactions with this mock.\n"; } else { StringBuilder sb = new StringBuilder ( "\nHowever, there were other interactions with this mock:\n" ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^allInvocations =  null.toString (  ) ;^252^^^^^242^257^[REPLACE] allInvocations = sb.toString (  ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^String allInvocations;^247^^^^^242^257^[REPLACE] StringBuilder sb = new StringBuilder ( "\nHowever, there were other interactions with this mock:\n" ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^for  ( PrintableInvocation i : invocations )  { sb.append ( i.getLocation (  )  ) ;^248^^^^^242^257^[REPLACE] for  ( PrintableInvocation i : invocations )  {^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^allInvocations ;^245^^^^^242^257^[REPLACE] allInvocations = "Actually, there were zero interactions with this mock.\n";^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^allInvocations  =  allInvocations ;^245^^^^^242^257^[REPLACE] allInvocations = "Actually, there were zero interactions with this mock.\n";^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[ADD]^^248^249^250^251^^242^257^[ADD] for  ( PrintableInvocation i : invocations )  { sb.append ( i.getLocation (  )  ) ; sb.append ( "\n" ) ; }^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^String message = createTooLittleInvocationsMessage ( discrepancy, wanted, lastActualLocation ) ;^255^^^^^242^257^[REPLACE] String message = createWantedButNotInvokedMessage ( wanted ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^throw new WantedButNotInvoked ( createWantedButNotInvokedMessage ( wanted )  ) ; ;^256^^^^^242^257^[REPLACE] throw new WantedButNotInvoked ( message + allInvocations ) ;^[METHOD] wantedButNotInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation> invocations [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  PrintableInvocation i  wanted  [TYPE]  List invocations  [TYPE]  String allInvocations  message 
[REPLACE]^return join ( "Wanted but not invoked:", wanted.getLocation (  ) , new Location (  ) ,^260^261^262^263^^259^266^[REPLACE] return join ( "Wanted but not invoked:", wanted.toString (  ) , new Location (  ) ,^[METHOD] createWantedButNotInvokedMessage [TYPE] String [PARAMETER] PrintableInvocation wanted [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted 
[REPLACE]^throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message ;^269^270^271^272^^268^279^[REPLACE] throw new VerificationInOrderFailure ( join ( "Verification in order failure", "Wanted but not invoked:", wanted.toString (  ) ,^[METHOD] wantedButNotInvokedInOrder [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation previous [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation previous  wanted 
[REPLACE]^throw new VerificationInOrderFailure ( join ( "Verification in order failure", "Wanted but not invoked:", wanted.getLocation (  ) ,^269^270^271^272^^268^279^[REPLACE] throw new VerificationInOrderFailure ( join ( "Verification in order failure", "Wanted but not invoked:", wanted.toString (  ) ,^[METHOD] wantedButNotInvokedInOrder [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation previous [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation previous  wanted 
[REPLACE]^wanted.getLocation (  ) , new Location (  ) , "Wanted anywhere AFTER following interaction:", previous.toString (  ) ,^272^273^274^275^^268^279^[REPLACE] wanted.toString (  ) , new Location (  ) , "Wanted anywhere AFTER following interaction:", previous.toString (  ) ,^[METHOD] wantedButNotInvokedInOrder [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation previous [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation previous  wanted 
[REPLACE]^previous.getLocation (  ) , previous.getLocation (  ) , "" )  ) ;^275^276^277^278^^268^279^[REPLACE] previous.toString (  ) , previous.getLocation (  ) , "" )  ) ;^[METHOD] wantedButNotInvokedInOrder [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation previous [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation previous  wanted 
[REPLACE]^previous.toString (  ) , "" )  ) ;^276^277^278^^^268^279^[REPLACE] previous.getLocation (  ) , "" )  ) ;^[METHOD] wantedButNotInvokedInOrder [TYPE] void [PARAMETER] PrintableInvocation wanted PrintableInvocation previous [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation previous  wanted 
[REPLACE]^String message = createTooLittleInvocationsMessage ( discrepancy, wanted, lastActualLocation ) ;^282^^^^^281^284^[REPLACE] String message = createTooManyInvocationsMessage ( wantedCount, actualCount, wanted, firstUndesired ) ;^[METHOD] tooManyActualInvocations [TYPE] void [PARAMETER] int wantedCount int actualCount PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired 
[REPLACE]^return ;^283^^^^^281^284^[REPLACE] throw new TooManyActualInvocations ( message ) ;^[METHOD] tooManyActualInvocations [TYPE] void [PARAMETER] int wantedCount int actualCount PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired 
[REPLACE]^return join ( wanted.toString (  ) , "Wanted "  ;^288^289^290^291^^286^296^[REPLACE] return join ( wanted.toString (  ) , "Wanted " + Pluralizer.pluralize ( wantedCount )  + ":", new Location (  ) ,^[METHOD] createTooManyInvocationsMessage [TYPE] String [PARAMETER] int wantedCount int actualCount PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired 
[REPLACE]^return ;^299^300^301^302^^298^307^[REPLACE] throw new NeverWantedButInvoked ( join ( wanted.toString (  ) , "Never wanted here:", new Location (  ) ,^[METHOD] neverWantedButInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  Location firstUndesired 
[REPLACE]^throw new NeverWantedButInvoked ( join ( wanted.getLocation (  ) , "Never wanted here:", new Location (  ) ,^299^300^301^302^^298^307^[REPLACE] throw new NeverWantedButInvoked ( join ( wanted.toString (  ) , "Never wanted here:", new Location (  ) ,^[METHOD] neverWantedButInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  Location firstUndesired 
[REPLACE]^wanted.getLocation (  ) , "Never wanted here:", new Location (  ) , "But invoked here:",^300^301^302^303^^298^307^[REPLACE] wanted.toString (  ) , "Never wanted here:", new Location (  ) , "But invoked here:",^[METHOD] neverWantedButInvoked [TYPE] void [PARAMETER] PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  Location firstUndesired 
[REPLACE]^String message = createTooManyInvocationsMessage ( wantedCount, wantedCount, wanted, firstUndesired ) ;^310^^^^^309^314^[REPLACE] String message = createTooManyInvocationsMessage ( wantedCount, actualCount, wanted, firstUndesired ) ;^[METHOD] tooManyActualInvocationsInOrder [TYPE] void [PARAMETER] int wantedCount int actualCount PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired 
[REPLACE]^throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message ;^311^312^313^^^309^314^[REPLACE] throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message )  ) ;^[METHOD] tooManyActualInvocationsInOrder [TYPE] void [PARAMETER] int wantedCount int actualCount PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired 
[REPLACE]^throw new VerificationInOrderFailure ( join ( "Verification in order failure:"  ==  message )  ) ;^311^312^313^^^309^314^[REPLACE] throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message )  ) ;^[METHOD] tooManyActualInvocationsInOrder [TYPE] void [PARAMETER] int wantedCount int actualCount PrintableInvocation wanted Location firstUndesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired 
[REPLACE]^String ending  =  lastActualInvocation + "\n" ;^318^319^^^^316^329^[REPLACE] String ending = ( lastActualInvocation != null ) ? lastActualInvocation + "\n" : "\n";^[METHOD] createTooLittleInvocationsMessage [TYPE] String [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualInvocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String ending  message  [TYPE]  Location lastActualInvocation 
[ADD]^^318^319^^^^316^329^[ADD] String ending = ( lastActualInvocation != null ) ? lastActualInvocation + "\n" : "\n";^[METHOD] createTooLittleInvocationsMessage [TYPE] String [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualInvocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String ending  message  [TYPE]  Location lastActualInvocation 
[REPLACE]^String message = join ( wanted.toString (  ) , "Wanted "  <=  discrepancy.getPluralizedWantedCount (  )   <=  ":", new Location (  ) ,^321^322^323^324^^316^329^[REPLACE] String message = join ( wanted.toString (  ) , "Wanted " + discrepancy.getPluralizedWantedCount (  )  + ":", new Location (  ) ,^[METHOD] createTooLittleInvocationsMessage [TYPE] String [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualInvocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String ending  message  [TYPE]  Location lastActualInvocation 
[REPLACE]^return ending;^328^^^^^316^329^[REPLACE] return message;^[METHOD] createTooLittleInvocationsMessage [TYPE] String [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualInvocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String ending  message  [TYPE]  Location lastActualInvocation 
[REPLACE]^String ending = ( lastActualInvocation != null ) ? lastActualInvocation + "\n" : "\n";^332^^^^^331^335^[REPLACE] String message = createTooLittleInvocationsMessage ( discrepancy, wanted, lastActualLocation ) ;^[METHOD] tooLittleActualInvocations [TYPE] void [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualLocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  Location lastActualLocation 
[REPLACE]^throw new TooManyActualInvocations ( message ) ; ;^334^^^^^331^335^[REPLACE] throw new TooLittleActualInvocations ( message ) ;^[METHOD] tooLittleActualInvocations [TYPE] void [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualLocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  Location lastActualLocation 
[REPLACE]^String ending = ( lastActualInvocation != null ) ? lastActualInvocation + "\n" : "\n";^338^^^^^337^343^[REPLACE] String message = createTooLittleInvocationsMessage ( discrepancy, wanted, lastActualLocation ) ;^[METHOD] tooLittleActualInvocationsInOrder [TYPE] void [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualLocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  Location lastActualLocation 
[REPLACE]^throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message ;^340^341^342^^^337^343^[REPLACE] throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message )  ) ;^[METHOD] tooLittleActualInvocationsInOrder [TYPE] void [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualLocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  Location lastActualLocation 
[REPLACE]^throw new VerificationInOrderFailure ( join ( "Verification in order failure:"  |  message )  ) ;^340^341^342^^^337^343^[REPLACE] throw new VerificationInOrderFailure ( join ( "Verification in order failure:" + message )  ) ;^[METHOD] tooLittleActualInvocationsInOrder [TYPE] void [PARAMETER] Discrepancy discrepancy PrintableInvocation wanted Location lastActualLocation [CLASS] Reporter   [TYPE]  Discrepancy discrepancy  [TYPE]  boolean false  true  [TYPE]  PrintableInvocation wanted  [TYPE]  String message  [TYPE]  Location lastActualLocation 
[REPLACE]^throw new NoInteractionsWanted ( join ( "No interactions wanted here:", ;^346^347^348^349^^345^353^[REPLACE] throw new NoInteractionsWanted ( join ( "No interactions wanted here:", new Location (  ) , "But found this interaction:",^[METHOD] noMoreInteractionsWanted [TYPE] void [PARAMETER] PrintableInvocation undesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation undesired 
[REPLACE]^undesired.toString (  ) , "" )  ) ;^350^351^352^^^345^353^[REPLACE] undesired.getLocation (  ) , "" )  ) ;^[METHOD] noMoreInteractionsWanted [TYPE] void [PARAMETER] PrintableInvocation undesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation undesired 
[ADD]^^350^351^352^^^345^353^[ADD] undesired.getLocation (  ) , "" )  ) ;^[METHOD] noMoreInteractionsWanted [TYPE] void [PARAMETER] PrintableInvocation undesired [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  PrintableInvocation undesired 
[REPLACE]^throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , ;^356^357^358^359^^355^363^[REPLACE] throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , "Mockito cannot mock/spy following:", "  - final classes",^[METHOD] cannotMockFinalClass [TYPE] void [PARAMETER] Class<?> clazz [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class clazz 
[REPLACE]^throw new MockitoException ( join (this + clazz.toString (  ) , "Mockito cannot mock/spy following:", "  - final classes",^356^357^358^359^^355^363^[REPLACE] throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , "Mockito cannot mock/spy following:", "  - final classes",^[METHOD] cannotMockFinalClass [TYPE] void [PARAMETER] Class<?> clazz [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class clazz 
[ADD]^^356^357^358^^^355^363^[ADD] throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , "Mockito cannot mock/spy following:",^[METHOD] cannotMockFinalClass [TYPE] void [PARAMETER] Class<?> clazz [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class clazz 
[REPLACE]^"Cannot mock/spy " + this.toString (  ) , "Mockito cannot mock/spy following:", "  - final classes", "  - anonymous classes",^357^358^359^360^^355^363^[REPLACE] "Cannot mock/spy " + clazz.toString (  ) , "Mockito cannot mock/spy following:", "  - final classes", "  - anonymous classes",^[METHOD] cannotMockFinalClass [TYPE] void [PARAMETER] Class<?> clazz [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class clazz 
[REPLACE]^return ;^366^367^368^369^^365^371^[REPLACE] throw new MockitoException ( join ( "Cannot stub a void method with a return value!", "Voids are usually stubbed with Throwables:", "    doThrow ( exception ) .when ( mock ) .someVoidMethod (  ) ;"^[METHOD] cannotStubVoidMethodWithAReturnValue [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^374^375^376^377^^373^383^[REPLACE] throw new MockitoException ( join ( "Only void methods can doNothing (  ) !", "Example of correct use of doNothing (  ) :", "    doNothing (  ) .",^[METHOD] onlyVoidMethodsCanBeSetToDoNothing [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^374^375^376^^^373^383^[ADD] throw new MockitoException ( join ( "Only void methods can doNothing (  ) !", "Example of correct use of doNothing (  ) :",^[METHOD] onlyVoidMethodsCanBeSetToDoNothing [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new WrongTypeOfReturnValue ( join ( actualType + " cannot be returned by " + methodName + " (  ) ", ;^386^387^388^389^^385^390^[REPLACE] throw new WrongTypeOfReturnValue ( join ( actualType + " cannot be returned by " + methodName + " (  ) ", methodName + " (  )  should return " + expectedType )  ) ;^[METHOD] wrongTypeOfReturnValue [TYPE] void [PARAMETER] String expectedType String actualType String methodName [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actualType  expectedType  methodName 
[REPLACE]^throw new WrongTypeOfReturnValue ( join ( actualType + " cannot be returned by " + expectedType + " (  ) ", methodName + " (  )  should return " + expectedType )  ) ;^386^387^388^389^^385^390^[REPLACE] throw new WrongTypeOfReturnValue ( join ( actualType + " cannot be returned by " + methodName + " (  ) ", methodName + " (  )  should return " + expectedType )  ) ;^[METHOD] wrongTypeOfReturnValue [TYPE] void [PARAMETER] String expectedType String actualType String methodName [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actualType  expectedType  methodName 
[ADD]^^386^387^388^^^385^390^[ADD] throw new WrongTypeOfReturnValue ( join ( actualType + " cannot be returned by " + methodName + " (  ) ", methodName + " (  )  should return " + expectedType^[METHOD] wrongTypeOfReturnValue [TYPE] void [PARAMETER] String expectedType String actualType String methodName [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  String actualType  expectedType  methodName 
[REPLACE]^return ;^393^^^^^392^394^[REPLACE] throw new MockitoAssertionError ( join ( "Wanted at most " + pluralize ( maxNumberOfInvocations )  + " but was " + foundSize )  ) ;^[METHOD] wantedAtMostX [TYPE] void [PARAMETER] int maxNumberOfInvocations int foundSize [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int foundSize  maxNumberOfInvocations 
[REPLACE]^throw new MockitoAssertionError ( join ( "Wanted at most "  >=  pluralize ( maxNumberOfInvocations )   >=  " but was "  >=  foundSize )  ) ;^393^^^^^392^394^[REPLACE] throw new MockitoAssertionError ( join ( "Wanted at most " + pluralize ( maxNumberOfInvocations )  + " but was " + foundSize )  ) ;^[METHOD] wantedAtMostX [TYPE] void [PARAMETER] int maxNumberOfInvocations int foundSize [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int foundSize  maxNumberOfInvocations 
[ADD]^^393^^^^^392^394^[ADD] throw new MockitoAssertionError ( join ( "Wanted at most " + pluralize ( maxNumberOfInvocations )  + " but was " + foundSize )  ) ;^[METHOD] wantedAtMostX [TYPE] void [PARAMETER] int maxNumberOfInvocations int foundSize [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int foundSize  maxNumberOfInvocations 
[REPLACE]^throw new MockitoAssertionError ( join ( "Wanted at most " + pluralize ( foundSize )  + " but was " + foundSize )  ) ;^393^^^^^392^394^[REPLACE] throw new MockitoAssertionError ( join ( "Wanted at most " + pluralize ( maxNumberOfInvocations )  + " but was " + foundSize )  ) ;^[METHOD] wantedAtMostX [TYPE] void [PARAMETER] int maxNumberOfInvocations int foundSize [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int foundSize  maxNumberOfInvocations 
[REMOVE]^throw new MockitoException ( join ( "InOrder can only verify mocks that were passed in during creation of InOrder.",^393^^^^^392^394^[REMOVE] ^[METHOD] wantedAtMostX [TYPE] void [PARAMETER] int maxNumberOfInvocations int foundSize [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  int foundSize  maxNumberOfInvocations 
[REPLACE]^return ;^397^398^399^400^^396^411^[REPLACE] throw new InvalidUseOfMatchersException ( join ( "Misplaced argument matcher detected here:", location, "",^[METHOD] misplacedArgumentMatcher [TYPE] void [PARAMETER] Location location [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Location location 
[ADD]^^397^398^399^^^396^411^[ADD] throw new InvalidUseOfMatchersException ( join ( "Misplaced argument matcher detected here:", location,^[METHOD] misplacedArgumentMatcher [TYPE] void [PARAMETER] Location location [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Location location 
[REPLACE]^return ;^414^415^416^417^^413^421^[REPLACE] throw new SmartNullPointerException ( join ( "You have a NullPointerException here:", new Location (  ) , "Because this method was *not* stubbed correctly:",^[METHOD] smartNullPointerException [TYPE] void [PARAMETER] Location location [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Location location 
[REPLACE]^return ;^424^425^426^427^^423^436^[REPLACE] throw new MockitoException ( join ( "No argument value was captured!", "You might have forgotten to use argument.capture (  )  in verify (  ) ...", "...or you used capture (  )  in stubbing but stubbed method was not called.",^[METHOD] noArgumentValueWasCaptured [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^424^425^426^^^423^436^[ADD] throw new MockitoException ( join ( "No argument value was captured!", "You might have forgotten to use argument.capture (  )  in verify (  ) ...",^[METHOD] noArgumentValueWasCaptured [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , ;^439^440^441^^^438^442^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  does not accept null parameters." )  ) ;^[METHOD] extraInterfacesDoesNotAcceptNullParameters [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[ADD]^^439^440^441^^^438^442^[ADD] throw new MockitoException ( join ( "extraInterfaces (  )  does not accept null parameters." )  ) ;^[METHOD] extraInterfacesDoesNotAcceptNullParameters [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^throw new MockitoException ( join ( "extraInterfaces (  )  does not accept false parameters." )  ) ;^439^440^441^^^438^442^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  does not accept null parameters." )  ) ;^[METHOD] extraInterfacesDoesNotAcceptNullParameters [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
[REPLACE]^return ;^445^446^447^448^^444^449^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  accepts only interfaces.", "You passed following type: " + wrongType.getSimpleName (  )  + " which is not an interface." )  ) ;^[METHOD] extraInterfacesAcceptsOnlyInterfaces [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[REPLACE]^throw new MockitoException ( join ( "extraInterfaces (  )  accepts only interfaces.", "You passed following type: "  ==  null.getSimpleName (  )   ==  " which is not an interface." )  ) ;^445^446^447^448^^444^449^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  accepts only interfaces.", "You passed following type: " + wrongType.getSimpleName (  )  + " which is not an interface." )  ) ;^[METHOD] extraInterfacesAcceptsOnlyInterfaces [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[REPLACE]^"You passed following type: " + null.getSimpleName (  )  + " which is not an interface." )  ) ;^447^448^^^^444^449^[REPLACE] "You passed following type: " + wrongType.getSimpleName (  )  + " which is not an interface." )  ) ;^[METHOD] extraInterfacesAcceptsOnlyInterfaces [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[REPLACE]^return ;^452^453^454^455^^451^457^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  does not accept the same type as the mocked type.", "You mocked following type: " + wrongType.getSimpleName (  ) , "and you passed the same very interface to the extraInterfaces (  ) "^[METHOD] extraInterfacesCannotContainMockedType [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[REPLACE]^throw new MockitoException ( join ( "extraInterfaces (  )  does not accept the same type as the mocked type.", "You mocked following type: " +null (  ) , "and you passed the same very interface to the extraInterfaces (  ) "^452^453^454^455^^451^457^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  does not accept the same type as the mocked type.", "You mocked following type: " + wrongType.getSimpleName (  ) , "and you passed the same very interface to the extraInterfaces (  ) "^[METHOD] extraInterfacesCannotContainMockedType [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[REPLACE]^"You mocked following type: " + wrongType .toString (  )  , "and you passed the same very interface to the extraInterfaces (  ) " )  ) ;^454^455^456^^^451^457^[REPLACE] "You mocked following type: " + wrongType.getSimpleName (  ) , "and you passed the same very interface to the extraInterfaces (  ) " )  ) ;^[METHOD] extraInterfacesCannotContainMockedType [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[ADD]^^454^455^456^^^451^457^[ADD] "You mocked following type: " + wrongType.getSimpleName (  ) , "and you passed the same very interface to the extraInterfaces (  ) " )  ) ;^[METHOD] extraInterfacesCannotContainMockedType [TYPE] void [PARAMETER] Class<?> wrongType [CLASS] Reporter   [TYPE]  boolean false  true  [TYPE]  Class wrongType 
[REPLACE]^throw new MockitoException ( join ( "Cannot mock/spy " + clazz.toString (  ) , ;^460^461^462^^^459^463^[REPLACE] throw new MockitoException ( join ( "extraInterfaces (  )  requires at least one interface." )  ) ;^[METHOD] extraInterfacesRequiresAtLeastOneInterface [TYPE] void [PARAMETER] [CLASS] Reporter   [TYPE]  boolean false  true 
