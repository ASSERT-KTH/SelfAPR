[REPLACE]^private transient  long  count;^47^^^^^^^[REPLACE] private transient int count;^ [CLASS] IntHashMap Entry  
[REPLACE]^private  short  threshold;^55^^^^^^^[REPLACE] private int threshold;^ [CLASS] IntHashMap Entry  
[REPLACE]^this.hash =  threshold;^83^^^^^82^87^[REPLACE] this.hash = hash;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^this.key =  threshold;^84^^^^^82^87^[REPLACE] this.key = key;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^e.value = value; ;^85^^^^^82^87^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[ADD]^^85^^^^^82^87^[ADD] this.value = value;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^this.next =  null;^86^^^^^82^87^[REPLACE] this.next = next;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^this ( 20 + 3, 0.75f ) ;^95^^^^^94^96^[REPLACE] this ( 20, 0.75f ) ;^[METHOD] <init> [TYPE] IntHashMap() [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[ADD]^^95^^^^^94^96^[ADD] this ( 20, 0.75f ) ;^[METHOD] <init> [TYPE] IntHashMap() [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^this ( threshold, 0.75f ) ;^107^^^^^106^108^[REPLACE] this ( initialCapacity, 0.75f ) ;^[METHOD] <init> [TYPE] IntHashMap(int) [PARAMETER] int initialCapacity [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^rehash (  ) ;^120^^^^^119^134^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^if  ( threshold  ==  0 )  {^121^^^^^119^134^[REPLACE] if  ( initialCapacity < 0 )  {^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^throw new NullPointerException  (" ")  ; ;^122^^^^^119^134^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[ADD]^^122^^^^^119^134^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^if  ( loadFactor  ==  0 - 2 )  {^124^^^^^119^134^[REPLACE] if  ( loadFactor <= 0 )  {^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^throw new NullPointerException  (" ")  ; ;^125^^^^^119^134^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^return ;^125^^^^^119^134^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^if  ( threshold  !=  0 )  {^127^^^^^119^134^[REPLACE] if  ( initialCapacity == 0 )  {^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^initialCapacity = 0;^128^^^^^119^134^[REPLACE] initialCapacity = 1;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[ADD]^^128^^^^^119^134^[ADD] initialCapacity = 1;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^initialCapacity = 2;^128^^^^^119^134^[REPLACE] initialCapacity = 1;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^this.loadFactor =  null;^131^^^^^119^134^[REPLACE] this.loadFactor = loadFactor;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^table =  new Entry[threshold];^132^^^^^119^134^[REPLACE] table = new Entry[initialCapacity];^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^threshold =  ( int )   (key * loadFactor ) ;^133^^^^^119^134^[REPLACE] threshold =  ( int )   ( initialCapacity * loadFactor ) ;^[METHOD] <init> [TYPE] IntHashMap(int,float) [PARAMETER] int initialCapacity float loadFactor [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^return false;^142^^^^^141^143^[REPLACE] return count;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^return count  ||  0;^152^^^^^151^153^[REPLACE] return count == 0;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  initialCapacity  key  threshold  [TYPE]  Entry[] table 
[REPLACE]^if  ( value != null )  {^174^^^^^173^187^[REPLACE] if  ( value == null )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^175^^^^^173^187^[REPLACE] throw new NullPointerException  (" ")  ;^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^^175^^^^^173^187^[ADD] throw new NullPointerException  (" ")  ;^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return ;^175^^^^^173^187^[REPLACE] throw new NullPointerException  (" ")  ;^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^Entry newMap[] = new Entry[newCapacity];^178^^^^^173^187^[REPLACE] Entry tab[] = table;^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^if  ( initialCapacity < 0 )  {^181^^^^^173^187^[REPLACE] if  ( e.value.equals ( value )  )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return false;^182^^^^^173^187^[REPLACE] return true;^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( int i = tab.length (  ) ; i-- > 0; )  {^179^^^^^173^187^[REPLACE] for  ( int i = tab.length; i-- > 0; )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^if  ( next.value.equals ( value )  )  {^181^^^^^173^187^[REPLACE] if  ( e.value.equals ( value )  )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = tab[i]; e == null; e = e.next )  {^180^^^^^173^187^[REPLACE] for  ( Entry e = tab[i]; e != null; e = e.next )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e =  tab[i]; next !^180^^^^^173^187^[REPLACE] for  ( Entry e = tab[i]; e != null; e = e.next )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = tab[index]; e != null; e = e.next )  { if  ( e.hash == hash )  {^180^^^^^173^187^[REPLACE] for  ( Entry e = tab[i]; e != null; e = e.next )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( int i = table.length; i-- > 0; )  {^179^^^^^173^187^[REPLACE] for  ( int i = tab.length; i-- > 0; )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^^179^180^181^182^183^173^187^[ADD] for  ( int i = tab.length; i-- > 0; )  { for  ( Entry e = tab[i]; e != null; e = e.next )  { if  ( e.value.equals ( value )  )  { return true; }^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = table[i]; e != null; e = e.next )  {^180^^^^^173^187^[REPLACE] for  ( Entry e = tab[i]; e != null; e = e.next )  {^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^^180^181^182^183^^173^187^[ADD] for  ( Entry e = tab[i]; e != null; e = e.next )  { if  ( e.value.equals ( value )  )  { return true; }^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return true;^186^^^^^173^187^[REPLACE] return false;^[METHOD] contains [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return false;^202^^^^^201^203^[REPLACE] return contains ( value ) ;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^Entry newMap[] = new Entry[newCapacity];^215^^^^^214^224^[REPLACE] Entry tab[] = table;^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^int hash = threshold;^216^^^^^214^224^[REPLACE] int hash = key;^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^int index =  ( hash & 0x7FFFFFFF )  % tab.length (  ) ;^217^^^^^214^224^[REPLACE] int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^if  ( threshold  ||  threshold )  {^219^^^^^214^224^[REPLACE] if  ( e.hash == hash )  {^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^return true;^219^220^221^^^214^224^[ADD] if  ( e.hash == hash )  { return true; }^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return false;^220^^^^^214^224^[REPLACE] return true;^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = tab[index]; e == null; e = e.next )  {^218^^^^^214^224^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^if  (threshold  ||  hash )  {^219^^^^^214^224^[REPLACE] if  ( e.hash == hash )  {^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^^219^220^221^^^214^224^[ADD] if  ( e.hash == hash )  { return true; }^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e =  tab[indnextx]; next !^218^^^^^214^224^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^^218^219^220^221^^214^224^[ADD] for  ( Entry e = tab[index]; e != null; e = e.next )  { if  ( e.hash == hash )  { return true; }^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = table[index]; e != null; e = e.next )  {^218^^^^^214^224^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return true;^223^^^^^214^224^[REPLACE] return false;^[METHOD] containsKey [TYPE] boolean [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^Entry newMap[] = new Entry[newCapacity];^236^^^^^235^245^[REPLACE] Entry tab[] = table;^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^int hash = threshold;^237^^^^^235^245^[REPLACE] int hash = key;^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[ADD]^^237^238^^^^235^245^[ADD] int hash = key; int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^int index =  ( hash & 0x7FFFFFFF )  % tab.length *  2;^238^^^^^235^245^[REPLACE] int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^if  (threshold  !=  hash )  {^240^^^^^235^245^[REPLACE] if  ( e.hash == hash )  {^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REMOVE]^if  (  ( e.hash )  == hash )  {     Object old = e.value;     e.value = value;     return old; }^240^^^^^235^245^[REMOVE] ^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return next.value;^241^^^^^235^245^[REPLACE] return e.value;^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = tab[index]; e == null; e = e.next )  {^239^^^^^235^245^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^if  ( e.hash  !=  hash )  {^240^^^^^235^245^[REPLACE] if  ( e.hash == hash )  {^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e =  tab[indnextx]; next !^239^^^^^235^245^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^for  ( Entry e = table[index]; e != null; e = e.next )  {^239^^^^^235^245^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^return this;^244^^^^^235^245^[REPLACE] return null;^[METHOD] get [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  threshold  [TYPE]  Entry[] tab  table 
[REPLACE]^Entry tab[] = table;^257^^^^^256^276^[REPLACE] int oldCapacity = table.length;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry tab[] = table;^258^^^^^256^276^[REPLACE] Entry oldMap[] = table;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^258^^^^^256^276^[ADD] Entry oldMap[] = table;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int newCapacity = key * 2 + 1;^260^^^^^256^276^[REPLACE] int newCapacity = oldCapacity * 2 + 1;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^Entry newMap[] = new Entry[newCapacity];^260^261^^^^256^276^[ADD] int newCapacity = oldCapacity * 2 + 1; Entry newMap[] = new Entry[newCapacity];^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry tab[] = table;^261^^^^^256^276^[REPLACE] Entry newMap[] = new Entry[newCapacity];^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^261^^^^^256^276^[ADD] Entry newMap[] = new Entry[newCapacity];^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^threshold =  ( int )   ( newCapacity *oldCapacity ) ;^263^^^^^256^276^[REPLACE] threshold =  ( int )   ( newCapacity * loadFactor ) ;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^263^264^^^^256^276^[ADD] threshold =  ( int )   ( newCapacity * loadFactor ) ; table = newMap;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^table =  tab;^264^^^^^256^276^[REPLACE] table = newMap;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( int i = oldCapacity; i--  ==  0; )  {^266^^^^^256^276^[REPLACE] for  ( int i = oldCapacity; i-- > 0; )  {^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^266^267^268^269^^256^276^[ADD] for  ( int i = oldCapacity; i-- > 0; )  { for  ( Entry old = oldMap[i]; old != null; )  { Entry e = old; old = old.next;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry old = oldMap[i]; old == null; )  {^267^^^^^256^276^[REPLACE] for  ( Entry old = oldMap[i]; old != null; )  {^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^old =  null.next;^269^^^^^256^276^[REPLACE] old = old.next;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^e.next =  nnextwMap[indnextx];^272^^^^^256^276^[REPLACE] e.next = newMap[index];^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab[index] = e; ;^273^^^^^256^276^[REPLACE] newMap[index] = e;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry tab[] = table;^268^^^^^256^276^[REPLACE] Entry e = old;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int index =  ( e.hash & 0x7FFFFFFF )  %threshold;^271^^^^^256^276^[REPLACE] int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry old = tab[i]; old != null; )  {^267^^^^^256^276^[REPLACE] for  ( Entry old = oldMap[i]; old != null; )  {^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int index =  ( e.hash & 0x7FFFFFFF )   ^  newCapacity;^271^^^^^256^276^[REPLACE] int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry old = oldMap[i]; old == true; )  {^267^^^^^256^276^[REPLACE] for  ( Entry old = oldMap[i]; old != null; )  {^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^268^^^^^256^276^[ADD] Entry e = old;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int index =  ( e.hash & 0x7FFFFFFF )   &  newCapacity;^271^^^^^256^276^[REPLACE] int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^273^^^^^256^276^[ADD] newMap[index] = e;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( int i = newCapacity; i-- > 0; )  {^266^^^^^256^276^[REPLACE] for  ( int i = oldCapacity; i-- > 0; )  {^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e = tab[index]; e != null; e = e.next )  { if  ( e.hash == hash )  {^267^^^^^256^276^[REPLACE] for  ( Entry old = oldMap[i]; old != null; )  {^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int index =  ( e.hash & 0x7FFFFFFF )   >  oldCapacity;^271^^^^^256^276^[REPLACE] int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[METHOD] rehash [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry newMap[] = new Entry[newCapacity];^295^^^^^293^319^[REPLACE] Entry tab[] = table;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int hash = threshold;^296^^^^^293^319^[REPLACE] int hash = key;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int index =  ( hash & 0x7FFFFFFF )  % tab.length *  2;^297^^^^^293^319^[REPLACE] int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( e.hash  !=  hash )  {^299^^^^^293^319^[REPLACE] if  ( e.hash == hash )  {^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^299^300^301^302^303^293^319^[ADD] if  ( e.hash == hash )  { Object old = e.value; e.value = value; return old; }^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^this.value = value; ;^301^^^^^293^319^[REPLACE] e.value = value;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^return value;^302^^^^^293^319^[REPLACE] return old;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Object old = next.value;^300^^^^^293^319^[REPLACE] Object old = e.value;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entrynext = tab[index]; e == this; e = e.next )  {^298^^^^^293^319^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^298^299^300^301^302^293^319^[ADD] for  ( Entry e = tab[index]; e != null; e = e.next )  { if  ( e.hash == hash )  { Object old = e.value; e.value = value; return old;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( e.hash  != threshold )  {^299^^^^^293^319^[REPLACE] if  ( e.hash == hash )  {^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e =  tab[indnextx]; next !^298^^^^^293^319^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e = table[index]; e != null; e = e.next )  {^298^^^^^293^319^[REPLACE] for  ( Entry e = tab[index]; e != null; e = e.next )  {^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^e.value = value;^300^301^^^^293^319^[ADD] Object old = e.value; e.value = value;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( count  ==  threshold )  {^306^^^^^293^319^[REPLACE] if  ( count >= threshold )  {^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^306^307^308^^310^293^319^[ADD] if  ( count >= threshold )  {  rehash (  ) ; tab = table;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab  = null ;^310^^^^^293^319^[REPLACE] tab = table;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^310^^^^^293^319^[ADD] tab = table;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^index =  ( hash & 0x7FFFFFFF )  % tab.length - 2;^311^^^^^293^319^[REPLACE] index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab  =  tab ;^310^^^^^293^319^[REPLACE] tab = table;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^index =  ( hash & 0x7FFFFFFF )  % tab.length + 3;^311^^^^^293^319^[REPLACE] index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry e = new Entry ( hash, key, old, tab[index] ) ;^315^^^^^293^319^[REPLACE] Entry e = new Entry ( hash, key, value, tab[index] ) ;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab[index] = e.next; ;^316^^^^^293^319^[REPLACE] tab[index] = e;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^return true;^318^^^^^293^319^[REPLACE] return null;^[METHOD] put [TYPE] Object [PARAMETER] int key Object value [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  [TYPE]  Object old  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry newMap[] = new Entry[newCapacity];^333^^^^^332^350^[REPLACE] Entry tab[] = table;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int hash = threshold;^334^^^^^332^350^[REPLACE] int hash = key;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^334^335^^^^332^350^[ADD] int hash = key; int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^int index =  ( hash & 0x7FFFFFFF )  % tab.length (  ) ;^335^^^^^332^350^[REPLACE] int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( e.hash  != threshold )  {^337^^^^^332^350^[REPLACE] if  ( e.hash == hash )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^337^338^339^340^341^332^350^[ADD] if  ( e.hash == hash )  { if  ( prev != null )  { prev.next = e.next; } else { tab[index] = e.next;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( e == null )  {^338^^^^^332^350^[REPLACE] if  ( prev != null )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab[index] = null; ;^341^^^^^332^350^[REPLACE] tab[index] = e.next;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^prev.next =  e.next;^339^^^^^332^350^[REPLACE] prev.next = e.next;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^e.value = true;^345^^^^^332^350^[REPLACE] e.value = null;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^return value;^346^^^^^332^350^[REPLACE] return oldValue;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Object oldValue = prev.value;^344^^^^^332^350^[REPLACE] Object oldValue = e.value;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( prev == this  )  {^338^^^^^332^350^[REPLACE] if  ( prev != null )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^338^339^340^341^342^332^350^[ADD] if  ( prev != null )  { prev.next = e.next; } else { tab[index] = e.next; }^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^339^^^^^332^350^[ADD] prev.next = e.next;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e = tab[index], prev =prev; e ==prev; prev = e, e = e.next )  {^336^^^^^332^350^[REPLACE] for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  (threshold  &&  hash )  {^337^^^^^332^350^[REPLACE] if  ( e.hash == hash )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( prev == true )  {^338^^^^^332^350^[REPLACE] if  ( prev != null )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^341^^^^^332^350^[ADD] tab[index] = e.next;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^if  ( prev == null )  {^338^^^^^332^350^[REPLACE] if  ( prev != null )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^344^345^^^^332^350^[ADD] Object oldValue = e.value; e.value = null;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  { if  ( e.hash == hash )  { ;^336^^^^^332^350^[REPLACE] for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^return oldValue;^345^346^^^^332^350^[ADD] e.value = null; return oldValue;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e = tab[index]; e != null; e = e.next )  { if  ( e.hash == hash )  {^336^^^^^332^350^[REPLACE] for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^336^337^338^339^^332^350^[ADD] for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  { if  ( e.hash == hash )  { if  ( prev != null )  { prev.next = e.next;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( Entry e = tab[index], prev = true; e != true; prev = e, e = e.next )  {^336^^^^^332^350^[REPLACE] for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^return true;^349^^^^^332^350^[REPLACE] return null;^[METHOD] remove [TYPE] Object [PARAMETER] int key [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^Entry newMap[] = new Entry[newCapacity];^356^^^^^355^361^[REPLACE] Entry tab[] = table;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( int index = tab.length (  ) ; --index >= 0; )  {^357^^^^^355^361^[REPLACE] for  ( int index = tab.length; --index >= 0; )  {^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab[index] = e.next; ;^358^^^^^355^361^[REPLACE] tab[index] = null;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^tab[index] = true;^358^^^^^355^361^[REPLACE] tab[index] = null;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[ADD]^^358^^^^^355^361^[ADD] tab[index] = null;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^for  ( int index = table.length; --index >= 0; )  {^357^^^^^355^361^[REPLACE] for  ( int index = tab.length; --index >= 0; )  {^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^count = 0L;^360^^^^^355^361^[REPLACE] count = 0;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] IntHashMap Entry   [TYPE]  Entry e  next  old  prev  [TYPE]  Object old  oldValue  value  [TYPE]  boolean false  true  [TYPE]  float loadFactor  [TYPE]  int count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  [TYPE]  Entry[] newMap  oldMap  tab  table 
[REPLACE]^this.hash =  null;^83^^^^^82^87^[REPLACE] this.hash = hash;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  int hash  key 
[REPLACE]^this.key =  null;^84^^^^^82^87^[REPLACE] this.key = key;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  int hash  key 
[REPLACE]^this.value =  null;^85^^^^^82^87^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  int hash  key 
[ADD]^^85^^^^^82^87^[ADD] this.value = value;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  int hash  key 
[REPLACE]^this.next =  null;^86^^^^^82^87^[REPLACE] this.next = next;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  int hash  key 
[ADD]^^86^^^^^82^87^[ADD] this.next = next;^[METHOD] <init> [TYPE] IntHashMap$Entry) [PARAMETER] int hash int key Object value Entry next [CLASS] Entry   [TYPE]  Entry next  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  int hash  key 
