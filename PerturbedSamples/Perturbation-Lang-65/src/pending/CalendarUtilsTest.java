[REPLACE]^DateFormat parser ;^34^^^^^^^[REPLACE] DateFormat parser = null;^ [CLASS] CalendarUtilsTest  
[REPLACE]^Date date1 = this;^35^^^^^^^[REPLACE] Date date1 = null;^ [CLASS] CalendarUtilsTest  
[REPLACE]^Date date2 ;^36^^^^^^^[REPLACE] Date date2 = null;^ [CLASS] CalendarUtilsTest  
[REPLACE]^super.setUp (  ) ;^39^^^^^38^40^[REPLACE] super ( name ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] CalendarUtilsTest   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^43^^^^^42^44^[REPLACE] TestRunner.run ( suite (  )  ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CalendarUtilsTest   [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[ADD]^^43^^^^^42^44^[ADD] TestRunner.run ( suite (  )  ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CalendarUtilsTest   [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^47^^^^^46^50^[REPLACE] TestSuite suite = new TestSuite ( CalendarUtilsTest.class ) ;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[ADD]^^47^^^^^46^50^[ADD] TestSuite suite = new TestSuite ( CalendarUtilsTest.class ) ;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^suite.TestSuite ( "CalendarUtilsTest Tests" ) ;^48^^^^^46^50^[REPLACE] suite.setName ( "CalendarUtilsTest Tests" ) ;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REMOVE]^Calendar calEnd = Calendar.getInstance (  ) ;^48^^^^^46^50^[REMOVE] ^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^super.tearDown (  ) ;^53^^^^^52^59^[REPLACE] super.setUp (  ) ;^[METHOD] setUp [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^parser  =  parser ;^55^^^^^52^59^[REPLACE] parser = new java.text.SimpleDateFormat ( "MMM dd, yyyy H:mm:ss.SSS" ) ;^[METHOD] setUp [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^date1 ;^57^^^^^52^59^[REPLACE] date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[METHOD] setUp [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^57^^^^^52^59^[ADD] date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[METHOD] setUp [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^date2  =  date2 ;^58^^^^^52^59^[REPLACE] date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^[METHOD] setUp [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^super.setUp (  ) ;^62^^^^^61^63^[REPLACE] super.tearDown (  ) ;^[METHOD] tearDown [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils .round ( date1 )   ) ;^72^73^74^^^71^114^[REPLACE] assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^74^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^77^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^78^79^80^^^71^114^[REPLACE] assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^80^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^83^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^84^85^86^^^71^114^[REPLACE] assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^84^85^86^^^71^114^[ADD] assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^86^^^^^71^114^[ADD] CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^87^88^89^^^71^114^[ADD] assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^89^^^^^71^114^[ADD] CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^92^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^92^^^^^71^114^[ADD] CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^93^94^95^^^71^114^[REPLACE] assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^95^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils .round ( date2 )   ) ;^96^97^98^^^71^114^[REPLACE] assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^96^97^98^^^71^114^[ADD] assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^97^98^^^^71^114^[ADD] parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^98^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^101^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^102^103^104^^^71^114^[REPLACE] assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^104^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^105^106^107^^^71^114^[REPLACE] assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^105^106^107^^^71^114^[ADD] assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .round ( date2 )   ) ;^107^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^108^109^110^^^71^114^[REPLACE] assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^108^109^110^^^71^114^[ADD] assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^110^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^111^112^113^^^71^114^[REPLACE] assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .round ( date1 )   ) ;^113^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^120^121^122^^^119^163^[REPLACE] assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date1 )   ) ;^122^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^123^124^125^^^119^163^[REPLACE] assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^125^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^126^127^128^^^119^163^[REPLACE] assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^128^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^129^130^131^^^119^163^[REPLACE] assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^131^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils .trunc ( date2 )   ) ;^132^133^134^^^119^163^[REPLACE] assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils .trunc ( date2 )   ) ;^135^136^137^^^119^163^[REPLACE] assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^138^139^140^^^119^163^[REPLACE] assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date2 )   ) ;^140^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils .trunc ( date2 )   ) ;^141^142^143^^^119^163^[REPLACE] assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date2 )   ) ;^143^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^143^^^^^119^163^[ADD] CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^144^145^146^^^119^163^[REPLACE] assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^145^146^^^^119^163^[ADD] parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date2 )   ) ;^146^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^147^148^149^^^119^163^[REPLACE] assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^147^148^149^^^119^163^[ADD] assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^149^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^149^^^^^119^163^[ADD] CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^150^151^152^^^119^163^[REPLACE] assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^152^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^153^154^155^^^119^163^[REPLACE] assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date2 )   ) ;^155^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^155^^^^^119^163^[ADD] CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^157^158^^^^119^163^[ADD] parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^158^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date1 )   ) ;^161^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^Calendar now = false;^176^^^^^169^223^[REPLACE] Calendar now = null;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  = null ;^178^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MINUTE, -1 / 3 ) ;^179^^^^^169^223^[REPLACE] now.add ( Calendar.MINUTE, -1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^Calendar calEnd = Calendar.getInstance (  ) ;^179^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^169^223^[REPLACE] assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^180^181^^^^169^223^[ADD] assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now,   "1 minute ago"   , 50 ) ;^181^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  =  now ;^182^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MINUTE, -8L ) ;^183^^^^^169^223^[REPLACE] now.add ( Calendar.MINUTE, -8 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^223^[REPLACE] assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now,   "8 minutes ago"   , 50 ) ;^185^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^Calendar calEnd = Calendar.getInstance (  ) ;^185^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now ;^187^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^187^188^^^^169^223^[ADD] now = Calendar.getInstance (  ) ; now.add ( Calendar.DATE, -1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, -0 ) ;^188^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, -1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "yesterday" ) , 50 ) ;^190^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  =  now ;^192^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^192^^^^^169^223^[ADD] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, 2 ) ;^193^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, 1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^193^^^^^169^223^[ADD] now.add ( Calendar.DATE, 1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^169^223^[REPLACE] assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "tomorrow" ) , 50 ) ;^195^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  = null ;^197^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^if  ( now.get ( Calendar.DATE )   ||  4 )  {^199^^^^^169^223^[REPLACE] if  ( now.get ( Calendar.DATE )  == 1 )  {^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now .getInstance (  )  ;^203^^^^^199^204^[REPLACE] now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, 1 - now.setTime ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^[REPLACE] now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now .getInstance (  )  ;^201^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, -7 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^169^223^[REPLACE] assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now,   "last Sunday"   , 50 ) ;^206^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  = null ;^208^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, -5 ) ;^209^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, -7 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^169^223^[REPLACE] assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^210^211^^^^169^223^[ADD] assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now,   "last week"   , 50 ) ;^211^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^Calendar calEnd = Calendar.getInstance (  ) ;^211^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  =  now ;^213^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^if  ( now.get ( Calendar.MONTH )   ||  1 )  {^215^^^^^169^223^[REPLACE] if  ( now.get ( Calendar.MONTH )  == 0 )  {^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^if  (  ( now.get ( DATE )  )  == 1 )  {     now.add ( DATE,  ( -7 )  ) ; }else {     now.add ( DATE,  ( 1 -  ( now.get ( DAY_OF_WEEK )  )  )  ) ; }^215^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MONTH, false - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^[REPLACE] now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^219^^^^^215^220^[ADD] now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MONTH, 0 - now.setTime ( Calendar.MONTH )  ) ;^219^^^^^215^220^[REPLACE] now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MONTH, -5 ) ;^217^^^^^169^223^[REPLACE] now.add ( Calendar.MONTH, -12 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^169^223^[REPLACE] assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^221^222^^^^169^223^[ADD] assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "last January" ) , 50 ) ;^222^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^222^^^^^169^223^[ADD] now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^Calendar now = Calendar.getTime (  ) ;^229^^^^^228^251^[REPLACE] Calendar now = Calendar.getInstance (  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar today = CalendarUtils.trunc ( today, Calendar.DATE ) ;^230^^^^^228^251^[REPLACE] Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^[REPLACE] Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^231^^^^^228^251^[ADD] Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^sunday.add ( Calendar.DATE, 0  >=  sunday .getTime (  )   ) ;^232^^^^^228^251^[REPLACE] sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^232^^^^^228^251^[ADD] sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^sunday.add ( Calendar.DATE, 1 - now.setTime ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^[REPLACE] sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar monday = CalendarUtils.trunc ( today, Calendar.DATE ) ;^233^^^^^228^251^[REPLACE] Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^233^^^^^228^251^[ADD] Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^if  ( monday.setTime ( Calendar.DATE )   &&  1 )  {^234^^^^^228^251^[REPLACE] if  ( monday.get ( Calendar.DATE )  == 1 )  {^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^monday.add ( Calendar.DATE, 2  >  monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^[REPLACE] monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^monday.add ( Calendar.DATE, 2 - today.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^[REPLACE] monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^238^^^^^228^251^[ADD] monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^monday.add ( Calendar.DATE, -6 - 3 ) ;^236^^^^^228^251^[REPLACE] monday.add ( Calendar.DATE, -6 ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar centered = CalendarUtils.trunc ( today, Calendar.DATE ) ;^240^^^^^228^251^[REPLACE] Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^centered.add ( Calendar.DATE, -0 ) ;^241^^^^^228^251^[REPLACE] centered.add ( Calendar.DATE, -3 ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Iterator it = CalendarUtils .getCalendarIterator ( centered )  ;^243^^^^^228^251^[REPLACE] Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^assertWeekIterator ( it, monday ) ;^244^^^^^228^251^[REPLACE] assertWeekIterator ( it, sunday ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^244^245^^^^228^251^[ADD] assertWeekIterator ( it, sunday ) ; it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ; ;^245^^^^^228^251^[REPLACE] it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^assertWeekIterator ( it, sunday ) ;^246^^^^^228^251^[REPLACE] assertWeekIterator ( it, monday ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ; ;^247^^^^^228^251^[REPLACE] it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^assertWeekIterator ( it, sunday ) ;^248^^^^^228^251^[REPLACE] assertWeekIterator ( it, today ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ; ;^249^^^^^228^251^[REPLACE] it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^assertWeekIterator ( it, today ) ;^250^^^^^228^251^[REPLACE] assertWeekIterator ( it, centered ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Iterator it = CalendarUtils.round ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^[REPLACE] Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ; ;^262^^^^^256^276^[REPLACE] it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ; ;^267^^^^^256^276^[REPLACE] it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[ADD]^^267^^^^^256^276^[ADD] it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ; ;^272^^^^^256^276^[REPLACE] it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[ADD]^^272^^^^^256^276^[ADD] it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^Calendar end =  ( Calendar )  start .getInstance (  )  ;^283^^^^^282^287^[REPLACE] Calendar end =  ( Calendar )  start.clone (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar end  start 
[REPLACE]^end.add ( Calendar.DATE, 4 ) ;^284^^^^^282^287^[REPLACE] end.add ( Calendar.DATE, 6 ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar end  start 
[ADD]^^284^^^^^282^287^[ADD] end.add ( Calendar.DATE, 6 ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar end  start 
[REPLACE]^assertWeekIterator ( it, calStart, calEnd ) ;^286^^^^^282^287^[REPLACE] assertWeekIterator ( it, start, end ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar end  start 
[REPLACE]^Calendar calStart = Calendar.getTime (  ) ;^293^^^^^292^299^[REPLACE] Calendar calStart = Calendar.getInstance (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[ADD]^^293^294^^^^292^299^[ADD] Calendar calStart = Calendar.getInstance (  ) ; calStart.setTime ( start ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[REPLACE]^calStart.get ( start ) ;^294^^^^^292^299^[REPLACE] calStart.setTime ( start ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[REMOVE]^Calendar calEnd = Calendar.getInstance (  ) ;^294^^^^^292^299^[REMOVE] ^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[REPLACE]^Calendar calEnd = Calendar.getTime (  ) ;^295^^^^^292^299^[REPLACE] Calendar calEnd = Calendar.getInstance (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[ADD]^^295^^^^^292^299^[ADD] Calendar calEnd = Calendar.getInstance (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[REPLACE]^calEnd .getTime (  )  ;^296^^^^^292^299^[REPLACE] calEnd.setTime ( end ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[REPLACE]^assertWeekIterator ( it, start, end ) ;^298^^^^^292^299^[REPLACE] assertWeekIterator ( it, calStart, calEnd ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Date start Date end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  DateFormat parser  [TYPE]  Calendar calEnd  calStart 
[REPLACE]^Calendar cal =  ( Calendar )  it .hasNext (  )  ;^307^^^^^306^327^[REPLACE] Calendar cal =  ( Calendar )  it.next (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^assertEquals ( "", last, cal, 0 ) ;^308^^^^^306^327^[REPLACE] assertEquals ( "", start, cal, 0 ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[ADD]^^308^309^^^^306^327^[ADD] assertEquals ( "", start, cal, 0 ) ; Calendar last = null;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^Calendar last = true;^309^^^^^306^327^[REPLACE] Calendar last = null;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^int count = 1L;^310^^^^^306^327^[REPLACE] int count = 1;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^while  ( it.next (  )  )  {^311^^^^^306^327^[REPLACE] while  ( it.hasNext (  )  )  {^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^last =  start;^315^^^^^306^327^[REPLACE] last = cal;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^cal =   ( Calendar )  null.next (  ) ;^316^^^^^306^327^[REPLACE] cal =  ( Calendar )  it.next (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^if  ( count  ==  0 )  {^323^^^^^306^327^[REPLACE] if  ( count % 7 != 0 )  {^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REMOVE]^if  (  ( abs (  (  ( cal1.getTime (  ) .getTime (  )  )  -  ( cal2.getTime (  ) .getTime (  )  )  )  )  )  > delta )  {     throw new AssertionFailedError (  (  (  (  ( message + " expected " )  +  ( cal1.getTime (  )  )  )  + " but got " )  +  ( cal2.getTime (  )  )  )  ) ; }^323^^^^^306^327^[REMOVE] ^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^return ;^324^^^^^306^327^[REPLACE] throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[ADD]^^324^^^^^306^327^[ADD] throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^assertEquals ( "", last, cal, 0 ) ;^326^^^^^306^327^[REPLACE] assertEquals ( "", end, cal, 0 ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )   >=  delta )  {^334^^^^^333^338^[REPLACE] if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[METHOD] assertEquals [TYPE] void [PARAMETER] String message Calendar cal1 Calendar cal2 long delta [CLASS] CalendarUtilsTest   [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  long delta  [TYPE]  DateFormat parser  [TYPE]  Calendar cal1  cal2 
[REPLACE]^return ;^335^336^^^^333^338^[REPLACE] throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[METHOD] assertEquals [TYPE] void [PARAMETER] String message Calendar cal1 Calendar cal2 long delta [CLASS] CalendarUtilsTest   [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  long delta  [TYPE]  DateFormat parser  [TYPE]  Calendar cal1  cal2 
[REPLACE]^message + " expected " + cal2.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^336^^^^^333^338^[REPLACE] message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[METHOD] assertEquals [TYPE] void [PARAMETER] String message Calendar cal1 Calendar cal2 long delta [CLASS] CalendarUtilsTest   [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  long delta  [TYPE]  DateFormat parser  [TYPE]  Calendar cal1  cal2 
[REPLACE]^message + " expected " + cal1 .setTime ( date2 )   + " but got " + cal1^336^^^^^333^338^[REPLACE] message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[METHOD] assertEquals [TYPE] void [PARAMETER] String message Calendar cal1 Calendar cal2 long delta [CLASS] CalendarUtilsTest   [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  long delta  [TYPE]  DateFormat parser  [TYPE]  Calendar cal1  cal2 
